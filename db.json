{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/opensearch.xml","path":"opensearch.xml","modified":1,"renderable":0},{"_id":"source/images/block_1.jpg","path":"images/block_1.jpg","modified":1,"renderable":0},{"_id":"source/images/block_2.jpg","path":"images/block_2.jpg","modified":1,"renderable":0},{"_id":"source/images/inline-block.jpg","path":"images/inline-block.jpg","modified":1,"renderable":0},{"_id":"source/images/render.png","path":"images/render.png","modified":1,"renderable":0},{"_id":"themes/even/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/even/source/robots.txt","path":"robots.txt","modified":1,"renderable":1},{"_id":"source/images/config_index.js.jpg","path":"images/config_index.js.jpg","modified":1,"renderable":0},{"_id":"themes/even/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"source/images/HTTP.jpg","path":"images/HTTP.jpg","modified":1,"renderable":0},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.eot","path":"fonts/chancery/apple-chancery-webfont.eot","modified":1,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.ttf","path":"fonts/chancery/apple-chancery-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.woff","path":"fonts/chancery/apple-chancery-webfont.woff","modified":1,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.woff2","path":"fonts/chancery/apple-chancery-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/even/source/js/src/even.js","path":"js/src/even.js","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_loading.gif","path":"lib/fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/blank.gif","path":"lib/fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_overlay.png","path":"lib/fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_loading@2x.gif","path":"lib/fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_sprite.png","path":"lib/fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_sprite@2x.png","path":"lib/fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.css","path":"lib/fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.js","path":"lib/fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.pack.js","path":"lib/fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/even/source/lib/nprogress/nprogress.min.css","path":"lib/nprogress/nprogress.min.css","modified":1,"renderable":1},{"_id":"themes/even/source/lib/nprogress/nprogress.min.js","path":"lib/nprogress/nprogress.min.js","modified":1,"renderable":1},{"_id":"themes/even/source/lib/pjax/jquery.pjax.min.js","path":"lib/pjax/jquery.pjax.min.js","modified":1,"renderable":1},{"_id":"themes/even/source/lib/slideout/slideout.min.js","path":"lib/slideout/slideout.min.js","modified":1,"renderable":1},{"_id":"themes/even/source/lib/slideout/slideout.js","path":"lib/slideout/slideout.js","modified":1,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.svg","path":"fonts/chancery/apple-chancery-webfont.svg","modified":1,"renderable":1},{"_id":"themes/even/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/fancybox_buttons.png","path":"lib/fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-media.js","path":"lib/fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"e38b1f26f39aaf7a7157d95ed606ca0e215ef387","modified":1583771957000},{"_id":"source/opensearch.xml","hash":"0f4421aa42341dbcad0b351a81884266cdff9541","modified":1534086507000},{"_id":"themes/even/.eslintrc","hash":"0fcde446104e73d7159f8574f28fe661acdb384e","modified":1534088394000},{"_id":"themes/even/.gitignore","hash":"1d54f4b6fe44e61eae3d29e95de4b2618a6619aa","modified":1534088394000},{"_id":"themes/even/README.md","hash":"5e2144c7940d13aba18fd3ff113c5259bfab19bc","modified":1534088394000},{"_id":"themes/even/LICENSE","hash":"6fd796a4c624297885ceed920ac7130a96f29a85","modified":1534088394000},{"_id":"themes/even/_config.yml","hash":"7f8185e51cf1c64f5b6a8b282b3d5704c208a476","modified":1534350888000},{"_id":"themes/even/package.json","hash":"35a7b731d25a7ed3633b4101662d128126a53778","modified":1534088394000},{"_id":"source/_posts/CSS实现宽度自适应100-，宽高16-9的比例的矩形.md","hash":"86920fadec9d9f1323c7cf1598ef7959d99ae808","modified":1539311849000},{"_id":"source/_posts/CSS细节简记.md","hash":"0ca531397923dc399f69bb504dd2ca6ef72d7ac7","modified":1541655494000},{"_id":"source/_posts/DOM方法.md","hash":"71103ce1ec7ba1569e1082e1254fa42a33e331af","modified":1538036413000},{"_id":"source/_posts/HTML元素简记.md","hash":"8d81eeb3a9bff843dad544683a33215685267c7a","modified":1541645620000},{"_id":"source/_posts/IOS的坑.md","hash":"6fc46cb17ab0845cb93f95aee74991e4c9fe5291","modified":1545216127000},{"_id":"source/_posts/JavaScript细节简记.md","hash":"7c0b8e80ef14c6685a7b4f84d2d3c4c7b367b4e0","modified":1541490046000},{"_id":"source/_posts/XHR实现ajax与jsonp.md","hash":"d822deaa6841c0451df5e8592dc37dcff754fd14","modified":1538221099000},{"_id":"source/_posts/HTTP协议.md","hash":"72f40c8e2b0ddade9d940df7b62054e2a4aa82f3","modified":1542074338000},{"_id":"source/_posts/about-vue.md","hash":"c148d40285de630cb0a2ca6150812f259b3bd5f9","modified":1541656286000},{"_id":"source/_posts/cookie与HTML5离线存储等.md","hash":"6312daaf896345b7de20d4e811a369c75e9f6c12","modified":1539829796000},{"_id":"source/_posts/hello-world.md","hash":"cd30a8b9c0337bfcc4b64ee729dcebe73dd7017f","modified":1534351141000},{"_id":"source/_posts/animation与transform.md","hash":"f6fdf078924caaa10c7a95b850b7814878ae84b7","modified":1539244362000},{"_id":"source/_posts/flex布局.md","hash":"ff5d71d2aba36ca00e4e2bb984a9f079ea6064a4","modified":1538292730000},{"_id":"source/_posts/css居中.md","hash":"b22035f1c71a66980a342ff242cae522d40927e2","modified":1542101020000},{"_id":"source/_posts/js高效更改对象属性名.md","hash":"4a96b8cc1d00177f2cd442485451fccf9ebdc689","modified":1538036393000},{"_id":"source/_posts/js数据转换.md","hash":"4e26081e44d59f28f68eee1ec8a1e0bc6d835543","modified":1539846622000},{"_id":"source/_posts/router和route.md","hash":"1bc7c33e3184449a72d281cd67d65ca4d7cc15ea","modified":1539152587000},{"_id":"source/_posts/vue-cli.md","hash":"4b11b9dc89da7e4a1eba5f72fcb800dd80b3aec3","modified":1539152651000},{"_id":"source/_posts/testOnepage.md","hash":"3cc16765f8b6bf31aa2a1fdb56d9f5fde3f4b4d0","modified":1534259076000},{"_id":"source/_posts/最佳实践.md","hash":"d965df48d43f5b5e2191a516ed0dbcf1b2a44346","modified":1536559827000},{"_id":"source/_posts/浏览器工作原理.md","hash":"9fc2986236069bdbbd668bfdbcbb6ff7780d3e99","modified":1535537012000},{"_id":"source/_posts/移动端touch事件.md","hash":"20481ff377aaca3219ef6994d7cf46fedf2823b7","modified":1545298856000},{"_id":"source/_posts/字符串方法.md","hash":"6dc17fe577b484e3344bd2949c6c6b4264b65417","modified":1541654209000},{"_id":"source/_posts/你不知道的JSON-stringify.md","hash":"39ec32172b4a72c2ebe8c2f9560b94d56ac8a960","modified":1539757850000},{"_id":"source/_posts/数组方法.md","hash":"efb3fc7d754af739d5f6fccb230e7c19e11bf58a","modified":1540207278000},{"_id":"source/_posts/重绘重排.md","hash":"dbd0af884817d8e5bf6d8cdc720c504afd0a8c14","modified":1535535149000},{"_id":"source/about/index.md","hash":"70127771dba1b7a38a25871f621be899214352c6","modified":1540717507000},{"_id":"source/categories/index.md","hash":"503dad92a31ad6f6f75705d49a57792d3a8c4adf","modified":1534176466000},{"_id":"source/images/.DS_Store","hash":"f59ed463a9cd58163bc47f99302953b7dd6fb854","modified":1534762143000},{"_id":"source/images/block_1.jpg","hash":"bb1c50af700e22241f091b94820f5b51ce6f78e7","modified":1534762127000},{"_id":"source/images/block_2.jpg","hash":"ddf02523a4913a8971d83e05425a5ba1d7e5754f","modified":1534765196000},{"_id":"source/images/inline-block.jpg","hash":"335506700dbe5897cea2c3eb664e0b9cf1ee86cd","modified":1534757599000},{"_id":"source/images/render.png","hash":"6a52acdd639ff9944123baeaa3e66acb3b42b4e5","modified":1535425766000},{"_id":"source/tags/index.md","hash":"3f2b835bfb34249582ba604ef577d24c21ec85b3","modified":1534176293000},{"_id":"themes/even/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1534088394000},{"_id":"themes/even/.git/FETCH_HEAD","hash":"297af4589eb5306b9bb9e7e9df7018c3abd01c52","modified":1540548750000},{"_id":"themes/even/.git/ORIG_HEAD","hash":"5f55c54c360580c7efb92d67f588cf5702cd7702","modified":1540548750000},{"_id":"themes/even/.git/config","hash":"5ef1223485809abf438784735be8518631c5a612","modified":1534088394000},{"_id":"themes/even/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1534088378000},{"_id":"themes/even/.git/index","hash":"e7e3035d47f6fb991a1f25a374dc6f2d53276e81","modified":1539918054000},{"_id":"themes/even/.git/packed-refs","hash":"ddae2071c48d8878486e066fc33add5fe7a5e40f","modified":1534088394000},{"_id":"themes/even/languages/default.yml","hash":"3f3d4f2657525c4a0660257df944a1936e703609","modified":1534088394000},{"_id":"themes/even/languages/en.yml","hash":"563b1e018a7aff5e5369093cdffc57f8e3f47a29","modified":1534088394000},{"_id":"themes/even/languages/zh-cn.yml","hash":"f7da3fc6252df9d19abd1321b3c5a8c2ad13cca7","modified":1534088394000},{"_id":"themes/even/layout/_layout.swig","hash":"f688ecdf78f9699907599fe899012fb5e29a9f29","modified":1534088394000},{"_id":"themes/even/layout/archive.swig","hash":"52a91a52d34556c77815cd03bd7d5b9fd66b04ce","modified":1534088394000},{"_id":"themes/even/layout/categories.swig","hash":"21987803e162bd9383502d9de07d5d531b78cb53","modified":1534088394000},{"_id":"themes/even/layout/index.swig","hash":"f3341b5f4af1eab0930a1d078b3022bbe0a59232","modified":1534088394000},{"_id":"themes/even/layout/page.swig","hash":"3cade69477ab4ec34aac9e9dbf1b8cd0485a87a9","modified":1534088394000},{"_id":"themes/even/layout/post.swig","hash":"367b204579f8b9612399693a803c224925399a87","modified":1534088394000},{"_id":"themes/even/layout/tags.swig","hash":"c4d4cb9a3bcd05368d93fff107141899370933df","modified":1534088394000},{"_id":"themes/even/source/favicon.ico","hash":"0505cec3b99707df7a681de37177b3cf7950cc5d","modified":1534088394000},{"_id":"themes/even/source/robots.txt","hash":"eed1ebad39b24e7942fcaf8f27da7487eb9f956e","modified":1534088394000},{"_id":"source/images/config_index.js.jpg","hash":"71d8749ad43dffd24ca257508251ef3dcc9634fe","modified":1534298944000},{"_id":"themes/even/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1534088378000},{"_id":"themes/even/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1534088378000},{"_id":"themes/even/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1534088378000},{"_id":"themes/even/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1534088378000},{"_id":"themes/even/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1534088378000},{"_id":"themes/even/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1534088378000},{"_id":"themes/even/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1534088378000},{"_id":"themes/even/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1534088378000},{"_id":"themes/even/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1534088378000},{"_id":"themes/even/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1534088378000},{"_id":"themes/even/.git/logs/HEAD","hash":"a6fec834e8dc6ea418f80295c901840559d54594","modified":1534088394000},{"_id":"themes/even/layout/_macro/archive.swig","hash":"96541615b4818dcfbb19e93d89fe85abebf37d4f","modified":1534088394000},{"_id":"themes/even/layout/_macro/post.swig","hash":"859581571e3a5bb065c11edd2d9ee7e6352ccc45","modified":1534088394000},{"_id":"themes/even/layout/_partial/comments.swig","hash":"7381a356cea9d28a059aa72b0653e81ca85b2622","modified":1534088394000},{"_id":"themes/even/layout/_partial/footer.swig","hash":"2fc41d0b6a58ffeb7692a5f938697812f674ae29","modified":1534088394000},{"_id":"themes/even/layout/_partial/head.swig","hash":"37fc57acdf6a8b7b77d470612a341ffc565b59cc","modified":1534088394000},{"_id":"themes/even/layout/_partial/header.swig","hash":"49c1cabfe8d4692b1743ca19f6296334e7d4781a","modified":1534088394000},{"_id":"themes/even/layout/_partial/pagination.swig","hash":"3843e523b9a7a1c5973d0c2de05cc88467733e09","modified":1534088394000},{"_id":"themes/even/layout/_partial/slideout.swig","hash":"0c2a10d97f8beedaaa23fbf98c5c4ff267213014","modified":1534088394000},{"_id":"themes/even/layout/_script/comments.swig","hash":"bad8bc57e9479c6771f1942e092dd30b614bb17b","modified":1534088394000},{"_id":"themes/even/layout/_script/counter.swig","hash":"016ee9a2aeac6f957c8e4ed421394c9a57d389ed","modified":1534088394000},{"_id":"themes/even/layout/_script/analytics.swig","hash":"24ba4a8adcaf09c9ede76405ee732385595d8e39","modified":1534088394000},{"_id":"themes/even/layout/_script/libs.swig","hash":"689d2e6b829e028e9321a7174a9fee26bc1fc6f1","modified":1534088394000},{"_id":"themes/even/layout/_script/push.swig","hash":"2aacb350e2e4870f175ba4783c710c4c4006274c","modified":1534088394000},{"_id":"themes/even/layout/_script/theme.swig","hash":"ef8207e22d10ba11821749e1dc0041cf0104d7e3","modified":1534088394000},{"_id":"themes/even/source/css/_base.scss","hash":"ffd8c02b4e1dde0433458b0fef02f01a1fd0f1dd","modified":1534088394000},{"_id":"themes/even/source/css/style.scss","hash":"d984c3006404eb1130a6c6c369da1902c9d9a6a5","modified":1534088394000},{"_id":"themes/even/source/css/_variables.scss","hash":"b2f58e1116c0c931af33bc8e780a8522811965fc","modified":1534088394000},{"_id":"source/images/HTTP.jpg","hash":"c3d073e50c7f4492ddd814dc866f3a1869f74b43","modified":1536834621000},{"_id":"themes/even/.git/objects/04/ab7f29661712806e474ba885cc5110852d4a20","hash":"a1654eb84db95eb34994fcbf52a02ac916a548c4","modified":1540548750000},{"_id":"themes/even/.git/objects/0b/6ec193202e3e8ea0b467764285bb528c8b0a44","hash":"6af9f62e069e10d5d608ffe02f26b201628526f9","modified":1540548750000},{"_id":"themes/even/.git/objects/0d/b6fb713f1e9be25f72e3bfe849e53de82089fd","hash":"1b5979a232c743525558b2180e047df666e1dace","modified":1540548750000},{"_id":"themes/even/.git/objects/32/2a9733b7b711e505522ba4041473dd8b6d3856","hash":"4ff147ef6c014ae9b0988c145f8fceff730a1df6","modified":1540548750000},{"_id":"themes/even/.git/objects/26/1f359645320f502ed5b90bf95a6cdc8ef17b39","hash":"8cc8b686017e7bd8a7b380cea7417989d0a2bf70","modified":1540548750000},{"_id":"themes/even/.git/objects/26/7bccf814d4e0ee6634ecf40030403fe9897b58","hash":"ef96cade9dbba2263d27a44295564496b51ef1d6","modified":1540548750000},{"_id":"themes/even/.git/objects/2a/6e3fc91306caa985717f0337b7d358da21b9ff","hash":"40f8c0bd3bbf47eb936b017e271fb17ed38c1efc","modified":1540548750000},{"_id":"themes/even/.git/objects/37/835eb2739a73f78372778ae34279766f0fcb66","hash":"bcf60a7853ec5ecead89da8a032836284464fce9","modified":1540548750000},{"_id":"themes/even/.git/objects/17/515a781657b6bfe6eb66b4c7961d0e3a57afb0","hash":"d456f68dd7f237e664f26bdb4b007a14fb6ebfb5","modified":1540548750000},{"_id":"themes/even/.git/objects/49/c21c8df00ac329d446da1be136faa66ad3a9b7","hash":"3a36e9d865d08c199508029ab22fb8a50b1ee892","modified":1540548750000},{"_id":"themes/even/.git/objects/4a/b6ed341bf42e798c68156eaa9804f987148584","hash":"01228fde401066f0e2920e51e755caef6b2e42c2","modified":1540548750000},{"_id":"themes/even/.git/objects/4a/9c2703f4fb68be3e666845a7048634be3c2291","hash":"67a736c549f5a2faa2aa0458ca38cf45061b412c","modified":1540548750000},{"_id":"themes/even/.git/objects/41/4021255bec2fd17f19c8d3c33d099aac036391","hash":"c79827f88d56a409695e232bdd4e598ad30831c8","modified":1540548750000},{"_id":"themes/even/.git/objects/55/54c44050e04545e8006a74bfc9c24828391ca0","hash":"0ab5b7d873a8874262d12281c60a91deb80148a4","modified":1540548750000},{"_id":"themes/even/.git/objects/46/54810113e9c7e01304b542883998d13e64b051","hash":"09f01c22e69b6ef109f78394c32cfe7b854519ee","modified":1540548750000},{"_id":"themes/even/.git/objects/46/678ae3df0f923f337a5aa80850dd13fdd1a496","hash":"cfbf8504a1661c8566f2e51007cfa75190dfa20c","modified":1540548750000},{"_id":"themes/even/.git/objects/6c/c25a9e5d64f04de3748e8a5b193deae434ff48","hash":"e69d992f141612018577dadddeed5d59d397b09e","modified":1540548750000},{"_id":"themes/even/.git/objects/6c/fd68268d9706a81021495288fb97f29e5289f0","hash":"65bf08dbd930570b87e59b289039bdeb4ad93cba","modified":1540548750000},{"_id":"themes/even/.git/objects/73/13984c9ab35faae6df2642435d7a4e541e2cf8","hash":"125df7504a915022d7a3258dfaf3c4d5a6747482","modified":1540548750000},{"_id":"themes/even/.git/objects/76/c7c3bd306055d4147193f06e172873cc90fd09","hash":"5ac6fc5dcf94a7daf3826bd82253c19a44b3fe62","modified":1540548750000},{"_id":"themes/even/.git/objects/77/3b00fb844f602501f1c9edc7271a85de4280ce","hash":"9d242ae6a99ea8c4d317e6d49dde74a0ec1f69c1","modified":1540548750000},{"_id":"themes/even/.git/objects/7f/dd095c79cb5cda26a0318b4266ad00aa224dd5","hash":"e1b768b6d288d925bf39098ef1a352b98e2071e2","modified":1534766459000},{"_id":"themes/even/.git/objects/80/9bab906bbc7115088d2dbd8ab0d9fd492a1cf3","hash":"8ad1fc01cb1ac04cd4b49f8a9e6843d888d4532d","modified":1540548750000},{"_id":"themes/even/.git/objects/82/97113d11639ee76ed3882ad052fe7c33bb6679","hash":"8fd1a5065bad1f010f02574a9cd0e71c7fc51802","modified":1534766459000},{"_id":"themes/even/.git/objects/83/50e65eafe4cbd29234869f1c6cfc344dd92015","hash":"522d206d9502c327b693de326bc7030db64643f0","modified":1540548750000},{"_id":"themes/even/.git/objects/85/5d77c5da90c902efb2357c8cc568cc12bb7496","hash":"4eea07d6549ca589c65443b557e64c43ad8c45c4","modified":1540548750000},{"_id":"themes/even/.git/objects/8c/44206364f66449598754adfa3afdf37b3a3194","hash":"c6cfd3ce8943e081d129de4efe2687c91384ac38","modified":1540548750000},{"_id":"themes/even/.git/objects/98/930434d7c993596c9d46811f8eddd2d7885624","hash":"90aace643c62f86da2e8e74c74f00648af817071","modified":1540548750000},{"_id":"themes/even/.git/objects/93/2c5ee3f50e013e389ae46adab92a16825f18bc","hash":"7a988947d79bc8cacbce3f13242f0b1540399e48","modified":1540548750000},{"_id":"themes/even/.git/objects/a8/7cd41bb998d038a208ab6d839bcd7ff3704baa","hash":"07ebf9732a641557350390d13ec37788308e0509","modified":1540548750000},{"_id":"themes/even/.git/objects/a8/8918b9214b9c96da34eb20743fc9167d2e1691","hash":"9652a6c08853a82872486256dbd1ffcd90a388e0","modified":1540548750000},{"_id":"themes/even/.git/objects/aa/7fe3c8c68310990bd4d593a98c44034eac7f42","hash":"4f12f94809433e02cddd7ad724b4a52ab8ae3ff9","modified":1540548750000},{"_id":"themes/even/.git/objects/ab/7e061876bfd8054c3d03ac6b82933aad7a24cc","hash":"2d96dd279cc31ea7bb7a6881923bbce93bb94cea","modified":1540548750000},{"_id":"themes/even/.git/objects/ae/32d812cf5e9b5dba17dff9f475b4f89bf3df2f","hash":"00ed30cfbcc07ceaed83c1e8d2b7d91b4d0ed107","modified":1540548750000},{"_id":"themes/even/.git/objects/ba/81e684f927284109c340f7f1e07e466ef2809a","hash":"7acc92016140f78dc887a41868a997d55a409532","modified":1540548750000},{"_id":"themes/even/.git/objects/c2/391b6ee5f463cc3d8c7b3a091785ddb68d9a50","hash":"18941cd53a890bdaad741d55f28d1d8aa6f68099","modified":1534766459000},{"_id":"themes/even/.git/objects/c3/8b580f3e4f2a8d46a338ae3f83a95eecf21741","hash":"ab9df95a9927e9287d6a6862db07aeb78265117c","modified":1540548750000},{"_id":"themes/even/.git/objects/c7/54c7f0771624d74a786bed8874be102e6efb45","hash":"af261ca5500a9df8e1ce8126e4a4267080e1dc30","modified":1540548750000},{"_id":"themes/even/.git/objects/c9/903eefa2a7c09f1c6dbd1898ea0832985461c8","hash":"88cba9c6c21b6f788cc26fd7f63e808162379dea","modified":1540548750000},{"_id":"themes/even/.git/objects/ca/f8a2457136cbf5b17afd641513eddd2451ec74","hash":"9edbea6fb04b2c66973020c4dd44b89b9eb07945","modified":1540548750000},{"_id":"themes/even/.git/objects/cf/8c96778e9422bcb43c26ec642870d9fb7fe929","hash":"d54f3593991bb895fb819b347287b145cee53252","modified":1540548750000},{"_id":"themes/even/.git/objects/e2/0b08aadcac254675c3ef63bb3680ae726e207d","hash":"5946cdbbc5bbfe6f8ad0901aec2f33e27d192171","modified":1540548750000},{"_id":"themes/even/.git/objects/ec/5438c6013bac7808f4212e305eb3c25cbf7059","hash":"42b4a82681a06e5ae44b568c066264422fc429c7","modified":1540548750000},{"_id":"themes/even/.git/objects/f1/95b0e9dae680a5dbce5e2ea7e338f776d7d136","hash":"a868a9854c47f56fa610b4e503e1fab86d63b713","modified":1540548750000},{"_id":"themes/even/.git/objects/f1/ef8aad941552f3fccf8f63c2840bea42def295","hash":"cdc24f3ca50316e9f6ae6e20f02ac04cc5b949eb","modified":1540548750000},{"_id":"themes/even/.git/objects/f5/c4d94c1acf91bec5e3df129b16c507d492977d","hash":"a9ec3ad1c08ff42d306d8934c9ed90773e65686f","modified":1540548750000},{"_id":"themes/even/.git/objects/f7/bf9653ecf323deaf3892db56c70b94a1edc8e3","hash":"be81830c29d2b8c91e86d888968ae09e40a67d1b","modified":1540548750000},{"_id":"themes/even/.git/refs/heads/master","hash":"5f55c54c360580c7efb92d67f588cf5702cd7702","modified":1534088394000},{"_id":"themes/even/layout/_partial/_head/meta.swig","hash":"0b3ce980cc48cce232527637084fc223cdcbf3d1","modified":1534088394000},{"_id":"themes/even/layout/_partial/_footer/social.swig","hash":"65368d0a5108fecc072eaea3b1fb04c597941729","modified":1534088394000},{"_id":"themes/even/layout/_partial/_post/copyright.swig","hash":"e3bc479c323612a52eb0367a4ba4cfcd3fadd0a9","modified":1534088394000},{"_id":"themes/even/layout/_partial/_post/reward.swig","hash":"faf64b5461970fda72863e9779f3f024cb493658","modified":1534088394000},{"_id":"themes/even/layout/_partial/_post/toc.swig","hash":"2150852c6020262333e6468cdfa5bdb216418f42","modified":1534088394000},{"_id":"themes/even/layout/_script/_comments/changyan.swig","hash":"caa7633fd47b103055b5a3b338830cc2a03bc1af","modified":1534088394000},{"_id":"themes/even/layout/_script/_analytics/baidu-analytics.swig","hash":"ce7c137b4a90a0a87d770a5c8cabd0849cd477ac","modified":1534088394000},{"_id":"themes/even/layout/_script/_analytics/google-analytics.swig","hash":"05d928829a52e901a3b772b870321ae2cfc66519","modified":1534088394000},{"_id":"themes/even/layout/_script/_comments/disqus.swig","hash":"0502145777d65515249680d3e4611f249e3d9ff8","modified":1534088394000},{"_id":"themes/even/layout/_script/_comments/livere.swig","hash":"c5cbbd3fe24ef3f541c4cd1524f7903c5c07037b","modified":1534088394000},{"_id":"themes/even/source/css/_common/_animation.scss","hash":"f32d2444f0ab4dcb8b811ae1bccae6073f21a988","modified":1534088394000},{"_id":"themes/even/source/css/_common/_normalize.scss","hash":"f1849753f16f12400615e15f294394248ee66a60","modified":1539930283000},{"_id":"themes/even/source/css/_custom/_custom.scss","hash":"1cbd5777b6accaa57415b7186fe19ab2684a46e9","modified":1535440809000},{"_id":"themes/even/source/css/_common/_utils.scss","hash":"9ec5b1f6cf47260eba2729ff4931111b808644f0","modified":1534088394000},{"_id":"themes/even/source/css/_partial/_archive.scss","hash":"a32395e4efebb2284159f1bd32ee603162463930","modified":1534088394000},{"_id":"themes/even/source/css/_partial/_footer.scss","hash":"76f3a72440be8aa1e93d8ddc5ea958777d1545ab","modified":1534088394000},{"_id":"themes/even/source/css/_partial/_back-to-top.scss","hash":"de94a4546dad90f588e902c9641d94b31fd6625b","modified":1534088394000},{"_id":"themes/even/source/css/_partial/_categories.scss","hash":"96f47000d25ef4e0e948f8f43fa4e2983ff0d746","modified":1534088394000},{"_id":"themes/even/source/css/_partial/_header.scss","hash":"4a3e92feef33bed0021f1a65a801c24ee7d5946f","modified":1534088394000},{"_id":"themes/even/source/css/_partial/_mobile.scss","hash":"0d1c60bd92f8e5db01e7843934251152ec4d6d44","modified":1534088394000},{"_id":"themes/even/source/css/_partial/_iconfont.scss","hash":"ab9f12b6bdf37e93c509205bddb4b6bad3d95d5d","modified":1534088394000},{"_id":"themes/even/source/css/_partial/_nprogress.scss","hash":"6a3ed904b45cbeecfbf632627ad647718bf64c22","modified":1534088394000},{"_id":"themes/even/source/css/_partial/_pagination.scss","hash":"b24db39534e180ebcebba2e81d91d9f1d534eea1","modified":1534088394000},{"_id":"themes/even/source/css/_partial/_post.scss","hash":"1ac1f002786014c13d796a9e6eef050fe49c3541","modified":1534088394000},{"_id":"themes/even/source/css/_partial/_slideout.scss","hash":"e4820a42698f647a824575b234835b9ce4ac4797","modified":1534088394000},{"_id":"themes/even/source/css/_partial/_tags.scss","hash":"fb4bf54b34291d5b72598a7ba4d3e370c8ad9383","modified":1534088394000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.eot","hash":"fef78bd502f74fdbf0316123e176454cb3eb4e50","modified":1534088394000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.ttf","hash":"5e25c531901d8a9e37ab45a7f4acdbe5324b51b6","modified":1534088394000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.woff","hash":"95beafe485d4bdbddfecbcf3b2bc9b2d9cf5f5c5","modified":1534088394000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.woff2","hash":"afd0f74128f1c21c5a542b2e100870e74da663b6","modified":1534088394000},{"_id":"themes/even/source/js/src/even.js","hash":"e586fe4379a134d80b3d01208601ab11b7014d4a","modified":1534347641000},{"_id":"themes/even/source/lib/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1534088394000},{"_id":"themes/even/source/lib/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1534088394000},{"_id":"themes/even/source/lib/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1534088394000},{"_id":"themes/even/source/lib/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1534088394000},{"_id":"themes/even/source/lib/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1534088394000},{"_id":"themes/even/source/lib/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1534088394000},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1534088394000},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1534088394000},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1534088394000},{"_id":"themes/even/source/lib/nprogress/nprogress.min.css","hash":"79a4f6785c09b8546a37f927e4a5d89af7156171","modified":1534088394000},{"_id":"themes/even/source/lib/nprogress/nprogress.min.js","hash":"3cca20b36156d9974312555d55db3fed194a3d04","modified":1534088394000},{"_id":"themes/even/source/lib/pjax/jquery.pjax.min.js","hash":"0ced78e5c97127948f5bfbfbb80c4fce5c0f671e","modified":1534088394000},{"_id":"themes/even/source/lib/slideout/slideout.min.js","hash":"7166ed307b771398a593fc3d4f1c5d93fbbe19bb","modified":1534088394000},{"_id":"themes/even/source/lib/slideout/slideout.js","hash":"81ec76a63f6f4bbdfc801d822182ab8afa9068fe","modified":1534088394000},{"_id":"themes/even/.git/objects/pack/pack-a99beb34eaf9a214f310752b3d3d76c070da67f9.idx","hash":"36157e1c7258c50a91e57c9639914313f209363c","modified":1534088394000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.svg","hash":"a94e508f306a742637653f98c6e8827b11d3c142","modified":1534088394000},{"_id":"themes/even/source/lib/jquery/jquery.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1534088394000},{"_id":"themes/even/.git/logs/refs/heads/master","hash":"a6fec834e8dc6ea418f80295c901840559d54594","modified":1534088394000},{"_id":"themes/even/.git/refs/remotes/origin/master","hash":"0fd067dee8ee2f88d7f4db86c05e0faef4e193e9","modified":1540548750000},{"_id":"themes/even/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1534088394000},{"_id":"themes/even/source/css/_partial/_footer/_social.scss","hash":"bca6a1036951c2475278bfbd3a5ce51ff861e9a3","modified":1534088394000},{"_id":"themes/even/source/css/_partial/_footer/_copyright.scss","hash":"afbc0f90c674e5cd5fd7509eb1296d60b999d4e1","modified":1534088394000},{"_id":"themes/even/source/css/_partial/_header/_logo.scss","hash":"109073dde15146d835bf06faa2f256d1ac658315","modified":1534088394000},{"_id":"themes/even/source/css/_partial/_header/_menu.scss","hash":"454214ab2b5a0ca17d6872068c52bfd01ac02fdc","modified":1534088394000},{"_id":"themes/even/source/css/_partial/_post/_code.scss","hash":"cff6c1a599a4bb7c55b502ea09849c1286483644","modified":1534088394000},{"_id":"themes/even/source/css/_partial/_post/_content.scss","hash":"6034f616203fe54c7c5185ec1ef9898e273858a4","modified":1536835052000},{"_id":"themes/even/source/css/_partial/_post/_copyright.scss","hash":"71d949b053b0176621fdba5dc1e2e740f60b467d","modified":1534088394000},{"_id":"themes/even/source/css/_partial/_post/_footer.scss","hash":"9f2ab0ac20b2a8bfd315febd387c399f72f43d10","modified":1534088394000},{"_id":"themes/even/source/css/_partial/_post/_header.scss","hash":"f655fc254804e59d1426471f41127f26d06432b6","modified":1534088394000},{"_id":"themes/even/source/css/_partial/_post/_reward.scss","hash":"66ec9faa27ed879dc9a2ca59c73ed6bfd5e61dcd","modified":1534088394000},{"_id":"themes/even/source/css/_partial/_post/_toc.scss","hash":"5806ce8d5c4e2d70e12e03ab48327bdebc68c67b","modified":1534088394000},{"_id":"themes/even/source/lib/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1534088394000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1534088394000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1534088394000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1534088394000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1534088394000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1534088394000},{"_id":"themes/even/.git/logs/refs/remotes/origin/HEAD","hash":"a6fec834e8dc6ea418f80295c901840559d54594","modified":1534088394000},{"_id":"themes/even/.git/logs/refs/remotes/origin/master","hash":"61aab25e44b0c08cda520b6d864e085b5bec479b","modified":1540548750000},{"_id":"themes/even/.git/objects/pack/pack-a99beb34eaf9a214f310752b3d3d76c070da67f9.pack","hash":"ff06d8c33a1815a58123d2b8287a76b564a6cb04","modified":1534088394000}],"Category":[{"name":"CSS","_id":"ck7kpl01w0004jcs6zkgq8t8g"},{"name":"JavaScript","_id":"ck7kpl029000ejcs6dhskl9gu"},{"name":"HTML","_id":"ck7kpl02e000ljcs6tm3p9wxs"},{"name":"BUG","_id":"ck7kpl02g000rjcs6rf851v33"},{"name":"Vue","_id":"ck7kpl02r001fjcs6545h157t"},{"name":"博客相关","_id":"ck7kpl02v001pjcs68ua5m509"},{"name":"性能优化","_id":"ck7kpl035002ajcs6egp52206"},{"name":"移动端","_id":"ck7kpl036002gjcs6wqmrua62"},{"name":"JSON","_id":"ck7kpl038002mjcs6oxg5ww5m"},{"name":"HTTP","_id":"ck7kpl04p0037jcs63rfygxqu"}],"Data":[],"Page":[{"title":"about","layout":"page","date":"2018-08-12T15:54:42.000Z","_content":"QQ：1748711164 （欢迎一起研讨前端技术，一起进步）\n\n毕业院校： 西安电子科技大学-电子信息科学与技术\n\n工作中使用过的框架：`Vue` `React` `Element` `antd-mobile`\n\n开源中国：[https://my.oschina.net/littleFaye/](https://my.oschina.net/littleFaye/)\n\n> 我是哼哼，我为自己带盐","source":"about/index.md","raw":"---\ntitle: about\nlayout: page\ndate: 2018-08-12 23:54:42\n---\nQQ：1748711164 （欢迎一起研讨前端技术，一起进步）\n\n毕业院校： 西安电子科技大学-电子信息科学与技术\n\n工作中使用过的框架：`Vue` `React` `Element` `antd-mobile`\n\n开源中国：[https://my.oschina.net/littleFaye/](https://my.oschina.net/littleFaye/)\n\n> 我是哼哼，我为自己带盐","updated":"2018-10-28T09:05:07.000Z","path":"about/index.html","comments":1,"_id":"ck7kpl01r0001jcs6tnbwadrr","content":"<p>QQ：1748711164 （欢迎一起研讨前端技术，一起进步）</p>\n<p>毕业院校： 西安电子科技大学-电子信息科学与技术</p>\n<p>工作中使用过的框架：<code>Vue</code> <code>React</code> <code>Element</code> <code>antd-mobile</code></p>\n<p>开源中国：<a href=\"https://my.oschina.net/littleFaye/\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/littleFaye/</a></p>\n<blockquote>\n<p>我是哼哼，我为自己带盐</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>QQ：1748711164 （欢迎一起研讨前端技术，一起进步）</p>\n<p>毕业院校： 西安电子科技大学-电子信息科学与技术</p>\n<p>工作中使用过的框架：<code>Vue</code> <code>React</code> <code>Element</code> <code>antd-mobile</code></p>\n<p>开源中国：<a href=\"https://my.oschina.net/littleFaye/\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/littleFaye/</a></p>\n<blockquote>\n<p>我是哼哼，我为自己带盐</p>\n</blockquote>\n"},{"title":"categories","layout":"categories","date":"2018-08-13T16:07:25.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\nlayout: categories\ndate: 2018-08-14 00:07:25\n---\n","updated":"2018-08-13T16:07:46.000Z","path":"categories/index.html","comments":1,"_id":"ck7kpl01v0003jcs6sqip680z","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","layout":"tags","date":"2018-08-13T16:04:29.000Z","_content":"# this is a tags page","source":"tags/index.md","raw":"---\ntitle: tags\nlayout: tags\ndate: 2018-08-14 00:04:29\n---\n# this is a tags page","updated":"2018-08-13T16:04:53.000Z","path":"tags/index.html","comments":1,"_id":"ck7kpl04o0036jcs63wyose3o","content":"<h1 id=\"this-is-a-tags-page\"><a href=\"#this-is-a-tags-page\" class=\"headerlink\" title=\"this is a tags page\"></a>this is a tags page</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"this-is-a-tags-page\"><a href=\"#this-is-a-tags-page\" class=\"headerlink\" title=\"this is a tags page\"></a>this is a tags page</h1>"}],"Post":[{"title":"CSS实现宽度自适应100%，宽高16:9的比例的矩形","date":"2018-10-11T08:01:14.000Z","description":"CSS实现宽度自适应100%，宽高16:9的比例的矩形","keywords":"CSS实现宽高比例的矩形","_content":"\n```html\n<div class=\"item\"></div>\n```\n# 使用 vw 实现\n\n> 首先介绍下 vw vh 还有 vmax、vmin；\n> - 1vw: 表示视口宽度的1%\n> - 1vh: 表示视口高度的1%\n> - 1vmax: 表示视口高度和高度较大值的1%\n> - 1vmin: 表示视口高度和高度较大小值的1%\n\n实现需求代码\n```css\n.item {\n  width: 100vw;\n  height: .5625vw\n}\n```\n\n# 使用 `padding` 或 `margin` 撑起容器\n我们知道 `padding` 或 `margin` 值为百分比的时候 是取自元素宽度的百分比值\n所以，以 `padding` 为例，实现代码如下：\n```css\n.item {\n  width: 100%;\n  height: 0;\n  padding-top: 56.25%\n}\n```\n# 使用伪元素 + `padding` 或 `margin` 撑起容器\n前提是 `.item` 元素内没有其他填充物\n```css\n.item::after{\n  content: '';\n  display: block;\n  width: 100%;\n  height: 0;\n  padding-top: 56.25%\n}\n```","source":"_posts/CSS实现宽度自适应100-，宽高16-9的比例的矩形.md","raw":"---\ntitle: 'CSS实现宽度自适应100%，宽高16:9的比例的矩形'\ndate: 2018-10-11 16:01:14\ntags: CSS\ndescription: CSS实现宽度自适应100%，宽高16:9的比例的矩形\nkeywords: CSS实现宽高比例的矩形\ncategories: CSS\n---\n\n```html\n<div class=\"item\"></div>\n```\n# 使用 vw 实现\n\n> 首先介绍下 vw vh 还有 vmax、vmin；\n> - 1vw: 表示视口宽度的1%\n> - 1vh: 表示视口高度的1%\n> - 1vmax: 表示视口高度和高度较大值的1%\n> - 1vmin: 表示视口高度和高度较大小值的1%\n\n实现需求代码\n```css\n.item {\n  width: 100vw;\n  height: .5625vw\n}\n```\n\n# 使用 `padding` 或 `margin` 撑起容器\n我们知道 `padding` 或 `margin` 值为百分比的时候 是取自元素宽度的百分比值\n所以，以 `padding` 为例，实现代码如下：\n```css\n.item {\n  width: 100%;\n  height: 0;\n  padding-top: 56.25%\n}\n```\n# 使用伪元素 + `padding` 或 `margin` 撑起容器\n前提是 `.item` 元素内没有其他填充物\n```css\n.item::after{\n  content: '';\n  display: block;\n  width: 100%;\n  height: 0;\n  padding-top: 56.25%\n}\n```","slug":"CSS实现宽度自适应100-，宽高16-9的比例的矩形","published":1,"updated":"2018-10-12T02:37:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7kpl01m0000jcs6gcjpjwie","content":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"使用-vw-实现\"><a href=\"#使用-vw-实现\" class=\"headerlink\" title=\"使用 vw 实现\"></a>使用 vw 实现</h1><blockquote>\n<p>首先介绍下 vw vh 还有 vmax、vmin；</p>\n<ul>\n<li>1vw: 表示视口宽度的1%</li>\n<li>1vh: 表示视口高度的1%</li>\n<li>1vmax: 表示视口高度和高度较大值的1%</li>\n<li>1vmin: 表示视口高度和高度较大小值的1%</li>\n</ul>\n</blockquote>\n<p>实现需求代码<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100vw</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: .<span class=\"number\">5625vw</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"使用-padding-或-margin-撑起容器\"><a href=\"#使用-padding-或-margin-撑起容器\" class=\"headerlink\" title=\"使用 padding 或 margin 撑起容器\"></a>使用 <code>padding</code> 或 <code>margin</code> 撑起容器</h1><p>我们知道 <code>padding</code> 或 <code>margin</code> 值为百分比的时候 是取自元素宽度的百分比值<br>所以，以 <code>padding</code> 为例，实现代码如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">56.25%</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"使用伪元素-padding-或-margin-撑起容器\"><a href=\"#使用伪元素-padding-或-margin-撑起容器\" class=\"headerlink\" title=\"使用伪元素 + padding 或 margin 撑起容器\"></a>使用伪元素 + <code>padding</code> 或 <code>margin</code> 撑起容器</h1><p>前提是 <code>.item</code> 元素内没有其他填充物<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">56.25%</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"使用-vw-实现\"><a href=\"#使用-vw-实现\" class=\"headerlink\" title=\"使用 vw 实现\"></a>使用 vw 实现</h1><blockquote>\n<p>首先介绍下 vw vh 还有 vmax、vmin；</p>\n<ul>\n<li>1vw: 表示视口宽度的1%</li>\n<li>1vh: 表示视口高度的1%</li>\n<li>1vmax: 表示视口高度和高度较大值的1%</li>\n<li>1vmin: 表示视口高度和高度较大小值的1%</li>\n</ul>\n</blockquote>\n<p>实现需求代码<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100vw</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: .<span class=\"number\">5625vw</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"使用-padding-或-margin-撑起容器\"><a href=\"#使用-padding-或-margin-撑起容器\" class=\"headerlink\" title=\"使用 padding 或 margin 撑起容器\"></a>使用 <code>padding</code> 或 <code>margin</code> 撑起容器</h1><p>我们知道 <code>padding</code> 或 <code>margin</code> 值为百分比的时候 是取自元素宽度的百分比值<br>所以，以 <code>padding</code> 为例，实现代码如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">56.25%</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"使用伪元素-padding-或-margin-撑起容器\"><a href=\"#使用伪元素-padding-或-margin-撑起容器\" class=\"headerlink\" title=\"使用伪元素 + padding 或 margin 撑起容器\"></a>使用伪元素 + <code>padding</code> 或 <code>margin</code> 撑起容器</h1><p>前提是 <code>.item</code> 元素内没有其他填充物<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">56.25%</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"CSS细节简记","date":"2018-10-15T08:43:23.000Z","description":"记录各类属性等细节，以备随时查询","keywords":"CSS","_content":"# LESS 文档\n> http://www.css88.com/doc/less/features/\n\n```less\n// Variables\n@images: \"../img\";\n@themes: \"../../src/themes\";\n@mySelector: banner;\n@property: color;\n@fnord:  \"I am fnord.\";\n@var:    \"fnord\";\n//变量名\ncontent: @@var; // I am fnord\n// URL\nbody {\n  color: #444;\n  background: url(\"@{images}/white-sand.png\");\n}\n// import\n@import \"@{themes}/tidal-wave.less\";\n// 选择器\n.@{mySelector} {\n  font-weight: bold;\n  line-height: 40px;\n  margin: 0 auto;\n}\n// 属性\n.widget {\n  @{property}: #0ee;\n  background-@{property}: #999;\n}\n```\n\n- 变量可以用于变量名、选择器、URL、impor导入\n- 块级作用域链，子作用域链没有回继续向负作用域查找\n- 变量的声明可以放在最后（延迟加载原因）不会影响变量的使用\n\n# overflow\n控制的是 `border` 以内的内容；比如 `overflow: hidden;`  `border` 以外的内容才会被隐藏（即 `padding`,`content` 的部分不会被隐藏， `margin` 部分会被隐藏\n\n\n# position\n\n当 `position` 值为 `absolute` 时，如果不设置 `top left` 等值，绝对定位的元素 在 `content` 的左上角边界排放\n\n```html\n<div class=\"formargin\">\n  <span class=\"oh\">一个额外的内容哦哦哦哦哦</span>\n  <div class=\"content\">\n  这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章\n  </div>\n</div>\n```\n```css\n.formargin{\n  position: relative;\n  margin: 200px;\n  background: palevioletred;\n}\n.formargin .oh{\n  position: absolute;\n  background: red;\n}\n```\n- 没有设置top等值\n![没有设置top等位置值](/teresa/images/position0.png)\n- top=0;left=0;\n![top=0;left=0](/teresa/images/position_topLeft.png)\n\n# 如何把元素从页面消失\n\n- removeChild 把元素从文档删除\n- display: none\n- 将元素移动至容器以外 容器：overflow: hidden;\n- visibility: hidden; 只是不可见，仍然占据空间\n- width,height等设置为0\n- transform: scale(0) 缩小到消失","source":"_posts/CSS细节简记.md","raw":"---\ntitle: CSS细节简记\ndate: 2018-10-15 16:43:23\ntags: CSS\ndescription: 记录各类属性等细节，以备随时查询\nkeywords: CSS\ncategories: CSS\n---\n# LESS 文档\n> http://www.css88.com/doc/less/features/\n\n```less\n// Variables\n@images: \"../img\";\n@themes: \"../../src/themes\";\n@mySelector: banner;\n@property: color;\n@fnord:  \"I am fnord.\";\n@var:    \"fnord\";\n//变量名\ncontent: @@var; // I am fnord\n// URL\nbody {\n  color: #444;\n  background: url(\"@{images}/white-sand.png\");\n}\n// import\n@import \"@{themes}/tidal-wave.less\";\n// 选择器\n.@{mySelector} {\n  font-weight: bold;\n  line-height: 40px;\n  margin: 0 auto;\n}\n// 属性\n.widget {\n  @{property}: #0ee;\n  background-@{property}: #999;\n}\n```\n\n- 变量可以用于变量名、选择器、URL、impor导入\n- 块级作用域链，子作用域链没有回继续向负作用域查找\n- 变量的声明可以放在最后（延迟加载原因）不会影响变量的使用\n\n# overflow\n控制的是 `border` 以内的内容；比如 `overflow: hidden;`  `border` 以外的内容才会被隐藏（即 `padding`,`content` 的部分不会被隐藏， `margin` 部分会被隐藏\n\n\n# position\n\n当 `position` 值为 `absolute` 时，如果不设置 `top left` 等值，绝对定位的元素 在 `content` 的左上角边界排放\n\n```html\n<div class=\"formargin\">\n  <span class=\"oh\">一个额外的内容哦哦哦哦哦</span>\n  <div class=\"content\">\n  这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章\n  </div>\n</div>\n```\n```css\n.formargin{\n  position: relative;\n  margin: 200px;\n  background: palevioletred;\n}\n.formargin .oh{\n  position: absolute;\n  background: red;\n}\n```\n- 没有设置top等值\n![没有设置top等位置值](/teresa/images/position0.png)\n- top=0;left=0;\n![top=0;left=0](/teresa/images/position_topLeft.png)\n\n# 如何把元素从页面消失\n\n- removeChild 把元素从文档删除\n- display: none\n- 将元素移动至容器以外 容器：overflow: hidden;\n- visibility: hidden; 只是不可见，仍然占据空间\n- width,height等设置为0\n- transform: scale(0) 缩小到消失","slug":"CSS细节简记","published":1,"updated":"2018-11-08T05:38:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7kpl01t0002jcs6lpeu2lcu","content":"<h1 id=\"LESS-文档\"><a href=\"#LESS-文档\" class=\"headerlink\" title=\"LESS 文档\"></a>LESS 文档</h1><blockquote>\n<p><a href=\"http://www.css88.com/doc/less/features/\" target=\"_blank\" rel=\"noopener\">http://www.css88.com/doc/less/features/</a></p>\n</blockquote>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Variables</span></span><br><span class=\"line\"><span class=\"variable\">@images:</span> <span class=\"string\">\"../img\"</span>;</span><br><span class=\"line\"><span class=\"variable\">@themes:</span> <span class=\"string\">\"../../src/themes\"</span>;</span><br><span class=\"line\"><span class=\"variable\">@mySelector:</span> banner;</span><br><span class=\"line\"><span class=\"variable\">@property:</span> color;</span><br><span class=\"line\"><span class=\"variable\">@fnord:</span>  <span class=\"string\">\"I am fnord.\"</span>;</span><br><span class=\"line\"><span class=\"variable\">@var:</span>    <span class=\"string\">\"fnord\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//变量名</span></span><br><span class=\"line\"><span class=\"attribute\">content</span>: <span class=\"variable\">@@var</span>; <span class=\"comment\">// I am fnord</span></span><br><span class=\"line\"><span class=\"comment\">// URL</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#444</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: url(<span class=\"string\">\"@&#123;images&#125;/white-sand.png\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// import</span></span><br><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">\"@&#123;themes&#125;/tidal-wave.less\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 选择器</span></span><br><span class=\"line\"><span class=\"selector-class\">.@&#123;mySelector&#125;</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 属性</span></span><br><span class=\"line\"><span class=\"selector-class\">.widget</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">@&#123;property&#125;</span>: <span class=\"number\">#0ee</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">background-</span><span class=\"variable\">@&#123;property&#125;</span>: <span class=\"selector-id\">#999</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>变量可以用于变量名、选择器、URL、impor导入</li>\n<li>块级作用域链，子作用域链没有回继续向负作用域查找</li>\n<li>变量的声明可以放在最后（延迟加载原因）不会影响变量的使用</li>\n</ul>\n<h1 id=\"overflow\"><a href=\"#overflow\" class=\"headerlink\" title=\"overflow\"></a>overflow</h1><p>控制的是 <code>border</code> 以内的内容；比如 <code>overflow: hidden;</code>  <code>border</code> 以外的内容才会被隐藏（即 <code>padding</code>,<code>content</code> 的部分不会被隐藏， <code>margin</code> 部分会被隐藏</p>\n<h1 id=\"position\"><a href=\"#position\" class=\"headerlink\" title=\"position\"></a>position</h1><p>当 <code>position</code> 值为 <code>absolute</code> 时，如果不设置 <code>top left</code> 等值，绝对定位的元素 在 <code>content</code> 的左上角边界排放</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"formargin\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"oh\"</span>&gt;</span>一个额外的内容哦哦哦哦哦<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">  这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.formargin</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: palevioletred;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.formargin</span> <span class=\"selector-class\">.oh</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>没有设置top等值<br><img src=\"/teresa/images/position0.png\" alt=\"没有设置top等位置值\"></li>\n<li>top=0;left=0;<br><img src=\"/teresa/images/position_topLeft.png\" alt=\"top=0;left=0\"></li>\n</ul>\n<h1 id=\"如何把元素从页面消失\"><a href=\"#如何把元素从页面消失\" class=\"headerlink\" title=\"如何把元素从页面消失\"></a>如何把元素从页面消失</h1><ul>\n<li>removeChild 把元素从文档删除</li>\n<li>display: none</li>\n<li>将元素移动至容器以外 容器：overflow: hidden;</li>\n<li>visibility: hidden; 只是不可见，仍然占据空间</li>\n<li>width,height等设置为0</li>\n<li>transform: scale(0) 缩小到消失</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"LESS-文档\"><a href=\"#LESS-文档\" class=\"headerlink\" title=\"LESS 文档\"></a>LESS 文档</h1><blockquote>\n<p><a href=\"http://www.css88.com/doc/less/features/\" target=\"_blank\" rel=\"noopener\">http://www.css88.com/doc/less/features/</a></p>\n</blockquote>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Variables</span></span><br><span class=\"line\"><span class=\"variable\">@images:</span> <span class=\"string\">\"../img\"</span>;</span><br><span class=\"line\"><span class=\"variable\">@themes:</span> <span class=\"string\">\"../../src/themes\"</span>;</span><br><span class=\"line\"><span class=\"variable\">@mySelector:</span> banner;</span><br><span class=\"line\"><span class=\"variable\">@property:</span> color;</span><br><span class=\"line\"><span class=\"variable\">@fnord:</span>  <span class=\"string\">\"I am fnord.\"</span>;</span><br><span class=\"line\"><span class=\"variable\">@var:</span>    <span class=\"string\">\"fnord\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//变量名</span></span><br><span class=\"line\"><span class=\"attribute\">content</span>: <span class=\"variable\">@@var</span>; <span class=\"comment\">// I am fnord</span></span><br><span class=\"line\"><span class=\"comment\">// URL</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#444</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: url(<span class=\"string\">\"@&#123;images&#125;/white-sand.png\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// import</span></span><br><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">\"@&#123;themes&#125;/tidal-wave.less\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 选择器</span></span><br><span class=\"line\"><span class=\"selector-class\">.@&#123;mySelector&#125;</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 属性</span></span><br><span class=\"line\"><span class=\"selector-class\">.widget</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">@&#123;property&#125;</span>: <span class=\"number\">#0ee</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">background-</span><span class=\"variable\">@&#123;property&#125;</span>: <span class=\"selector-id\">#999</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>变量可以用于变量名、选择器、URL、impor导入</li>\n<li>块级作用域链，子作用域链没有回继续向负作用域查找</li>\n<li>变量的声明可以放在最后（延迟加载原因）不会影响变量的使用</li>\n</ul>\n<h1 id=\"overflow\"><a href=\"#overflow\" class=\"headerlink\" title=\"overflow\"></a>overflow</h1><p>控制的是 <code>border</code> 以内的内容；比如 <code>overflow: hidden;</code>  <code>border</code> 以外的内容才会被隐藏（即 <code>padding</code>,<code>content</code> 的部分不会被隐藏， <code>margin</code> 部分会被隐藏</p>\n<h1 id=\"position\"><a href=\"#position\" class=\"headerlink\" title=\"position\"></a>position</h1><p>当 <code>position</code> 值为 <code>absolute</code> 时，如果不设置 <code>top left</code> 等值，绝对定位的元素 在 <code>content</code> 的左上角边界排放</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"formargin\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"oh\"</span>&gt;</span>一个额外的内容哦哦哦哦哦<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">  这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章这一一个很长的文章</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.formargin</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: palevioletred;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.formargin</span> <span class=\"selector-class\">.oh</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>没有设置top等值<br><img src=\"/teresa/images/position0.png\" alt=\"没有设置top等位置值\"></li>\n<li>top=0;left=0;<br><img src=\"/teresa/images/position_topLeft.png\" alt=\"top=0;left=0\"></li>\n</ul>\n<h1 id=\"如何把元素从页面消失\"><a href=\"#如何把元素从页面消失\" class=\"headerlink\" title=\"如何把元素从页面消失\"></a>如何把元素从页面消失</h1><ul>\n<li>removeChild 把元素从文档删除</li>\n<li>display: none</li>\n<li>将元素移动至容器以外 容器：overflow: hidden;</li>\n<li>visibility: hidden; 只是不可见，仍然占据空间</li>\n<li>width,height等设置为0</li>\n<li>transform: scale(0) 缩小到消失</li>\n</ul>\n"},{"title":"常用DOM操作方法及属性","date":"2018-09-04T15:10:37.000Z","description":"一些DOM的操作方法及属性","keywords":"一些DOM的操作方法及属性","_content":"# 汇总js操作DOM的常用方法及属性\n> 获取元素节点的方法，返回包含元素节点的 `对象` 或者 `对象数组`\n>\n> 没有标注说明，则方法可以用于 `document\b` 和 元素\n# 常用方法\n## `getElementById`\n```js\n// 获取id为myId的元素\ndocument.getElementById('myId');\n```\n只可以用于 `document\b`，而不可用于其他元素后\n\n## `getElementsByTagName`\n```js\n// 获取所有的div元素\nelement.getElementsByTagName('div');\n```\n## `getElementsByClassName`\n```js\n// 获取所有class值为myClass的元素\nelement.getElementsByClassName('myClass');\n```\n## `querySelector`\n```js\n// 接受与css选择器同样规则的字符串参数 如下：返回 id 为 myid 元素下的第一个类为 myclass 的元素对象\ndocument.querySelector('#myid .myclass')\n```\n## `querySelectorAll`\n```js\n// 接受与css选择器同样规则的字符串参数 如下：返回 id 为 myid 元素下的所有类为 myclass 的数组对象\ndocument.querySelectorAll('#myid .myclass')\n```\n## `getAttribute` 只能通过元素节点调用\n```js\n// 获取 element 元素的title 属性值\nelement.getAttribute('title');\n```\n## `setAttribute` 只能通过元素节点调用\n```js\n// 设置 element 元素的title 属性值\nelement.setAttribute('title', 'myTitle');\n```\n\n> 读取和设置元素的属性其实也可以直接通过元素节点对象来实现\n\n```js\nconst ele = document.querySelector('#myid');\nconsole.log(ele.title);\nele.className = 'myClass';\n```\n\n## 插入节点 `appendChild`、`insertBefore`、`insertAfter`\n> 如果需要添加的元素已经存在于文档中，则上述方法会将元素先从文档树中删除再添加回指定的地方，相当于做了移动功能\n> \n> 如果被添加的元素包含子元素，则一并将子元素添加\n\n```js\n// 给body元素的最后添加一个p元素\np = document.createElement('p');\ndocument.appendChild(p);\n// 将p元素添加到 myId元素的前面\nconst myId = document.getElementById('myId');\nmyId.parentNode.insertBefore(p,myId);\n```\n## 创建元素节点 `createElement()`\n```js\nconst p = document.createElement('p');\ndocument.body.appendChild(p);\n```\n只可以用于 `document\b`，而不可用于其他元素后\n\n## 创建文本节点 `createTextNode()`\n```js\nconst text = document.createTextNode('hello world');\nconst p = document.createElement('p');\np.appendChild(text);\ndocument.body.appendChild(p);\n```\n只可以用于 `document\b`，而不可用于其他元素后\n\n## 复制节点 `node.cloneNode(isDeep)`\n> 接受一个布尔值表示是否深克隆，即是否赋值当前节点的所有子节点；若false则只克隆当前的元素节点（其内的文本节点等都不会被克隆），否则会将子节点连同当前元素节点一同克隆\n> 克隆出的节点不被自动添加到文档里去，因为没有nodeParent属性\n\n```js\n// 深度克隆p元素节点\np.cloneNode(true);\ndocument.body.appendChild(p);\n```\n\n## 删除节点 `removeChild()`\n```js\n// 移出myId元素 如果被删除的节点包含子节点，则子节点将一并被删除\nconst myId = document.getElementById('myId');\nmyId.parentNode.removeChild(myId);\n```\n\n## 替换节点 `replaceChild()`\n```js\n// 用新增p元素替换 myId元素\n// 如果被插入的节点，是文档树上有的节点，则会把该节点删除后再去体会旧节点\n// 如果被插入节点，含有子节点，则子节点也一同被添加至指定位置\nconst myId = document.getElementById('myId');\nconst p = document.createElement('p');\nmyId.parentNode.replaceChild(p,myId);\n```\n## 是否含有子节点 `hasChildNodes`\n```js\n// 返回布尔值\nconst myId = document.getElementById('myId');\nconst isChild = myId.hasChildNodes;\n```\n# 常用元素节点对象的属性\n> 除了 `nodeValue` 其它都是只读属性;\n> `nodeValue`只能重设原值为非 `null` 的\b属性值\n\n## `nodeType`（返回数字）\n- 1：元素节点\n- 2：属性节点\n- 3：文本节点\n\n## `nodeValue`\n```js\n// 元素节点 => 返回null\n// 属性节点 => 返回属性值\n// 文本节点 => 返回文本节点内容\n```\n\n## `children` 和 `childNodes`\n- `childen` 返回元素的所有子元素节点（HTMLList）\n-  `childNodes` 返回元素的所有子节点（NodesList）\n\n## `firstChild` 和 `firstElementChild`\n- `firstChild` 返回第一个子节点\n- `firstElementChild` 返回第一个子元素节点\n\n## `lastChild` 和 `lastElementChild`\n- `lastChild` 返回最后一个子节点\n- `lastElementChild` 返回最后一个子元素节点\n\n## `nextSibling` & `nextElementSibling`\n```js\n// 返回当前节点的下一个兄弟节点\nconst newnode = node.nextSibling;\n// 返回当前节点的下一个兄弟元素节点\nconst newElement = node.nextElementSibling;\n```\n## `previousSibling` & `previousElementSibling`\n```js\n// 返回当前节点的上一个兄弟节点\nconst newnode = node.previousSibling;\n// 返回当前节点的上一个兄弟元素节点\nconst newElement = node.previousElementSibling;\n```\n\n## `parentNode`\n```js\n// 返回指定节点的父节点（肯定是个元素节点）\n// document例外没有父节点，所以他的 父节点属性返回null\nconst parentNode = node.parentNode;\n```","source":"_posts/DOM方法.md","raw":"---\ntitle: 常用DOM操作方法及属性\ndate: 2018-09-04 23:10:37\ntags: JavaScript\ndescription: 一些DOM的操作方法及属性\ncategories: JavaScript\nkeywords: 一些DOM的操作方法及属性\n---\n# 汇总js操作DOM的常用方法及属性\n> 获取元素节点的方法，返回包含元素节点的 `对象` 或者 `对象数组`\n>\n> 没有标注说明，则方法可以用于 `document\b` 和 元素\n# 常用方法\n## `getElementById`\n```js\n// 获取id为myId的元素\ndocument.getElementById('myId');\n```\n只可以用于 `document\b`，而不可用于其他元素后\n\n## `getElementsByTagName`\n```js\n// 获取所有的div元素\nelement.getElementsByTagName('div');\n```\n## `getElementsByClassName`\n```js\n// 获取所有class值为myClass的元素\nelement.getElementsByClassName('myClass');\n```\n## `querySelector`\n```js\n// 接受与css选择器同样规则的字符串参数 如下：返回 id 为 myid 元素下的第一个类为 myclass 的元素对象\ndocument.querySelector('#myid .myclass')\n```\n## `querySelectorAll`\n```js\n// 接受与css选择器同样规则的字符串参数 如下：返回 id 为 myid 元素下的所有类为 myclass 的数组对象\ndocument.querySelectorAll('#myid .myclass')\n```\n## `getAttribute` 只能通过元素节点调用\n```js\n// 获取 element 元素的title 属性值\nelement.getAttribute('title');\n```\n## `setAttribute` 只能通过元素节点调用\n```js\n// 设置 element 元素的title 属性值\nelement.setAttribute('title', 'myTitle');\n```\n\n> 读取和设置元素的属性其实也可以直接通过元素节点对象来实现\n\n```js\nconst ele = document.querySelector('#myid');\nconsole.log(ele.title);\nele.className = 'myClass';\n```\n\n## 插入节点 `appendChild`、`insertBefore`、`insertAfter`\n> 如果需要添加的元素已经存在于文档中，则上述方法会将元素先从文档树中删除再添加回指定的地方，相当于做了移动功能\n> \n> 如果被添加的元素包含子元素，则一并将子元素添加\n\n```js\n// 给body元素的最后添加一个p元素\np = document.createElement('p');\ndocument.appendChild(p);\n// 将p元素添加到 myId元素的前面\nconst myId = document.getElementById('myId');\nmyId.parentNode.insertBefore(p,myId);\n```\n## 创建元素节点 `createElement()`\n```js\nconst p = document.createElement('p');\ndocument.body.appendChild(p);\n```\n只可以用于 `document\b`，而不可用于其他元素后\n\n## 创建文本节点 `createTextNode()`\n```js\nconst text = document.createTextNode('hello world');\nconst p = document.createElement('p');\np.appendChild(text);\ndocument.body.appendChild(p);\n```\n只可以用于 `document\b`，而不可用于其他元素后\n\n## 复制节点 `node.cloneNode(isDeep)`\n> 接受一个布尔值表示是否深克隆，即是否赋值当前节点的所有子节点；若false则只克隆当前的元素节点（其内的文本节点等都不会被克隆），否则会将子节点连同当前元素节点一同克隆\n> 克隆出的节点不被自动添加到文档里去，因为没有nodeParent属性\n\n```js\n// 深度克隆p元素节点\np.cloneNode(true);\ndocument.body.appendChild(p);\n```\n\n## 删除节点 `removeChild()`\n```js\n// 移出myId元素 如果被删除的节点包含子节点，则子节点将一并被删除\nconst myId = document.getElementById('myId');\nmyId.parentNode.removeChild(myId);\n```\n\n## 替换节点 `replaceChild()`\n```js\n// 用新增p元素替换 myId元素\n// 如果被插入的节点，是文档树上有的节点，则会把该节点删除后再去体会旧节点\n// 如果被插入节点，含有子节点，则子节点也一同被添加至指定位置\nconst myId = document.getElementById('myId');\nconst p = document.createElement('p');\nmyId.parentNode.replaceChild(p,myId);\n```\n## 是否含有子节点 `hasChildNodes`\n```js\n// 返回布尔值\nconst myId = document.getElementById('myId');\nconst isChild = myId.hasChildNodes;\n```\n# 常用元素节点对象的属性\n> 除了 `nodeValue` 其它都是只读属性;\n> `nodeValue`只能重设原值为非 `null` 的\b属性值\n\n## `nodeType`（返回数字）\n- 1：元素节点\n- 2：属性节点\n- 3：文本节点\n\n## `nodeValue`\n```js\n// 元素节点 => 返回null\n// 属性节点 => 返回属性值\n// 文本节点 => 返回文本节点内容\n```\n\n## `children` 和 `childNodes`\n- `childen` 返回元素的所有子元素节点（HTMLList）\n-  `childNodes` 返回元素的所有子节点（NodesList）\n\n## `firstChild` 和 `firstElementChild`\n- `firstChild` 返回第一个子节点\n- `firstElementChild` 返回第一个子元素节点\n\n## `lastChild` 和 `lastElementChild`\n- `lastChild` 返回最后一个子节点\n- `lastElementChild` 返回最后一个子元素节点\n\n## `nextSibling` & `nextElementSibling`\n```js\n// 返回当前节点的下一个兄弟节点\nconst newnode = node.nextSibling;\n// 返回当前节点的下一个兄弟元素节点\nconst newElement = node.nextElementSibling;\n```\n## `previousSibling` & `previousElementSibling`\n```js\n// 返回当前节点的上一个兄弟节点\nconst newnode = node.previousSibling;\n// 返回当前节点的上一个兄弟元素节点\nconst newElement = node.previousElementSibling;\n```\n\n## `parentNode`\n```js\n// 返回指定节点的父节点（肯定是个元素节点）\n// document例外没有父节点，所以他的 父节点属性返回null\nconst parentNode = node.parentNode;\n```","slug":"DOM方法","published":1,"updated":"2018-09-27T08:20:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7kpl01y0006jcs6qbhwjhxa","content":"<h1 id=\"汇总js操作DOM的常用方法及属性\"><a href=\"#汇总js操作DOM的常用方法及属性\" class=\"headerlink\" title=\"汇总js操作DOM的常用方法及属性\"></a>汇总js操作DOM的常用方法及属性</h1><blockquote>\n<p>获取元素节点的方法，返回包含元素节点的 <code>对象</code> 或者 <code>对象数组</code></p>\n<p>没有标注说明，则方法可以用于 <code>document\b</code> 和 元素</p>\n</blockquote>\n<h1 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h1><h2 id=\"getElementById\"><a href=\"#getElementById\" class=\"headerlink\" title=\"getElementById\"></a><code>getElementById</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取id为myId的元素</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myId'</span>);</span><br></pre></td></tr></table></figure>\n<p>只可以用于 <code>document\b</code>，而不可用于其他元素后</p>\n<h2 id=\"getElementsByTagName\"><a href=\"#getElementsByTagName\" class=\"headerlink\" title=\"getElementsByTagName\"></a><code>getElementsByTagName</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取所有的div元素</span></span><br><span class=\"line\">element.getElementsByTagName(<span class=\"string\">'div'</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"getElementsByClassName\"><a href=\"#getElementsByClassName\" class=\"headerlink\" title=\"getElementsByClassName\"></a><code>getElementsByClassName</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取所有class值为myClass的元素</span></span><br><span class=\"line\">element.getElementsByClassName(<span class=\"string\">'myClass'</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"querySelector\"><a href=\"#querySelector\" class=\"headerlink\" title=\"querySelector\"></a><code>querySelector</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接受与css选择器同样规则的字符串参数 如下：返回 id 为 myid 元素下的第一个类为 myclass 的元素对象</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#myid .myclass'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"querySelectorAll\"><a href=\"#querySelectorAll\" class=\"headerlink\" title=\"querySelectorAll\"></a><code>querySelectorAll</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接受与css选择器同样规则的字符串参数 如下：返回 id 为 myid 元素下的所有类为 myclass 的数组对象</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'#myid .myclass'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"getAttribute-只能通过元素节点调用\"><a href=\"#getAttribute-只能通过元素节点调用\" class=\"headerlink\" title=\"getAttribute 只能通过元素节点调用\"></a><code>getAttribute</code> 只能通过元素节点调用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取 element 元素的title 属性值</span></span><br><span class=\"line\">element.getAttribute(<span class=\"string\">'title'</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"setAttribute-只能通过元素节点调用\"><a href=\"#setAttribute-只能通过元素节点调用\" class=\"headerlink\" title=\"setAttribute 只能通过元素节点调用\"></a><code>setAttribute</code> 只能通过元素节点调用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置 element 元素的title 属性值</span></span><br><span class=\"line\">element.setAttribute(<span class=\"string\">'title'</span>, <span class=\"string\">'myTitle'</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>读取和设置元素的属性其实也可以直接通过元素节点对象来实现</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ele = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#myid'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ele.title);</span><br><span class=\"line\">ele.className = <span class=\"string\">'myClass'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"插入节点-appendChild、insertBefore、insertAfter\"><a href=\"#插入节点-appendChild、insertBefore、insertAfter\" class=\"headerlink\" title=\"插入节点 appendChild、insertBefore、insertAfter\"></a>插入节点 <code>appendChild</code>、<code>insertBefore</code>、<code>insertAfter</code></h2><blockquote>\n<p>如果需要添加的元素已经存在于文档中，则上述方法会将元素先从文档树中删除再添加回指定的地方，相当于做了移动功能</p>\n<p>如果被添加的元素包含子元素，则一并将子元素添加</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给body元素的最后添加一个p元素</span></span><br><span class=\"line\">p = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'p'</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.appendChild(p);</span><br><span class=\"line\"><span class=\"comment\">// 将p元素添加到 myId元素的前面</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myId = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myId'</span>);</span><br><span class=\"line\">myId.parentNode.insertBefore(p,myId);</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建元素节点-createElement\"><a href=\"#创建元素节点-createElement\" class=\"headerlink\" title=\"创建元素节点 createElement()\"></a>创建元素节点 <code>createElement()</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'p'</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(p);</span><br></pre></td></tr></table></figure>\n<p>只可以用于 <code>document\b</code>，而不可用于其他元素后</p>\n<h2 id=\"创建文本节点-createTextNode\"><a href=\"#创建文本节点-createTextNode\" class=\"headerlink\" title=\"创建文本节点 createTextNode()\"></a>创建文本节点 <code>createTextNode()</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> text = <span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'p'</span>);</span><br><span class=\"line\">p.appendChild(text);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(p);</span><br></pre></td></tr></table></figure>\n<p>只可以用于 <code>document\b</code>，而不可用于其他元素后</p>\n<h2 id=\"复制节点-node-cloneNode-isDeep\"><a href=\"#复制节点-node-cloneNode-isDeep\" class=\"headerlink\" title=\"复制节点 node.cloneNode(isDeep)\"></a>复制节点 <code>node.cloneNode(isDeep)</code></h2><blockquote>\n<p>接受一个布尔值表示是否深克隆，即是否赋值当前节点的所有子节点；若false则只克隆当前的元素节点（其内的文本节点等都不会被克隆），否则会将子节点连同当前元素节点一同克隆<br>克隆出的节点不被自动添加到文档里去，因为没有nodeParent属性</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 深度克隆p元素节点</span></span><br><span class=\"line\">p.cloneNode(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(p);</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除节点-removeChild\"><a href=\"#删除节点-removeChild\" class=\"headerlink\" title=\"删除节点 removeChild()\"></a>删除节点 <code>removeChild()</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 移出myId元素 如果被删除的节点包含子节点，则子节点将一并被删除</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myId = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myId'</span>);</span><br><span class=\"line\">myId.parentNode.removeChild(myId);</span><br></pre></td></tr></table></figure>\n<h2 id=\"替换节点-replaceChild\"><a href=\"#替换节点-replaceChild\" class=\"headerlink\" title=\"替换节点 replaceChild()\"></a>替换节点 <code>replaceChild()</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用新增p元素替换 myId元素</span></span><br><span class=\"line\"><span class=\"comment\">// 如果被插入的节点，是文档树上有的节点，则会把该节点删除后再去体会旧节点</span></span><br><span class=\"line\"><span class=\"comment\">// 如果被插入节点，含有子节点，则子节点也一同被添加至指定位置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myId = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myId'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'p'</span>);</span><br><span class=\"line\">myId.parentNode.replaceChild(p,myId);</span><br></pre></td></tr></table></figure>\n<h2 id=\"是否含有子节点-hasChildNodes\"><a href=\"#是否含有子节点-hasChildNodes\" class=\"headerlink\" title=\"是否含有子节点 hasChildNodes\"></a>是否含有子节点 <code>hasChildNodes</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回布尔值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myId = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myId'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> isChild = myId.hasChildNodes;</span><br></pre></td></tr></table></figure>\n<h1 id=\"常用元素节点对象的属性\"><a href=\"#常用元素节点对象的属性\" class=\"headerlink\" title=\"常用元素节点对象的属性\"></a>常用元素节点对象的属性</h1><blockquote>\n<p>除了 <code>nodeValue</code> 其它都是只读属性;<br><code>nodeValue</code>只能重设原值为非 <code>null</code> 的\b属性值</p>\n</blockquote>\n<h2 id=\"nodeType（返回数字）\"><a href=\"#nodeType（返回数字）\" class=\"headerlink\" title=\"nodeType（返回数字）\"></a><code>nodeType</code>（返回数字）</h2><ul>\n<li>1：元素节点</li>\n<li>2：属性节点</li>\n<li>3：文本节点</li>\n</ul>\n<h2 id=\"nodeValue\"><a href=\"#nodeValue\" class=\"headerlink\" title=\"nodeValue\"></a><code>nodeValue</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 元素节点 =&gt; 返回null</span></span><br><span class=\"line\"><span class=\"comment\">// 属性节点 =&gt; 返回属性值</span></span><br><span class=\"line\"><span class=\"comment\">// 文本节点 =&gt; 返回文本节点内容</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"children-和-childNodes\"><a href=\"#children-和-childNodes\" class=\"headerlink\" title=\"children 和 childNodes\"></a><code>children</code> 和 <code>childNodes</code></h2><ul>\n<li><code>childen</code> 返回元素的所有子元素节点（HTMLList）</li>\n<li><code>childNodes</code> 返回元素的所有子节点（NodesList）</li>\n</ul>\n<h2 id=\"firstChild-和-firstElementChild\"><a href=\"#firstChild-和-firstElementChild\" class=\"headerlink\" title=\"firstChild 和 firstElementChild\"></a><code>firstChild</code> 和 <code>firstElementChild</code></h2><ul>\n<li><code>firstChild</code> 返回第一个子节点</li>\n<li><code>firstElementChild</code> 返回第一个子元素节点</li>\n</ul>\n<h2 id=\"lastChild-和-lastElementChild\"><a href=\"#lastChild-和-lastElementChild\" class=\"headerlink\" title=\"lastChild 和 lastElementChild\"></a><code>lastChild</code> 和 <code>lastElementChild</code></h2><ul>\n<li><code>lastChild</code> 返回最后一个子节点</li>\n<li><code>lastElementChild</code> 返回最后一个子元素节点</li>\n</ul>\n<h2 id=\"nextSibling-amp-nextElementSibling\"><a href=\"#nextSibling-amp-nextElementSibling\" class=\"headerlink\" title=\"nextSibling &amp; nextElementSibling\"></a><code>nextSibling</code> &amp; <code>nextElementSibling</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回当前节点的下一个兄弟节点</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newnode = node.nextSibling;</span><br><span class=\"line\"><span class=\"comment\">// 返回当前节点的下一个兄弟元素节点</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newElement = node.nextElementSibling;</span><br></pre></td></tr></table></figure>\n<h2 id=\"previousSibling-amp-previousElementSibling\"><a href=\"#previousSibling-amp-previousElementSibling\" class=\"headerlink\" title=\"previousSibling &amp; previousElementSibling\"></a><code>previousSibling</code> &amp; <code>previousElementSibling</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回当前节点的上一个兄弟节点</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newnode = node.previousSibling;</span><br><span class=\"line\"><span class=\"comment\">// 返回当前节点的上一个兄弟元素节点</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newElement = node.previousElementSibling;</span><br></pre></td></tr></table></figure>\n<h2 id=\"parentNode\"><a href=\"#parentNode\" class=\"headerlink\" title=\"parentNode\"></a><code>parentNode</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回指定节点的父节点（肯定是个元素节点）</span></span><br><span class=\"line\"><span class=\"comment\">// document例外没有父节点，所以他的 父节点属性返回null</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> parentNode = node.parentNode;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"汇总js操作DOM的常用方法及属性\"><a href=\"#汇总js操作DOM的常用方法及属性\" class=\"headerlink\" title=\"汇总js操作DOM的常用方法及属性\"></a>汇总js操作DOM的常用方法及属性</h1><blockquote>\n<p>获取元素节点的方法，返回包含元素节点的 <code>对象</code> 或者 <code>对象数组</code></p>\n<p>没有标注说明，则方法可以用于 <code>document\b</code> 和 元素</p>\n</blockquote>\n<h1 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h1><h2 id=\"getElementById\"><a href=\"#getElementById\" class=\"headerlink\" title=\"getElementById\"></a><code>getElementById</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取id为myId的元素</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myId'</span>);</span><br></pre></td></tr></table></figure>\n<p>只可以用于 <code>document\b</code>，而不可用于其他元素后</p>\n<h2 id=\"getElementsByTagName\"><a href=\"#getElementsByTagName\" class=\"headerlink\" title=\"getElementsByTagName\"></a><code>getElementsByTagName</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取所有的div元素</span></span><br><span class=\"line\">element.getElementsByTagName(<span class=\"string\">'div'</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"getElementsByClassName\"><a href=\"#getElementsByClassName\" class=\"headerlink\" title=\"getElementsByClassName\"></a><code>getElementsByClassName</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取所有class值为myClass的元素</span></span><br><span class=\"line\">element.getElementsByClassName(<span class=\"string\">'myClass'</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"querySelector\"><a href=\"#querySelector\" class=\"headerlink\" title=\"querySelector\"></a><code>querySelector</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接受与css选择器同样规则的字符串参数 如下：返回 id 为 myid 元素下的第一个类为 myclass 的元素对象</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#myid .myclass'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"querySelectorAll\"><a href=\"#querySelectorAll\" class=\"headerlink\" title=\"querySelectorAll\"></a><code>querySelectorAll</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接受与css选择器同样规则的字符串参数 如下：返回 id 为 myid 元素下的所有类为 myclass 的数组对象</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'#myid .myclass'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"getAttribute-只能通过元素节点调用\"><a href=\"#getAttribute-只能通过元素节点调用\" class=\"headerlink\" title=\"getAttribute 只能通过元素节点调用\"></a><code>getAttribute</code> 只能通过元素节点调用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取 element 元素的title 属性值</span></span><br><span class=\"line\">element.getAttribute(<span class=\"string\">'title'</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"setAttribute-只能通过元素节点调用\"><a href=\"#setAttribute-只能通过元素节点调用\" class=\"headerlink\" title=\"setAttribute 只能通过元素节点调用\"></a><code>setAttribute</code> 只能通过元素节点调用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置 element 元素的title 属性值</span></span><br><span class=\"line\">element.setAttribute(<span class=\"string\">'title'</span>, <span class=\"string\">'myTitle'</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>读取和设置元素的属性其实也可以直接通过元素节点对象来实现</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ele = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#myid'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ele.title);</span><br><span class=\"line\">ele.className = <span class=\"string\">'myClass'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"插入节点-appendChild、insertBefore、insertAfter\"><a href=\"#插入节点-appendChild、insertBefore、insertAfter\" class=\"headerlink\" title=\"插入节点 appendChild、insertBefore、insertAfter\"></a>插入节点 <code>appendChild</code>、<code>insertBefore</code>、<code>insertAfter</code></h2><blockquote>\n<p>如果需要添加的元素已经存在于文档中，则上述方法会将元素先从文档树中删除再添加回指定的地方，相当于做了移动功能</p>\n<p>如果被添加的元素包含子元素，则一并将子元素添加</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给body元素的最后添加一个p元素</span></span><br><span class=\"line\">p = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'p'</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.appendChild(p);</span><br><span class=\"line\"><span class=\"comment\">// 将p元素添加到 myId元素的前面</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myId = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myId'</span>);</span><br><span class=\"line\">myId.parentNode.insertBefore(p,myId);</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建元素节点-createElement\"><a href=\"#创建元素节点-createElement\" class=\"headerlink\" title=\"创建元素节点 createElement()\"></a>创建元素节点 <code>createElement()</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'p'</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(p);</span><br></pre></td></tr></table></figure>\n<p>只可以用于 <code>document\b</code>，而不可用于其他元素后</p>\n<h2 id=\"创建文本节点-createTextNode\"><a href=\"#创建文本节点-createTextNode\" class=\"headerlink\" title=\"创建文本节点 createTextNode()\"></a>创建文本节点 <code>createTextNode()</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> text = <span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'p'</span>);</span><br><span class=\"line\">p.appendChild(text);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(p);</span><br></pre></td></tr></table></figure>\n<p>只可以用于 <code>document\b</code>，而不可用于其他元素后</p>\n<h2 id=\"复制节点-node-cloneNode-isDeep\"><a href=\"#复制节点-node-cloneNode-isDeep\" class=\"headerlink\" title=\"复制节点 node.cloneNode(isDeep)\"></a>复制节点 <code>node.cloneNode(isDeep)</code></h2><blockquote>\n<p>接受一个布尔值表示是否深克隆，即是否赋值当前节点的所有子节点；若false则只克隆当前的元素节点（其内的文本节点等都不会被克隆），否则会将子节点连同当前元素节点一同克隆<br>克隆出的节点不被自动添加到文档里去，因为没有nodeParent属性</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 深度克隆p元素节点</span></span><br><span class=\"line\">p.cloneNode(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(p);</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除节点-removeChild\"><a href=\"#删除节点-removeChild\" class=\"headerlink\" title=\"删除节点 removeChild()\"></a>删除节点 <code>removeChild()</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 移出myId元素 如果被删除的节点包含子节点，则子节点将一并被删除</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myId = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myId'</span>);</span><br><span class=\"line\">myId.parentNode.removeChild(myId);</span><br></pre></td></tr></table></figure>\n<h2 id=\"替换节点-replaceChild\"><a href=\"#替换节点-replaceChild\" class=\"headerlink\" title=\"替换节点 replaceChild()\"></a>替换节点 <code>replaceChild()</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用新增p元素替换 myId元素</span></span><br><span class=\"line\"><span class=\"comment\">// 如果被插入的节点，是文档树上有的节点，则会把该节点删除后再去体会旧节点</span></span><br><span class=\"line\"><span class=\"comment\">// 如果被插入节点，含有子节点，则子节点也一同被添加至指定位置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myId = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myId'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'p'</span>);</span><br><span class=\"line\">myId.parentNode.replaceChild(p,myId);</span><br></pre></td></tr></table></figure>\n<h2 id=\"是否含有子节点-hasChildNodes\"><a href=\"#是否含有子节点-hasChildNodes\" class=\"headerlink\" title=\"是否含有子节点 hasChildNodes\"></a>是否含有子节点 <code>hasChildNodes</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回布尔值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myId = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myId'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> isChild = myId.hasChildNodes;</span><br></pre></td></tr></table></figure>\n<h1 id=\"常用元素节点对象的属性\"><a href=\"#常用元素节点对象的属性\" class=\"headerlink\" title=\"常用元素节点对象的属性\"></a>常用元素节点对象的属性</h1><blockquote>\n<p>除了 <code>nodeValue</code> 其它都是只读属性;<br><code>nodeValue</code>只能重设原值为非 <code>null</code> 的\b属性值</p>\n</blockquote>\n<h2 id=\"nodeType（返回数字）\"><a href=\"#nodeType（返回数字）\" class=\"headerlink\" title=\"nodeType（返回数字）\"></a><code>nodeType</code>（返回数字）</h2><ul>\n<li>1：元素节点</li>\n<li>2：属性节点</li>\n<li>3：文本节点</li>\n</ul>\n<h2 id=\"nodeValue\"><a href=\"#nodeValue\" class=\"headerlink\" title=\"nodeValue\"></a><code>nodeValue</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 元素节点 =&gt; 返回null</span></span><br><span class=\"line\"><span class=\"comment\">// 属性节点 =&gt; 返回属性值</span></span><br><span class=\"line\"><span class=\"comment\">// 文本节点 =&gt; 返回文本节点内容</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"children-和-childNodes\"><a href=\"#children-和-childNodes\" class=\"headerlink\" title=\"children 和 childNodes\"></a><code>children</code> 和 <code>childNodes</code></h2><ul>\n<li><code>childen</code> 返回元素的所有子元素节点（HTMLList）</li>\n<li><code>childNodes</code> 返回元素的所有子节点（NodesList）</li>\n</ul>\n<h2 id=\"firstChild-和-firstElementChild\"><a href=\"#firstChild-和-firstElementChild\" class=\"headerlink\" title=\"firstChild 和 firstElementChild\"></a><code>firstChild</code> 和 <code>firstElementChild</code></h2><ul>\n<li><code>firstChild</code> 返回第一个子节点</li>\n<li><code>firstElementChild</code> 返回第一个子元素节点</li>\n</ul>\n<h2 id=\"lastChild-和-lastElementChild\"><a href=\"#lastChild-和-lastElementChild\" class=\"headerlink\" title=\"lastChild 和 lastElementChild\"></a><code>lastChild</code> 和 <code>lastElementChild</code></h2><ul>\n<li><code>lastChild</code> 返回最后一个子节点</li>\n<li><code>lastElementChild</code> 返回最后一个子元素节点</li>\n</ul>\n<h2 id=\"nextSibling-amp-nextElementSibling\"><a href=\"#nextSibling-amp-nextElementSibling\" class=\"headerlink\" title=\"nextSibling &amp; nextElementSibling\"></a><code>nextSibling</code> &amp; <code>nextElementSibling</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回当前节点的下一个兄弟节点</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newnode = node.nextSibling;</span><br><span class=\"line\"><span class=\"comment\">// 返回当前节点的下一个兄弟元素节点</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newElement = node.nextElementSibling;</span><br></pre></td></tr></table></figure>\n<h2 id=\"previousSibling-amp-previousElementSibling\"><a href=\"#previousSibling-amp-previousElementSibling\" class=\"headerlink\" title=\"previousSibling &amp; previousElementSibling\"></a><code>previousSibling</code> &amp; <code>previousElementSibling</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回当前节点的上一个兄弟节点</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newnode = node.previousSibling;</span><br><span class=\"line\"><span class=\"comment\">// 返回当前节点的上一个兄弟元素节点</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newElement = node.previousElementSibling;</span><br></pre></td></tr></table></figure>\n<h2 id=\"parentNode\"><a href=\"#parentNode\" class=\"headerlink\" title=\"parentNode\"></a><code>parentNode</code></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回指定节点的父节点（肯定是个元素节点）</span></span><br><span class=\"line\"><span class=\"comment\">// document例外没有父节点，所以他的 父节点属性返回null</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> parentNode = node.parentNode;</span><br></pre></td></tr></table></figure>"},{"title":"HTML元素简记","date":"2018-10-26T03:25:40.000Z","description":"记录各类属性等细节，以备随时查询","keywords":"HTML","_content":"\n# input\n#### 1、`type = number`时候的坑\n\n- `number` 可以输入小数点\n- 此时 `maxlength` 属性失效(`maxlength` 属性与 `<input type=\"text\"> 或 <input type=\"password\">` 配合使用)\n\n### 2、利用\binput实现 6个输入框\n[实现demo](https://gitee.com/littleFaye/aboutFE)\n### 3、input 光标\n```css\ninput{\n  opacity: 0;\n}\n```\n以上代码，ios、安卓都会看不到 input，但是ios的光标还是隐藏不调的；且长按输入字体，安卓也会有光标\n\n解决：`transform: scale(0)`; 光标消失","source":"_posts/HTML元素简记.md","raw":"---\ntitle: HTML元素简记\ndate: 2018-10-26 11:25:40\ntags: HTML\ndescription: 记录各类属性等细节，以备随时查询\nkeywords: HTML\ncategories: HTML\n---\n\n# input\n#### 1、`type = number`时候的坑\n\n- `number` 可以输入小数点\n- 此时 `maxlength` 属性失效(`maxlength` 属性与 `<input type=\"text\"> 或 <input type=\"password\">` 配合使用)\n\n### 2、利用\binput实现 6个输入框\n[实现demo](https://gitee.com/littleFaye/aboutFE)\n### 3、input 光标\n```css\ninput{\n  opacity: 0;\n}\n```\n以上代码，ios、安卓都会看不到 input，但是ios的光标还是隐藏不调的；且长按输入字体，安卓也会有光标\n\n解决：`transform: scale(0)`; 光标消失","slug":"HTML元素简记","published":1,"updated":"2018-11-08T02:53:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7kpl0200007jcs66a67ncma","content":"<h1 id=\"input\"><a href=\"#input\" class=\"headerlink\" title=\"input\"></a>input</h1><h4 id=\"1、type-number时候的坑\"><a href=\"#1、type-number时候的坑\" class=\"headerlink\" title=\"1、type = number时候的坑\"></a>1、<code>type = number</code>时候的坑</h4><ul>\n<li><code>number</code> 可以输入小数点</li>\n<li>此时 <code>maxlength</code> 属性失效(<code>maxlength</code> 属性与 <code>&lt;input type=&quot;text&quot;&gt; 或 &lt;input type=&quot;password&quot;&gt;</code> 配合使用)</li>\n</ul>\n<h3 id=\"2、利用input实现-6个输入框\"><a href=\"#2、利用input实现-6个输入框\" class=\"headerlink\" title=\"2、利用\binput实现 6个输入框\"></a>2、利用\binput实现 6个输入框</h3><p><a href=\"https://gitee.com/littleFaye/aboutFE\" target=\"_blank\" rel=\"noopener\">实现demo</a></p>\n<h3 id=\"3、input-光标\"><a href=\"#3、input-光标\" class=\"headerlink\" title=\"3、input 光标\"></a>3、input 光标</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码，ios、安卓都会看不到 input，但是ios的光标还是隐藏不调的；且长按输入字体，安卓也会有光标</p>\n<p>解决：<code>transform: scale(0)</code>; 光标消失</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"input\"><a href=\"#input\" class=\"headerlink\" title=\"input\"></a>input</h1><h4 id=\"1、type-number时候的坑\"><a href=\"#1、type-number时候的坑\" class=\"headerlink\" title=\"1、type = number时候的坑\"></a>1、<code>type = number</code>时候的坑</h4><ul>\n<li><code>number</code> 可以输入小数点</li>\n<li>此时 <code>maxlength</code> 属性失效(<code>maxlength</code> 属性与 <code>&lt;input type=&quot;text&quot;&gt; 或 &lt;input type=&quot;password&quot;&gt;</code> 配合使用)</li>\n</ul>\n<h3 id=\"2、利用input实现-6个输入框\"><a href=\"#2、利用input实现-6个输入框\" class=\"headerlink\" title=\"2、利用\binput实现 6个输入框\"></a>2、利用\binput实现 6个输入框</h3><p><a href=\"https://gitee.com/littleFaye/aboutFE\" target=\"_blank\" rel=\"noopener\">实现demo</a></p>\n<h3 id=\"3、input-光标\"><a href=\"#3、input-光标\" class=\"headerlink\" title=\"3、input 光标\"></a>3、input 光标</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码，ios、安卓都会看不到 input，但是ios的光标还是隐藏不调的；且长按输入字体，安卓也会有光标</p>\n<p>解决：<code>transform: scale(0)</code>; 光标消失</p>\n"},{"title":"IOS的坑","date":"2018-10-26T10:36:39.000Z","description":"记录iOS开发问题及解决方法","keywords":"BUG","_content":"# 1、overflow: hidden;失效 ，背景仍可滑动问题\n- 改变控制背景 滑动方法；不使用 `overflow: hidden`; 改用 `position:fixed`;\n- 缺点：用于页面顶部还可以，当你有弹框时， `body` 会自动滑到顶部（此处还没找到破解方法，各位大神有方法，望赐教）\n\n# 2、input\n- 上面总多出边框 `outline:none` 也不管用(类似还有 `button` 的倒圆角问题)\n  - `-webkit-appearance:none`;\n  - [关于-webkit-appearance 属性](https://www.cnblogs.com/shawn-en/p/4352929.html)\n- [光标问题](https://littlefaye.gitee.io//teresa/2018/10/26/HTML元素简记/)\n- [autofocus](https://segmentfault.com/q/1010000014364210/a-1020000014450087) 如果没有通过某种用户交互，iOS不会（触发`focus`事件）\n\n# 3、scroll滑动卡顿不流畅\n- `-webkit-overflow-scrolling : touch`;\n\n# 4、safari 橡皮筋效果\n- `touch`事件添加 `e.preventDefault()`","source":"_posts/IOS的坑.md","raw":"---\ntitle: IOS的坑\ndate: 2018-10-26 18:36:39\ntags: BUG\ndescription: 记录iOS开发问题及解决方法\nkeywords: BUG\ncategories: BUG\n---\n# 1、overflow: hidden;失效 ，背景仍可滑动问题\n- 改变控制背景 滑动方法；不使用 `overflow: hidden`; 改用 `position:fixed`;\n- 缺点：用于页面顶部还可以，当你有弹框时， `body` 会自动滑到顶部（此处还没找到破解方法，各位大神有方法，望赐教）\n\n# 2、input\n- 上面总多出边框 `outline:none` 也不管用(类似还有 `button` 的倒圆角问题)\n  - `-webkit-appearance:none`;\n  - [关于-webkit-appearance 属性](https://www.cnblogs.com/shawn-en/p/4352929.html)\n- [光标问题](https://littlefaye.gitee.io//teresa/2018/10/26/HTML元素简记/)\n- [autofocus](https://segmentfault.com/q/1010000014364210/a-1020000014450087) 如果没有通过某种用户交互，iOS不会（触发`focus`事件）\n\n# 3、scroll滑动卡顿不流畅\n- `-webkit-overflow-scrolling : touch`;\n\n# 4、safari 橡皮筋效果\n- `touch`事件添加 `e.preventDefault()`","slug":"IOS的坑","published":1,"updated":"2018-12-19T10:42:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7kpl0210008jcs6qgtvyqxh","content":"<h1 id=\"1、overflow-hidden-失效-，背景仍可滑动问题\"><a href=\"#1、overflow-hidden-失效-，背景仍可滑动问题\" class=\"headerlink\" title=\"1、overflow: hidden;失效 ，背景仍可滑动问题\"></a>1、overflow: hidden;失效 ，背景仍可滑动问题</h1><ul>\n<li>改变控制背景 滑动方法；不使用 <code>overflow: hidden</code>; 改用 <code>position:fixed</code>;</li>\n<li>缺点：用于页面顶部还可以，当你有弹框时， <code>body</code> 会自动滑到顶部（此处还没找到破解方法，各位大神有方法，望赐教）</li>\n</ul>\n<h1 id=\"2、input\"><a href=\"#2、input\" class=\"headerlink\" title=\"2、input\"></a>2、input</h1><ul>\n<li>上面总多出边框 <code>outline:none</code> 也不管用(类似还有 <code>button</code> 的倒圆角问题)<ul>\n<li><code>-webkit-appearance:none</code>;</li>\n<li><a href=\"https://www.cnblogs.com/shawn-en/p/4352929.html\" target=\"_blank\" rel=\"noopener\">关于-webkit-appearance 属性</a></li>\n</ul>\n</li>\n<li><a href=\"https://littlefaye.gitee.io//teresa/2018/10/26/HTML元素简记/\">光标问题</a></li>\n<li><a href=\"https://segmentfault.com/q/1010000014364210/a-1020000014450087\" target=\"_blank\" rel=\"noopener\">autofocus</a> 如果没有通过某种用户交互，iOS不会（触发<code>focus</code>事件）</li>\n</ul>\n<h1 id=\"3、scroll滑动卡顿不流畅\"><a href=\"#3、scroll滑动卡顿不流畅\" class=\"headerlink\" title=\"3、scroll滑动卡顿不流畅\"></a>3、scroll滑动卡顿不流畅</h1><ul>\n<li><code>-webkit-overflow-scrolling : touch</code>;</li>\n</ul>\n<h1 id=\"4、safari-橡皮筋效果\"><a href=\"#4、safari-橡皮筋效果\" class=\"headerlink\" title=\"4、safari 橡皮筋效果\"></a>4、safari 橡皮筋效果</h1><ul>\n<li><code>touch</code>事件添加 <code>e.preventDefault()</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1、overflow-hidden-失效-，背景仍可滑动问题\"><a href=\"#1、overflow-hidden-失效-，背景仍可滑动问题\" class=\"headerlink\" title=\"1、overflow: hidden;失效 ，背景仍可滑动问题\"></a>1、overflow: hidden;失效 ，背景仍可滑动问题</h1><ul>\n<li>改变控制背景 滑动方法；不使用 <code>overflow: hidden</code>; 改用 <code>position:fixed</code>;</li>\n<li>缺点：用于页面顶部还可以，当你有弹框时， <code>body</code> 会自动滑到顶部（此处还没找到破解方法，各位大神有方法，望赐教）</li>\n</ul>\n<h1 id=\"2、input\"><a href=\"#2、input\" class=\"headerlink\" title=\"2、input\"></a>2、input</h1><ul>\n<li>上面总多出边框 <code>outline:none</code> 也不管用(类似还有 <code>button</code> 的倒圆角问题)<ul>\n<li><code>-webkit-appearance:none</code>;</li>\n<li><a href=\"https://www.cnblogs.com/shawn-en/p/4352929.html\" target=\"_blank\" rel=\"noopener\">关于-webkit-appearance 属性</a></li>\n</ul>\n</li>\n<li><a href=\"https://littlefaye.gitee.io//teresa/2018/10/26/HTML元素简记/\">光标问题</a></li>\n<li><a href=\"https://segmentfault.com/q/1010000014364210/a-1020000014450087\" target=\"_blank\" rel=\"noopener\">autofocus</a> 如果没有通过某种用户交互，iOS不会（触发<code>focus</code>事件）</li>\n</ul>\n<h1 id=\"3、scroll滑动卡顿不流畅\"><a href=\"#3、scroll滑动卡顿不流畅\" class=\"headerlink\" title=\"3、scroll滑动卡顿不流畅\"></a>3、scroll滑动卡顿不流畅</h1><ul>\n<li><code>-webkit-overflow-scrolling : touch</code>;</li>\n</ul>\n<h1 id=\"4、safari-橡皮筋效果\"><a href=\"#4、safari-橡皮筋效果\" class=\"headerlink\" title=\"4、safari 橡皮筋效果\"></a>4、safari 橡皮筋效果</h1><ul>\n<li><code>touch</code>事件添加 <code>e.preventDefault()</code></li>\n</ul>\n"},{"title":"JavaScript细节简记","date":"2018-10-16T02:57:57.000Z","description":"记录各类属性等细节，以备随时查询","keywords":"JavaScript","_content":"# webpack \n> [Webpack 中文指南](https://zhaoda.net/webpack-handbook/index.html)\n> [深入浅出Webpack](http://webpack.wuhaolin.cn/)\n# `script defer async` 区别\n> [defer和async的区别](https://segmentfault.com/q/1010000000640869)\n\n\n# undefined 与 null 的区别\n[undefined与null的区别](http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html)\n- `not defined` \n  - 如果我们访问一个未声明的变量 会返回 `not defined` 的错误\n\n# 事件对象及this指向\n\n| 添加事件方式 | IE事件对象   | 非IE事件对象 |  IE this  | 非IE this|\n| :---------:  | :-----------: | :----------: | :---------: | :--------: |\n| HTML属性    | window.event| window.event| window   | window   |\n| DOM0       | window.event| event参数    | event.srcElement(相当于target) | currentTarget|\n| DOM2       | event参数    | event参数    | window   |currentTarget |\n\n\n# 一些小意外\n```js\nconst a = {a: 12};\nconst b = {a: 12};\nconsole.log(a == b); // false 可以理解\nconsole.log(JSON.stringify(a) == JSON.stringify(b)); // true 也可以理解\n\bconsole.log(a.__proto__ == b.__proto__); // true ????\n// 此时修改 a的原型会影响b的原型\nconst a.__proto__.name = 'lee';\nconsole.log(b.__proto__.name); // lee \nconst t = {};\nconsole.log(t.__proto__.name); // lee\n```\n\n# ES5 与 \bES6 区别\n\n- 箭头函数\n- 模板字符串\n- 作用域\n- 声明变量的方式\n  - 作用域的区别\n  - 所声明的变量 \b不属于window的属性\n- 函数传参可以指定默认值\n- 引入 class、\n- res\bt参数 用于获取函数的\b多余参数\n- spread 扩展运算符（...） 相当于 rest参数 的逆操作\n- Promise\n- import export\n- \n\n# 原型链 & 继承\n[从一道题解读JS原型链](https://segmentfault.com/a/1190000016736112#articleHeader2)\n\n[Javascript面向对象编程（二）：构造函数的继承](http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html)\n\n[Javascript面向对象编程（三）：非构造函数的继承](http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html)\n\n# 函数节流（throttle） & 去抖（debounce）\n[深入浅出throttle和debounce](https://github.com/stephenLYZ/stephenLYZ.github.io/issues/17)\n[JS函数防抖和函数节流](https://juejin.im/post/5a35ed25f265da431d3cc1b1)","source":"_posts/JavaScript细节简记.md","raw":"---\ntitle: JavaScript细节简记\ndate: 2018-10-16 10:57:57\ntags: JavaScript\ndescription: 记录各类属性等细节，以备随时查询\nkeywords: JavaScript\ncategories: JavaScript\n---\n# webpack \n> [Webpack 中文指南](https://zhaoda.net/webpack-handbook/index.html)\n> [深入浅出Webpack](http://webpack.wuhaolin.cn/)\n# `script defer async` 区别\n> [defer和async的区别](https://segmentfault.com/q/1010000000640869)\n\n\n# undefined 与 null 的区别\n[undefined与null的区别](http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html)\n- `not defined` \n  - 如果我们访问一个未声明的变量 会返回 `not defined` 的错误\n\n# 事件对象及this指向\n\n| 添加事件方式 | IE事件对象   | 非IE事件对象 |  IE this  | 非IE this|\n| :---------:  | :-----------: | :----------: | :---------: | :--------: |\n| HTML属性    | window.event| window.event| window   | window   |\n| DOM0       | window.event| event参数    | event.srcElement(相当于target) | currentTarget|\n| DOM2       | event参数    | event参数    | window   |currentTarget |\n\n\n# 一些小意外\n```js\nconst a = {a: 12};\nconst b = {a: 12};\nconsole.log(a == b); // false 可以理解\nconsole.log(JSON.stringify(a) == JSON.stringify(b)); // true 也可以理解\n\bconsole.log(a.__proto__ == b.__proto__); // true ????\n// 此时修改 a的原型会影响b的原型\nconst a.__proto__.name = 'lee';\nconsole.log(b.__proto__.name); // lee \nconst t = {};\nconsole.log(t.__proto__.name); // lee\n```\n\n# ES5 与 \bES6 区别\n\n- 箭头函数\n- 模板字符串\n- 作用域\n- 声明变量的方式\n  - 作用域的区别\n  - 所声明的变量 \b不属于window的属性\n- 函数传参可以指定默认值\n- 引入 class、\n- res\bt参数 用于获取函数的\b多余参数\n- spread 扩展运算符（...） 相当于 rest参数 的逆操作\n- Promise\n- import export\n- \n\n# 原型链 & 继承\n[从一道题解读JS原型链](https://segmentfault.com/a/1190000016736112#articleHeader2)\n\n[Javascript面向对象编程（二）：构造函数的继承](http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html)\n\n[Javascript面向对象编程（三）：非构造函数的继承](http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html)\n\n# 函数节流（throttle） & 去抖（debounce）\n[深入浅出throttle和debounce](https://github.com/stephenLYZ/stephenLYZ.github.io/issues/17)\n[JS函数防抖和函数节流](https://juejin.im/post/5a35ed25f265da431d3cc1b1)","slug":"JavaScript细节简记","published":1,"updated":"2018-11-06T07:40:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7kpl024000cjcs6wql9ouzr","content":"<h1 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h1><blockquote>\n<p><a href=\"https://zhaoda.net/webpack-handbook/index.html\" target=\"_blank\" rel=\"noopener\">Webpack 中文指南</a><br><a href=\"http://webpack.wuhaolin.cn/\" target=\"_blank\" rel=\"noopener\">深入浅出Webpack</a></p>\n</blockquote>\n<h1 id=\"script-defer-async-区别\"><a href=\"#script-defer-async-区别\" class=\"headerlink\" title=\"script defer async 区别\"></a><code>script defer async</code> 区别</h1><blockquote>\n<p><a href=\"https://segmentfault.com/q/1010000000640869\" target=\"_blank\" rel=\"noopener\">defer和async的区别</a></p>\n</blockquote>\n<h1 id=\"undefined-与-null-的区别\"><a href=\"#undefined-与-null-的区别\" class=\"headerlink\" title=\"undefined 与 null 的区别\"></a>undefined 与 null 的区别</h1><p><a href=\"http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html\" target=\"_blank\" rel=\"noopener\">undefined与null的区别</a></p>\n<ul>\n<li><code>not defined</code> <ul>\n<li>如果我们访问一个未声明的变量 会返回 <code>not defined</code> 的错误</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"事件对象及this指向\"><a href=\"#事件对象及this指向\" class=\"headerlink\" title=\"事件对象及this指向\"></a>事件对象及this指向</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">添加事件方式</th>\n<th style=\"text-align:center\">IE事件对象</th>\n<th style=\"text-align:center\">非IE事件对象</th>\n<th style=\"text-align:center\">IE this</th>\n<th style=\"text-align:center\">非IE this</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">HTML属性</td>\n<td style=\"text-align:center\">window.event</td>\n<td style=\"text-align:center\">window.event</td>\n<td style=\"text-align:center\">window</td>\n<td style=\"text-align:center\">window</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DOM0</td>\n<td style=\"text-align:center\">window.event</td>\n<td style=\"text-align:center\">event参数</td>\n<td style=\"text-align:center\">event.srcElement(相当于target)</td>\n<td style=\"text-align:center\">currentTarget</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DOM2</td>\n<td style=\"text-align:center\">event参数</td>\n<td style=\"text-align:center\">event参数</td>\n<td style=\"text-align:center\">window</td>\n<td style=\"text-align:center\">currentTarget</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"一些小意外\"><a href=\"#一些小意外\" class=\"headerlink\" title=\"一些小意外\"></a>一些小意外</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = &#123;<span class=\"attr\">a</span>: <span class=\"number\">12</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = &#123;<span class=\"attr\">a</span>: <span class=\"number\">12</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a == b); <span class=\"comment\">// false 可以理解</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(a) == <span class=\"built_in\">JSON</span>.stringify(b)); <span class=\"comment\">// true 也可以理解</span></span><br><span class=\"line\">\b<span class=\"built_in\">console</span>.log(a.__proto__ == b.__proto__); <span class=\"comment\">// true ????</span></span><br><span class=\"line\"><span class=\"comment\">// 此时修改 a的原型会影响b的原型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a.__proto__.name = <span class=\"string\">'lee'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.__proto__.name); <span class=\"comment\">// lee </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> t = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(t.__proto__.name); <span class=\"comment\">// lee</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"ES5-与-ES6-区别\"><a href=\"#ES5-与-ES6-区别\" class=\"headerlink\" title=\"ES5 与 \bES6 区别\"></a>ES5 与 \bES6 区别</h1><ul>\n<li>箭头函数</li>\n<li>模板字符串</li>\n<li>作用域</li>\n<li>声明变量的方式<ul>\n<li>作用域的区别</li>\n<li>所声明的变量 \b不属于window的属性</li>\n</ul>\n</li>\n<li>函数传参可以指定默认值</li>\n<li>引入 class、</li>\n<li>res\bt参数 用于获取函数的\b多余参数</li>\n<li>spread 扩展运算符（…） 相当于 rest参数 的逆操作</li>\n<li>Promise</li>\n<li>import export</li>\n<li></li>\n</ul>\n<h1 id=\"原型链-amp-继承\"><a href=\"#原型链-amp-继承\" class=\"headerlink\" title=\"原型链 &amp; 继承\"></a>原型链 &amp; 继承</h1><p><a href=\"https://segmentfault.com/a/1190000016736112#articleHeader2\" target=\"_blank\" rel=\"noopener\">从一道题解读JS原型链</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html\" target=\"_blank\" rel=\"noopener\">Javascript面向对象编程（二）：构造函数的继承</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html\" target=\"_blank\" rel=\"noopener\">Javascript面向对象编程（三）：非构造函数的继承</a></p>\n<h1 id=\"函数节流（throttle）-amp-去抖（debounce）\"><a href=\"#函数节流（throttle）-amp-去抖（debounce）\" class=\"headerlink\" title=\"函数节流（throttle） &amp; 去抖（debounce）\"></a>函数节流（throttle） &amp; 去抖（debounce）</h1><p><a href=\"https://github.com/stephenLYZ/stephenLYZ.github.io/issues/17\" target=\"_blank\" rel=\"noopener\">深入浅出throttle和debounce</a><br><a href=\"https://juejin.im/post/5a35ed25f265da431d3cc1b1\" target=\"_blank\" rel=\"noopener\">JS函数防抖和函数节流</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h1><blockquote>\n<p><a href=\"https://zhaoda.net/webpack-handbook/index.html\" target=\"_blank\" rel=\"noopener\">Webpack 中文指南</a><br><a href=\"http://webpack.wuhaolin.cn/\" target=\"_blank\" rel=\"noopener\">深入浅出Webpack</a></p>\n</blockquote>\n<h1 id=\"script-defer-async-区别\"><a href=\"#script-defer-async-区别\" class=\"headerlink\" title=\"script defer async 区别\"></a><code>script defer async</code> 区别</h1><blockquote>\n<p><a href=\"https://segmentfault.com/q/1010000000640869\" target=\"_blank\" rel=\"noopener\">defer和async的区别</a></p>\n</blockquote>\n<h1 id=\"undefined-与-null-的区别\"><a href=\"#undefined-与-null-的区别\" class=\"headerlink\" title=\"undefined 与 null 的区别\"></a>undefined 与 null 的区别</h1><p><a href=\"http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html\" target=\"_blank\" rel=\"noopener\">undefined与null的区别</a></p>\n<ul>\n<li><code>not defined</code> <ul>\n<li>如果我们访问一个未声明的变量 会返回 <code>not defined</code> 的错误</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"事件对象及this指向\"><a href=\"#事件对象及this指向\" class=\"headerlink\" title=\"事件对象及this指向\"></a>事件对象及this指向</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">添加事件方式</th>\n<th style=\"text-align:center\">IE事件对象</th>\n<th style=\"text-align:center\">非IE事件对象</th>\n<th style=\"text-align:center\">IE this</th>\n<th style=\"text-align:center\">非IE this</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">HTML属性</td>\n<td style=\"text-align:center\">window.event</td>\n<td style=\"text-align:center\">window.event</td>\n<td style=\"text-align:center\">window</td>\n<td style=\"text-align:center\">window</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DOM0</td>\n<td style=\"text-align:center\">window.event</td>\n<td style=\"text-align:center\">event参数</td>\n<td style=\"text-align:center\">event.srcElement(相当于target)</td>\n<td style=\"text-align:center\">currentTarget</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DOM2</td>\n<td style=\"text-align:center\">event参数</td>\n<td style=\"text-align:center\">event参数</td>\n<td style=\"text-align:center\">window</td>\n<td style=\"text-align:center\">currentTarget</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"一些小意外\"><a href=\"#一些小意外\" class=\"headerlink\" title=\"一些小意外\"></a>一些小意外</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = &#123;<span class=\"attr\">a</span>: <span class=\"number\">12</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = &#123;<span class=\"attr\">a</span>: <span class=\"number\">12</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a == b); <span class=\"comment\">// false 可以理解</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(a) == <span class=\"built_in\">JSON</span>.stringify(b)); <span class=\"comment\">// true 也可以理解</span></span><br><span class=\"line\">\b<span class=\"built_in\">console</span>.log(a.__proto__ == b.__proto__); <span class=\"comment\">// true ????</span></span><br><span class=\"line\"><span class=\"comment\">// 此时修改 a的原型会影响b的原型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a.__proto__.name = <span class=\"string\">'lee'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.__proto__.name); <span class=\"comment\">// lee </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> t = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(t.__proto__.name); <span class=\"comment\">// lee</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"ES5-与-ES6-区别\"><a href=\"#ES5-与-ES6-区别\" class=\"headerlink\" title=\"ES5 与 \bES6 区别\"></a>ES5 与 \bES6 区别</h1><ul>\n<li>箭头函数</li>\n<li>模板字符串</li>\n<li>作用域</li>\n<li>声明变量的方式<ul>\n<li>作用域的区别</li>\n<li>所声明的变量 \b不属于window的属性</li>\n</ul>\n</li>\n<li>函数传参可以指定默认值</li>\n<li>引入 class、</li>\n<li>res\bt参数 用于获取函数的\b多余参数</li>\n<li>spread 扩展运算符（…） 相当于 rest参数 的逆操作</li>\n<li>Promise</li>\n<li>import export</li>\n<li></li>\n</ul>\n<h1 id=\"原型链-amp-继承\"><a href=\"#原型链-amp-继承\" class=\"headerlink\" title=\"原型链 &amp; 继承\"></a>原型链 &amp; 继承</h1><p><a href=\"https://segmentfault.com/a/1190000016736112#articleHeader2\" target=\"_blank\" rel=\"noopener\">从一道题解读JS原型链</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html\" target=\"_blank\" rel=\"noopener\">Javascript面向对象编程（二）：构造函数的继承</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html\" target=\"_blank\" rel=\"noopener\">Javascript面向对象编程（三）：非构造函数的继承</a></p>\n<h1 id=\"函数节流（throttle）-amp-去抖（debounce）\"><a href=\"#函数节流（throttle）-amp-去抖（debounce）\" class=\"headerlink\" title=\"函数节流（throttle） &amp; 去抖（debounce）\"></a>函数节流（throttle） &amp; 去抖（debounce）</h1><p><a href=\"https://github.com/stephenLYZ/stephenLYZ.github.io/issues/17\" target=\"_blank\" rel=\"noopener\">深入浅出throttle和debounce</a><br><a href=\"https://juejin.im/post/5a35ed25f265da431d3cc1b1\" target=\"_blank\" rel=\"noopener\">JS函数防抖和函数节流</a></p>\n"},{"title":"XHR实现ajax与jsonp","date":"2018-09-29T02:52:07.000Z","description":"简记flex布局","keywords":"XHR AJAX JSONP","_content":"> 查看本章代码 [demo](https://github.com/Faye0807/task.git)\n## XMLHttpRequest对象\n现在浏览器均内建 `XMLHttpRequest` 对象（IE5 和 IE6 使用 ActiveXObject）\n```js\n// 获取 xhr 实例\nconst xhr = new window.XMLHttpRequest();\n// 或者\nconst xhr1 = new XMLHttpRequest();\n```\n\n## XMLHttpRequest 的用法\n\n- open(\"method(不区分大小写)\", 'url', 是否异步的布尔值);\n- send(发送请求时的参数数据若没有须填写null);(get方法时\b请求参数需要拼接到url后面，放到send方法里面无效)\n- abort() 在取得响应前取消异步请求\n调用 `send` 方法后，请求就会别分派到服务器，在收到响应后，响应的数据会自动填充 XHR 对象的属性，如下：\n\n- responseText 作为响应主体返回的文本\n- responseXML 如果响应的内容类型是 `text/xml` 或 `application/xml`，这个属性中将保存包含着相应数据的 XML DOM文档\n- status 响应的 HTTP状态\n- statusText HTTP状态的说明\n\n如果异步请求，需要监测请求状态（xhr对象的 `readyState` 属性），根据状态的变化（xhr的 `readystatechange` 事件）来做响应处理, `readystatechange`事件必须放在调用 `open` 方法前\n- readyState 属性值\n  - 0 未初始化\n  - 1 启动 已经调用open方法\n  - 2 发送 已经调用send方法\n  - 3 接收 已经接受到部分响应数据\n  - 4 完成\n\n  自动定义头部信息方法： setRequestHeader()\n  - 该方法必须在open之后send之前调用\n  - 该方法接受两个参数： 头部字段名称，该字段名称的值\n  \n```js\nxhr.setRequestHeader('Content-Type', 'application/json; charset=utf-8');\n```\n\n简单例子如下：\n\n```js\nconst xhr = new window.XMLHttpRequest();\nconst data = {\n  id: 10\n};\nxhr.onreadystatechange = function() {\n  if (xhr.readyState === 4) {\n    if (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304){\n      console.log('request success');\n    } else {\n      console.log('request was unseccessful');\n    }\n  }\n};\nxhr.open('GET', someurl, true);\nxhr.setRequestHeader('Content-Type', 'application/json; charset=utf-8');\nxhr.send(data);\n```\n\n### get请求\nget是常用的请求方式，必要时可在URL后面追加查询字符串；查询字符串中的每个参数的名称和值都必须经过 `encodeURIComponent()` 进行编码才能放到URL的末尾，且不同的键值需要用 `&` 进行分割\n\n> 注意：get请求的参数是需要拼接到url后面的，放到send方法里面此时是无效的\n### XMLHttpRequest 2级\n#### 超时设定\n- xhr.timeout = 1000\n- xhr.ontimeout = function() {}\n\n### JSONP(JSON with padding 填充式json)\nJSONP 由两部分组成（回调函数 + 数据）\n缺点\n- 只能使用Get请求\n- 不能注册success、error等事件监听函数，不能很容易的确定JSONP请求是否失败\n- JSONP是从其他域中加载代码执行，容易受到跨站请求伪造的攻击，其安全性无法确保","source":"_posts/XHR实现ajax与jsonp.md","raw":"---\ntitle: XHR实现ajax与jsonp\ndate: 2018-09-29 10:52:07\ntags: [JavaScript, AJAX]\ndescription: 简记flex布局\ncategories: JavaScript\nkeywords: XHR AJAX JSONP\n---\n> 查看本章代码 [demo](https://github.com/Faye0807/task.git)\n## XMLHttpRequest对象\n现在浏览器均内建 `XMLHttpRequest` 对象（IE5 和 IE6 使用 ActiveXObject）\n```js\n// 获取 xhr 实例\nconst xhr = new window.XMLHttpRequest();\n// 或者\nconst xhr1 = new XMLHttpRequest();\n```\n\n## XMLHttpRequest 的用法\n\n- open(\"method(不区分大小写)\", 'url', 是否异步的布尔值);\n- send(发送请求时的参数数据若没有须填写null);(get方法时\b请求参数需要拼接到url后面，放到send方法里面无效)\n- abort() 在取得响应前取消异步请求\n调用 `send` 方法后，请求就会别分派到服务器，在收到响应后，响应的数据会自动填充 XHR 对象的属性，如下：\n\n- responseText 作为响应主体返回的文本\n- responseXML 如果响应的内容类型是 `text/xml` 或 `application/xml`，这个属性中将保存包含着相应数据的 XML DOM文档\n- status 响应的 HTTP状态\n- statusText HTTP状态的说明\n\n如果异步请求，需要监测请求状态（xhr对象的 `readyState` 属性），根据状态的变化（xhr的 `readystatechange` 事件）来做响应处理, `readystatechange`事件必须放在调用 `open` 方法前\n- readyState 属性值\n  - 0 未初始化\n  - 1 启动 已经调用open方法\n  - 2 发送 已经调用send方法\n  - 3 接收 已经接受到部分响应数据\n  - 4 完成\n\n  自动定义头部信息方法： setRequestHeader()\n  - 该方法必须在open之后send之前调用\n  - 该方法接受两个参数： 头部字段名称，该字段名称的值\n  \n```js\nxhr.setRequestHeader('Content-Type', 'application/json; charset=utf-8');\n```\n\n简单例子如下：\n\n```js\nconst xhr = new window.XMLHttpRequest();\nconst data = {\n  id: 10\n};\nxhr.onreadystatechange = function() {\n  if (xhr.readyState === 4) {\n    if (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304){\n      console.log('request success');\n    } else {\n      console.log('request was unseccessful');\n    }\n  }\n};\nxhr.open('GET', someurl, true);\nxhr.setRequestHeader('Content-Type', 'application/json; charset=utf-8');\nxhr.send(data);\n```\n\n### get请求\nget是常用的请求方式，必要时可在URL后面追加查询字符串；查询字符串中的每个参数的名称和值都必须经过 `encodeURIComponent()` 进行编码才能放到URL的末尾，且不同的键值需要用 `&` 进行分割\n\n> 注意：get请求的参数是需要拼接到url后面的，放到send方法里面此时是无效的\n### XMLHttpRequest 2级\n#### 超时设定\n- xhr.timeout = 1000\n- xhr.ontimeout = function() {}\n\n### JSONP(JSON with padding 填充式json)\nJSONP 由两部分组成（回调函数 + 数据）\n缺点\n- 只能使用Get请求\n- 不能注册success、error等事件监听函数，不能很容易的确定JSONP请求是否失败\n- JSONP是从其他域中加载代码执行，容易受到跨站请求伪造的攻击，其安全性无法确保","slug":"XHR实现ajax与jsonp","published":1,"updated":"2018-09-29T11:38:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7kpl027000djcs64ipix0fa","content":"<blockquote>\n<p>查看本章代码 <a href=\"https://github.com/Faye0807/task.git\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n</blockquote>\n<h2 id=\"XMLHttpRequest对象\"><a href=\"#XMLHttpRequest对象\" class=\"headerlink\" title=\"XMLHttpRequest对象\"></a>XMLHttpRequest对象</h2><p>现在浏览器均内建 <code>XMLHttpRequest</code> 对象（IE5 和 IE6 使用 ActiveXObject）<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取 xhr 实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> <span class=\"built_in\">window</span>.XMLHttpRequest();</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> xhr1 = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"XMLHttpRequest-的用法\"><a href=\"#XMLHttpRequest-的用法\" class=\"headerlink\" title=\"XMLHttpRequest 的用法\"></a>XMLHttpRequest 的用法</h2><ul>\n<li>open(“method(不区分大小写)”, ‘url’, 是否异步的布尔值);</li>\n<li>send(发送请求时的参数数据若没有须填写null);(get方法时\b请求参数需要拼接到url后面，放到send方法里面无效)</li>\n<li><p>abort() 在取得响应前取消异步请求<br>调用 <code>send</code> 方法后，请求就会别分派到服务器，在收到响应后，响应的数据会自动填充 XHR 对象的属性，如下：</p>\n</li>\n<li><p>responseText 作为响应主体返回的文本</p>\n</li>\n<li>responseXML 如果响应的内容类型是 <code>text/xml</code> 或 <code>application/xml</code>，这个属性中将保存包含着相应数据的 XML DOM文档</li>\n<li>status 响应的 HTTP状态</li>\n<li>statusText HTTP状态的说明</li>\n</ul>\n<p>如果异步请求，需要监测请求状态（xhr对象的 <code>readyState</code> 属性），根据状态的变化（xhr的 <code>readystatechange</code> 事件）来做响应处理, <code>readystatechange</code>事件必须放在调用 <code>open</code> 方法前</p>\n<ul>\n<li><p>readyState 属性值</p>\n<ul>\n<li>0 未初始化</li>\n<li>1 启动 已经调用open方法</li>\n<li>2 发送 已经调用send方法</li>\n<li>3 接收 已经接受到部分响应数据</li>\n<li>4 完成</li>\n</ul>\n<p>自动定义头部信息方法： setRequestHeader()</p>\n<ul>\n<li>该方法必须在open之后send之前调用</li>\n<li>该方法接受两个参数： 头部字段名称，该字段名称的值</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.setRequestHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/json; charset=utf-8'</span>);</span><br></pre></td></tr></table></figure>\n<p>简单例子如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> <span class=\"built_in\">window</span>.XMLHttpRequest();</span><br><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">  id: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (xhr.readyState === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span> || xhr.status === <span class=\"number\">304</span>)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'request success'</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'request was unseccessful'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">xhr.open(<span class=\"string\">'GET'</span>, someurl, <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.setRequestHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/json; charset=utf-8'</span>);</span><br><span class=\"line\">xhr.send(data);</span><br></pre></td></tr></table></figure>\n<h3 id=\"get请求\"><a href=\"#get请求\" class=\"headerlink\" title=\"get请求\"></a>get请求</h3><p>get是常用的请求方式，必要时可在URL后面追加查询字符串；查询字符串中的每个参数的名称和值都必须经过 <code>encodeURIComponent()</code> 进行编码才能放到URL的末尾，且不同的键值需要用 <code>&amp;</code> 进行分割</p>\n<blockquote>\n<p>注意：get请求的参数是需要拼接到url后面的，放到send方法里面此时是无效的</p>\n</blockquote>\n<h3 id=\"XMLHttpRequest-2级\"><a href=\"#XMLHttpRequest-2级\" class=\"headerlink\" title=\"XMLHttpRequest 2级\"></a>XMLHttpRequest 2级</h3><h4 id=\"超时设定\"><a href=\"#超时设定\" class=\"headerlink\" title=\"超时设定\"></a>超时设定</h4><ul>\n<li>xhr.timeout = 1000</li>\n<li>xhr.ontimeout = function() {}</li>\n</ul>\n<h3 id=\"JSONP-JSON-with-padding-填充式json\"><a href=\"#JSONP-JSON-with-padding-填充式json\" class=\"headerlink\" title=\"JSONP(JSON with padding 填充式json)\"></a>JSONP(JSON with padding 填充式json)</h3><p>JSONP 由两部分组成（回调函数 + 数据）<br>缺点</p>\n<ul>\n<li>只能使用Get请求</li>\n<li>不能注册success、error等事件监听函数，不能很容易的确定JSONP请求是否失败</li>\n<li>JSONP是从其他域中加载代码执行，容易受到跨站请求伪造的攻击，其安全性无法确保</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>查看本章代码 <a href=\"https://github.com/Faye0807/task.git\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n</blockquote>\n<h2 id=\"XMLHttpRequest对象\"><a href=\"#XMLHttpRequest对象\" class=\"headerlink\" title=\"XMLHttpRequest对象\"></a>XMLHttpRequest对象</h2><p>现在浏览器均内建 <code>XMLHttpRequest</code> 对象（IE5 和 IE6 使用 ActiveXObject）<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取 xhr 实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> <span class=\"built_in\">window</span>.XMLHttpRequest();</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> xhr1 = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"XMLHttpRequest-的用法\"><a href=\"#XMLHttpRequest-的用法\" class=\"headerlink\" title=\"XMLHttpRequest 的用法\"></a>XMLHttpRequest 的用法</h2><ul>\n<li>open(“method(不区分大小写)”, ‘url’, 是否异步的布尔值);</li>\n<li>send(发送请求时的参数数据若没有须填写null);(get方法时\b请求参数需要拼接到url后面，放到send方法里面无效)</li>\n<li><p>abort() 在取得响应前取消异步请求<br>调用 <code>send</code> 方法后，请求就会别分派到服务器，在收到响应后，响应的数据会自动填充 XHR 对象的属性，如下：</p>\n</li>\n<li><p>responseText 作为响应主体返回的文本</p>\n</li>\n<li>responseXML 如果响应的内容类型是 <code>text/xml</code> 或 <code>application/xml</code>，这个属性中将保存包含着相应数据的 XML DOM文档</li>\n<li>status 响应的 HTTP状态</li>\n<li>statusText HTTP状态的说明</li>\n</ul>\n<p>如果异步请求，需要监测请求状态（xhr对象的 <code>readyState</code> 属性），根据状态的变化（xhr的 <code>readystatechange</code> 事件）来做响应处理, <code>readystatechange</code>事件必须放在调用 <code>open</code> 方法前</p>\n<ul>\n<li><p>readyState 属性值</p>\n<ul>\n<li>0 未初始化</li>\n<li>1 启动 已经调用open方法</li>\n<li>2 发送 已经调用send方法</li>\n<li>3 接收 已经接受到部分响应数据</li>\n<li>4 完成</li>\n</ul>\n<p>自动定义头部信息方法： setRequestHeader()</p>\n<ul>\n<li>该方法必须在open之后send之前调用</li>\n<li>该方法接受两个参数： 头部字段名称，该字段名称的值</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.setRequestHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/json; charset=utf-8'</span>);</span><br></pre></td></tr></table></figure>\n<p>简单例子如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> <span class=\"built_in\">window</span>.XMLHttpRequest();</span><br><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">  id: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (xhr.readyState === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span> || xhr.status === <span class=\"number\">304</span>)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'request success'</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'request was unseccessful'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">xhr.open(<span class=\"string\">'GET'</span>, someurl, <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.setRequestHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/json; charset=utf-8'</span>);</span><br><span class=\"line\">xhr.send(data);</span><br></pre></td></tr></table></figure>\n<h3 id=\"get请求\"><a href=\"#get请求\" class=\"headerlink\" title=\"get请求\"></a>get请求</h3><p>get是常用的请求方式，必要时可在URL后面追加查询字符串；查询字符串中的每个参数的名称和值都必须经过 <code>encodeURIComponent()</code> 进行编码才能放到URL的末尾，且不同的键值需要用 <code>&amp;</code> 进行分割</p>\n<blockquote>\n<p>注意：get请求的参数是需要拼接到url后面的，放到send方法里面此时是无效的</p>\n</blockquote>\n<h3 id=\"XMLHttpRequest-2级\"><a href=\"#XMLHttpRequest-2级\" class=\"headerlink\" title=\"XMLHttpRequest 2级\"></a>XMLHttpRequest 2级</h3><h4 id=\"超时设定\"><a href=\"#超时设定\" class=\"headerlink\" title=\"超时设定\"></a>超时设定</h4><ul>\n<li>xhr.timeout = 1000</li>\n<li>xhr.ontimeout = function() {}</li>\n</ul>\n<h3 id=\"JSONP-JSON-with-padding-填充式json\"><a href=\"#JSONP-JSON-with-padding-填充式json\" class=\"headerlink\" title=\"JSONP(JSON with padding 填充式json)\"></a>JSONP(JSON with padding 填充式json)</h3><p>JSONP 由两部分组成（回调函数 + 数据）<br>缺点</p>\n<ul>\n<li>只能使用Get请求</li>\n<li>不能注册success、error等事件监听函数，不能很容易的确定JSONP请求是否失败</li>\n<li>JSONP是从其他域中加载代码执行，容易受到跨站请求伪造的攻击，其安全性无法确保</li>\n</ul>\n"},{"title":"Vue相关问题记录","date":"2018-08-15T14:52:55.000Z","description":"记录工作中Vue项目遇到的问题及解决方案，持续更新","keywords":"vue相关问题","_content":"## Vues数据双向绑定实现\n[code](https://github.com/Faye0807/task/tree/master/fe/views/demo/vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%AE%9E%E7%8E%B0)\n\n## inupt输入框的`change`事件在失去焦点后触发  \n此时跟blur事件很像，查阅后\b的方案是将处理程序添加到input事件上面 [参考链接](https://forum.vuejs.org/t/v-on-change/8670)\n\n## vue input file 多次上传不触发change事件问题 \n有以下几种方法（[参考链接](https://www.cnblogs.com/exhuasted/p/6185874.html)）：\n- 清空input的value\b值\n- 替换掉原来的input 渲染一个新的input\n- 将input放到\b一个表单里，change事件触发时将表单reset\n- 替换原input，渲染新input并重新绑定change事件（这个方法对我有效）\n\n## Vue 父组件异步获取数据，子组件props获取不到\n由于我子组件需要拿到props后做数据处理，但发现无论是放到data，还是mounted，props里面值还是undefined；\n\n查阅后了解到，异步请求数据有关；解决办法就是：引用子组件时，v-if先判断先props是否有值，如下\n``` js\n<component-a v-if=\"dataList.length>0\" :prop-a=\"dataList\" />\n```\n\n## 事件修饰符\n事件修饰符不仅在绑定处理程序时候可以用，不绑定事件处理\b程序同样可用；比如阻止事件的传播\n```js\n<component-a @touch.stop />\n```\n\n## 深度作用选择器 `/deep/` or `>>>`\n当你的style标签添加`scoped` 使css有了作用域后，若想让自己的\bcss可以更深的控制元素样式，则可以使用`/deep/` or `>>>`; 比如你想在父组件更改子组件样式的时候，可能会需要这个选择器\n\n[参考链接](https://vue-loader-v14.vuejs.org/zh-cn/features/scoped-css.html)\n\n<!-- ## 组件标签上添加class、style 与 元素上添加class、style的区别\n\n```js\n<component-a class=\"class-a\" style=\"positon: absoult;color: #fff;\" />\n<div class=\"class-a\" style=\"positon: absoult;color: #fff;\" />\n``` -->\n\n## img 动态src属性值\n\n```js\n// 是加载不到图片的\n<img :src=\"flag ? './image/img.png' : './image.img2.png'\" />\n// 需要这样\n<img :src=\"flag ? require('./image/img.png') : require('./image.img2.png')\" />\n// 或者 将图片放到 static文件夹\n```\n[vue 动态加载图片src的解决办法](https://blog.csdn.net/keji_123/article/details/79977210)\n\n## v-for\n\n> 注意 :key 的值若不唯一\b会报错\n\n```js\n[Vue warn]: Duplicate keys detected: '{key}'. This may cause an update error.  found in  ---> <Anonymous>        <Nuxt>          <Default> at layouts/default.vue            <Root>\n```\n\n## 引用文件\n若引用路径文件名字母大小与文件命名不一致，或多处引用路径大小不一致，vue会有警告⚠️","source":"_posts/about-vue.md","raw":"---\ntitle: Vue相关问题记录\ndate: 2018-08-15 22:52:55\ntags: Vue\ndescription: 记录工作中Vue项目遇到的问题及解决方案，持续更新\nkeywords: vue相关问题\ncategories: Vue\n---\n## Vues数据双向绑定实现\n[code](https://github.com/Faye0807/task/tree/master/fe/views/demo/vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%AE%9E%E7%8E%B0)\n\n## inupt输入框的`change`事件在失去焦点后触发  \n此时跟blur事件很像，查阅后\b的方案是将处理程序添加到input事件上面 [参考链接](https://forum.vuejs.org/t/v-on-change/8670)\n\n## vue input file 多次上传不触发change事件问题 \n有以下几种方法（[参考链接](https://www.cnblogs.com/exhuasted/p/6185874.html)）：\n- 清空input的value\b值\n- 替换掉原来的input 渲染一个新的input\n- 将input放到\b一个表单里，change事件触发时将表单reset\n- 替换原input，渲染新input并重新绑定change事件（这个方法对我有效）\n\n## Vue 父组件异步获取数据，子组件props获取不到\n由于我子组件需要拿到props后做数据处理，但发现无论是放到data，还是mounted，props里面值还是undefined；\n\n查阅后了解到，异步请求数据有关；解决办法就是：引用子组件时，v-if先判断先props是否有值，如下\n``` js\n<component-a v-if=\"dataList.length>0\" :prop-a=\"dataList\" />\n```\n\n## 事件修饰符\n事件修饰符不仅在绑定处理程序时候可以用，不绑定事件处理\b程序同样可用；比如阻止事件的传播\n```js\n<component-a @touch.stop />\n```\n\n## 深度作用选择器 `/deep/` or `>>>`\n当你的style标签添加`scoped` 使css有了作用域后，若想让自己的\bcss可以更深的控制元素样式，则可以使用`/deep/` or `>>>`; 比如你想在父组件更改子组件样式的时候，可能会需要这个选择器\n\n[参考链接](https://vue-loader-v14.vuejs.org/zh-cn/features/scoped-css.html)\n\n<!-- ## 组件标签上添加class、style 与 元素上添加class、style的区别\n\n```js\n<component-a class=\"class-a\" style=\"positon: absoult;color: #fff;\" />\n<div class=\"class-a\" style=\"positon: absoult;color: #fff;\" />\n``` -->\n\n## img 动态src属性值\n\n```js\n// 是加载不到图片的\n<img :src=\"flag ? './image/img.png' : './image.img2.png'\" />\n// 需要这样\n<img :src=\"flag ? require('./image/img.png') : require('./image.img2.png')\" />\n// 或者 将图片放到 static文件夹\n```\n[vue 动态加载图片src的解决办法](https://blog.csdn.net/keji_123/article/details/79977210)\n\n## v-for\n\n> 注意 :key 的值若不唯一\b会报错\n\n```js\n[Vue warn]: Duplicate keys detected: '{key}'. This may cause an update error.  found in  ---> <Anonymous>        <Nuxt>          <Default> at layouts/default.vue            <Root>\n```\n\n## 引用文件\n若引用路径文件名字母大小与文件命名不一致，或多处引用路径大小不一致，vue会有警告⚠️","slug":"about-vue","published":1,"updated":"2018-11-08T05:51:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7kpl02a000ijcs6v404sbkm","content":"<h2 id=\"Vues数据双向绑定实现\"><a href=\"#Vues数据双向绑定实现\" class=\"headerlink\" title=\"Vues数据双向绑定实现\"></a>Vues数据双向绑定实现</h2><p><a href=\"https://github.com/Faye0807/task/tree/master/fe/views/demo/vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%AE%9E%E7%8E%B0\" target=\"_blank\" rel=\"noopener\">code</a></p>\n<h2 id=\"inupt输入框的change事件在失去焦点后触发\"><a href=\"#inupt输入框的change事件在失去焦点后触发\" class=\"headerlink\" title=\"inupt输入框的change事件在失去焦点后触发\"></a>inupt输入框的<code>change</code>事件在失去焦点后触发</h2><p>此时跟blur事件很像，查阅后\b的方案是将处理程序添加到input事件上面 <a href=\"https://forum.vuejs.org/t/v-on-change/8670\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<h2 id=\"vue-input-file-多次上传不触发change事件问题\"><a href=\"#vue-input-file-多次上传不触发change事件问题\" class=\"headerlink\" title=\"vue input file 多次上传不触发change事件问题\"></a>vue input file 多次上传不触发change事件问题</h2><p>有以下几种方法（<a href=\"https://www.cnblogs.com/exhuasted/p/6185874.html\" target=\"_blank\" rel=\"noopener\">参考链接</a>）：</p>\n<ul>\n<li>清空input的value\b值</li>\n<li>替换掉原来的input 渲染一个新的input</li>\n<li>将input放到\b一个表单里，change事件触发时将表单reset</li>\n<li>替换原input，渲染新input并重新绑定change事件（这个方法对我有效）</li>\n</ul>\n<h2 id=\"Vue-父组件异步获取数据，子组件props获取不到\"><a href=\"#Vue-父组件异步获取数据，子组件props获取不到\" class=\"headerlink\" title=\"Vue 父组件异步获取数据，子组件props获取不到\"></a>Vue 父组件异步获取数据，子组件props获取不到</h2><p>由于我子组件需要拿到props后做数据处理，但发现无论是放到data，还是mounted，props里面值还是undefined；</p>\n<p>查阅后了解到，异步请求数据有关；解决办法就是：引用子组件时，v-if先判断先props是否有值，如下<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;component-a v-<span class=\"keyword\">if</span>=<span class=\"string\">\"dataList.length&gt;0\"</span> :prop-a=<span class=\"string\">\"dataList\"</span> /&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h2><p>事件修饰符不仅在绑定处理程序时候可以用，不绑定事件处理\b程序同样可用；比如阻止事件的传播<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;component-a @touch.stop /&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"深度作用选择器-deep-or-gt-gt-gt\"><a href=\"#深度作用选择器-deep-or-gt-gt-gt\" class=\"headerlink\" title=\"深度作用选择器 /deep/ or &gt;&gt;&gt;\"></a>深度作用选择器 <code>/deep/</code> or <code>&gt;&gt;&gt;</code></h2><p>当你的style标签添加<code>scoped</code> 使css有了作用域后，若想让自己的\bcss可以更深的控制元素样式，则可以使用<code>/deep/</code> or <code>&gt;&gt;&gt;</code>; 比如你想在父组件更改子组件样式的时候，可能会需要这个选择器</p>\n<p><a href=\"https://vue-loader-v14.vuejs.org/zh-cn/features/scoped-css.html\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<!-- ## 组件标签上添加class、style 与 元素上添加class、style的区别\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;component-a <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"class-a\"</span> style=<span class=\"string\">\"positon: absoult;color: #fff;\"</span> /&gt;</span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"class-a\"</span> style=<span class=\"string\">\"positon: absoult;color: #fff;\"</span> /&gt;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` --&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## img 动态src属性值</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"comment\">// 是加载不到图片的</span></span><br><span class=\"line\">&lt;img :src=<span class=\"string\">\"flag ? './image/img.png' : './image.img2.png'\"</span> /&gt;</span><br><span class=\"line\"><span class=\"comment\">// 需要这样</span></span><br><span class=\"line\">&lt;img :src=<span class=\"string\">\"flag ? require('./image/img.png') : require('./image.img2.png')\"</span> /&gt;</span><br><span class=\"line\"><span class=\"comment\">// 或者 将图片放到 static文件夹</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/keji_123/article/details/79977210\">vue 动态加载图片src的解决办法</a></p>\n<h2 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h2><blockquote>\n<p>注意 :key 的值若不唯一\b会报错</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Vue warn]: Duplicate keys detected: <span class=\"string\">'&#123;key&#125;'</span>. This may cause an update error.  found <span class=\"keyword\">in</span>  ---&gt; &lt;Anonymous&gt;        &lt;Nuxt&gt;          &lt;Default&gt; at layouts/default.vue            &lt;Root&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"引用文件\"><a href=\"#引用文件\" class=\"headerlink\" title=\"引用文件\"></a>引用文件</h2><p>若引用路径文件名字母大小与文件命名不一致，或多处引用路径大小不一致，vue会有警告⚠️</p>\n-->","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Vues数据双向绑定实现\"><a href=\"#Vues数据双向绑定实现\" class=\"headerlink\" title=\"Vues数据双向绑定实现\"></a>Vues数据双向绑定实现</h2><p><a href=\"https://github.com/Faye0807/task/tree/master/fe/views/demo/vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%AE%9E%E7%8E%B0\" target=\"_blank\" rel=\"noopener\">code</a></p>\n<h2 id=\"inupt输入框的change事件在失去焦点后触发\"><a href=\"#inupt输入框的change事件在失去焦点后触发\" class=\"headerlink\" title=\"inupt输入框的change事件在失去焦点后触发\"></a>inupt输入框的<code>change</code>事件在失去焦点后触发</h2><p>此时跟blur事件很像，查阅后\b的方案是将处理程序添加到input事件上面 <a href=\"https://forum.vuejs.org/t/v-on-change/8670\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<h2 id=\"vue-input-file-多次上传不触发change事件问题\"><a href=\"#vue-input-file-多次上传不触发change事件问题\" class=\"headerlink\" title=\"vue input file 多次上传不触发change事件问题\"></a>vue input file 多次上传不触发change事件问题</h2><p>有以下几种方法（<a href=\"https://www.cnblogs.com/exhuasted/p/6185874.html\" target=\"_blank\" rel=\"noopener\">参考链接</a>）：</p>\n<ul>\n<li>清空input的value\b值</li>\n<li>替换掉原来的input 渲染一个新的input</li>\n<li>将input放到\b一个表单里，change事件触发时将表单reset</li>\n<li>替换原input，渲染新input并重新绑定change事件（这个方法对我有效）</li>\n</ul>\n<h2 id=\"Vue-父组件异步获取数据，子组件props获取不到\"><a href=\"#Vue-父组件异步获取数据，子组件props获取不到\" class=\"headerlink\" title=\"Vue 父组件异步获取数据，子组件props获取不到\"></a>Vue 父组件异步获取数据，子组件props获取不到</h2><p>由于我子组件需要拿到props后做数据处理，但发现无论是放到data，还是mounted，props里面值还是undefined；</p>\n<p>查阅后了解到，异步请求数据有关；解决办法就是：引用子组件时，v-if先判断先props是否有值，如下<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;component-a v-<span class=\"keyword\">if</span>=<span class=\"string\">\"dataList.length&gt;0\"</span> :prop-a=<span class=\"string\">\"dataList\"</span> /&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h2><p>事件修饰符不仅在绑定处理程序时候可以用，不绑定事件处理\b程序同样可用；比如阻止事件的传播<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;component-a @touch.stop /&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"深度作用选择器-deep-or-gt-gt-gt\"><a href=\"#深度作用选择器-deep-or-gt-gt-gt\" class=\"headerlink\" title=\"深度作用选择器 /deep/ or &gt;&gt;&gt;\"></a>深度作用选择器 <code>/deep/</code> or <code>&gt;&gt;&gt;</code></h2><p>当你的style标签添加<code>scoped</code> 使css有了作用域后，若想让自己的\bcss可以更深的控制元素样式，则可以使用<code>/deep/</code> or <code>&gt;&gt;&gt;</code>; 比如你想在父组件更改子组件样式的时候，可能会需要这个选择器</p>\n<p><a href=\"https://vue-loader-v14.vuejs.org/zh-cn/features/scoped-css.html\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<!-- ## 组件标签上添加class、style 与 元素上添加class、style的区别\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;component-a <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"class-a\"</span> style=<span class=\"string\">\"positon: absoult;color: #fff;\"</span> /&gt;</span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"class-a\"</span> style=<span class=\"string\">\"positon: absoult;color: #fff;\"</span> /&gt;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` --&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## img 动态src属性值</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"comment\">// 是加载不到图片的</span></span><br><span class=\"line\">&lt;img :src=<span class=\"string\">\"flag ? './image/img.png' : './image.img2.png'\"</span> /&gt;</span><br><span class=\"line\"><span class=\"comment\">// 需要这样</span></span><br><span class=\"line\">&lt;img :src=<span class=\"string\">\"flag ? require('./image/img.png') : require('./image.img2.png')\"</span> /&gt;</span><br><span class=\"line\"><span class=\"comment\">// 或者 将图片放到 static文件夹</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/keji_123/article/details/79977210\">vue 动态加载图片src的解决办法</a></p>\n<h2 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h2><blockquote>\n<p>注意 :key 的值若不唯一\b会报错</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Vue warn]: Duplicate keys detected: <span class=\"string\">'&#123;key&#125;'</span>. This may cause an update error.  found <span class=\"keyword\">in</span>  ---&gt; &lt;Anonymous&gt;        &lt;Nuxt&gt;          &lt;Default&gt; at layouts/default.vue            &lt;Root&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"引用文件\"><a href=\"#引用文件\" class=\"headerlink\" title=\"引用文件\"></a>引用文件</h2><p>若引用路径文件名字母大小与文件命名不一致，或多处引用路径大小不一致，vue会有警告⚠️</p>\n-->"},{"title":"建立博客的过程","date":"2018-08-13T16:24:46.000Z","description":"通过hexo与码云pages建立自己的博客","keywords":"hexo gitee pages","_content":"> 参考： https://hexo.io/zh-cn/docs/\n## \b安装hexo\n```bash\n npm install -g hexo-cli\n```\n## 创建hexo项目\n```bash\nhexo init <folder>\ncd <folder>\nnpm install\n```\n## 发布到giteePages相关配置\n\n发布到giteePage需要修改根目录下_config.yml配置文件\n\n```\b YAML\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com/child\nroot: /child/\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: https://gitee.com/\b你的项目/地址Url.git\n```\n\n## 打开归档、关于、分类等标签页\n> 这些可以查阅even主题的文档 ： [https://github.com/ahonn/hexo-theme-even/wiki](https://github.com/ahonn/hexo-theme-even/wiki)\n\nEG： 新建分类标签页\n```bash\nhexo new page categories\n```\nEG：新建文章\n\n```bash\nhexo new [layout] <title>\n```\n默认``layout``是 ``post``；\n\n预计新建文章都是post的布局\n\n## 注意点\n\n- 文章属性 ``description`` 如果是中文，需要用引号，否则这页渲染不到\n；后来发现也非必须；也不知当初那个错怎么触发的\n\n给一篇文章配置多个tag\n`tags: [vue, js, html]`\n\n## 发布\n\n### clean\n清除缓存文件 (db.json) 和已生成的静态文件 (public)。\n\n在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。\n```bash\nhexo clean\n```\n### deploy\n部署网站\n```bash\nhexo deploy\n```\n\n|参数|描述|\n|:--:|:--:|\n|-g|--generate\t部署之前预先生成静态文件|\n该命令可以简写为：\n```bash\nhexo d\n```\n## 阅读次数添加\n参考[https://lfwen.site/2016/05/31/add-count-for-hexo-next/](https://lfwen.site/2016/05/31/add-count-for-hexo-next/)\n\n## 百度统计添加\n参考 [https://www.jianshu.com/p/6eb068a68b17](https://www.jianshu.com/p/6eb068a68b17)","source":"_posts/hello-world.md","raw":"---\ntitle: 建立博客的过程\ndate: 2018-08-14 00:24:46\ndescription: 通过hexo与码云pages建立自己的博客\nkeywords: hexo gitee pages\ntag: 创建博客\ncategories: 博客相关\n---\n> 参考： https://hexo.io/zh-cn/docs/\n## \b安装hexo\n```bash\n npm install -g hexo-cli\n```\n## 创建hexo项目\n```bash\nhexo init <folder>\ncd <folder>\nnpm install\n```\n## 发布到giteePages相关配置\n\n发布到giteePage需要修改根目录下_config.yml配置文件\n\n```\b YAML\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com/child\nroot: /child/\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: https://gitee.com/\b你的项目/地址Url.git\n```\n\n## 打开归档、关于、分类等标签页\n> 这些可以查阅even主题的文档 ： [https://github.com/ahonn/hexo-theme-even/wiki](https://github.com/ahonn/hexo-theme-even/wiki)\n\nEG： 新建分类标签页\n```bash\nhexo new page categories\n```\nEG：新建文章\n\n```bash\nhexo new [layout] <title>\n```\n默认``layout``是 ``post``；\n\n预计新建文章都是post的布局\n\n## 注意点\n\n- 文章属性 ``description`` 如果是中文，需要用引号，否则这页渲染不到\n；后来发现也非必须；也不知当初那个错怎么触发的\n\n给一篇文章配置多个tag\n`tags: [vue, js, html]`\n\n## 发布\n\n### clean\n清除缓存文件 (db.json) 和已生成的静态文件 (public)。\n\n在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。\n```bash\nhexo clean\n```\n### deploy\n部署网站\n```bash\nhexo deploy\n```\n\n|参数|描述|\n|:--:|:--:|\n|-g|--generate\t部署之前预先生成静态文件|\n该命令可以简写为：\n```bash\nhexo d\n```\n## 阅读次数添加\n参考[https://lfwen.site/2016/05/31/add-count-for-hexo-next/](https://lfwen.site/2016/05/31/add-count-for-hexo-next/)\n\n## 百度统计添加\n参考 [https://www.jianshu.com/p/6eb068a68b17](https://www.jianshu.com/p/6eb068a68b17)","slug":"hello-world","published":1,"updated":"2018-08-15T16:39:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7kpl02c000jjcs653yz1vx7","content":"<blockquote>\n<p>参考： <a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/docs/</a></p>\n</blockquote>\n<h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"\b安装hexo\"></a>\b安装hexo</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建hexo项目\"><a href=\"#创建hexo项目\" class=\"headerlink\" title=\"创建hexo项目\"></a>创建hexo项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h2 id=\"发布到giteePages相关配置\"><a href=\"#发布到giteePages相关配置\" class=\"headerlink\" title=\"发布到giteePages相关配置\"></a>发布到giteePages相关配置</h2><p>发布到giteePage需要修改根目录下_config.yml配置文件</p>\n<figure class=\"highlight plain\"><figcaption><span>YAML</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># URL</span><br><span class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class=\"line\">url: http://yoursite.com/child</span><br><span class=\"line\">root: /child/</span><br><span class=\"line\">permalink: :year/:month/:day/:title/</span><br><span class=\"line\">permalink_defaults:</span><br><span class=\"line\"></span><br><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://gitee.com/\b你的项目/地址Url.git</span><br></pre></td></tr></table></figure>\n<h2 id=\"打开归档、关于、分类等标签页\"><a href=\"#打开归档、关于、分类等标签页\" class=\"headerlink\" title=\"打开归档、关于、分类等标签页\"></a>打开归档、关于、分类等标签页</h2><blockquote>\n<p>这些可以查阅even主题的文档 ： <a href=\"https://github.com/ahonn/hexo-theme-even/wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/ahonn/hexo-theme-even/wiki</a></p>\n</blockquote>\n<p>EG： 新建分类标签页<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure></p>\n<p>EG：新建文章</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<p>默认<code>layout</code>是 <code>post</code>；</p>\n<p>预计新建文章都是post的布局</p>\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><ul>\n<li>文章属性 <code>description</code> 如果是中文，需要用引号，否则这页渲染不到<br>；后来发现也非必须；也不知当初那个错怎么触发的</li>\n</ul>\n<p>给一篇文章配置多个tag<br><code>tags: [vue, js, html]</code></p>\n<h2 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h2><h3 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h3><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p>\n<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h3><p>部署网站<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-g</td>\n<td style=\"text-align:center\">–generate    部署之前预先生成静态文件</td>\n</tr>\n</tbody>\n</table>\n<p>该命令可以简写为：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"阅读次数添加\"><a href=\"#阅读次数添加\" class=\"headerlink\" title=\"阅读次数添加\"></a>阅读次数添加</h2><p>参考<a href=\"https://lfwen.site/2016/05/31/add-count-for-hexo-next/\" target=\"_blank\" rel=\"noopener\">https://lfwen.site/2016/05/31/add-count-for-hexo-next/</a></p>\n<h2 id=\"百度统计添加\"><a href=\"#百度统计添加\" class=\"headerlink\" title=\"百度统计添加\"></a>百度统计添加</h2><p>参考 <a href=\"https://www.jianshu.com/p/6eb068a68b17\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/6eb068a68b17</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>参考： <a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/docs/</a></p>\n</blockquote>\n<h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"\b安装hexo\"></a>\b安装hexo</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建hexo项目\"><a href=\"#创建hexo项目\" class=\"headerlink\" title=\"创建hexo项目\"></a>创建hexo项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h2 id=\"发布到giteePages相关配置\"><a href=\"#发布到giteePages相关配置\" class=\"headerlink\" title=\"发布到giteePages相关配置\"></a>发布到giteePages相关配置</h2><p>发布到giteePage需要修改根目录下_config.yml配置文件</p>\n<figure class=\"highlight plain\"><figcaption><span>YAML</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># URL</span><br><span class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class=\"line\">url: http://yoursite.com/child</span><br><span class=\"line\">root: /child/</span><br><span class=\"line\">permalink: :year/:month/:day/:title/</span><br><span class=\"line\">permalink_defaults:</span><br><span class=\"line\"></span><br><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://gitee.com/\b你的项目/地址Url.git</span><br></pre></td></tr></table></figure>\n<h2 id=\"打开归档、关于、分类等标签页\"><a href=\"#打开归档、关于、分类等标签页\" class=\"headerlink\" title=\"打开归档、关于、分类等标签页\"></a>打开归档、关于、分类等标签页</h2><blockquote>\n<p>这些可以查阅even主题的文档 ： <a href=\"https://github.com/ahonn/hexo-theme-even/wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/ahonn/hexo-theme-even/wiki</a></p>\n</blockquote>\n<p>EG： 新建分类标签页<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure></p>\n<p>EG：新建文章</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<p>默认<code>layout</code>是 <code>post</code>；</p>\n<p>预计新建文章都是post的布局</p>\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><ul>\n<li>文章属性 <code>description</code> 如果是中文，需要用引号，否则这页渲染不到<br>；后来发现也非必须；也不知当初那个错怎么触发的</li>\n</ul>\n<p>给一篇文章配置多个tag<br><code>tags: [vue, js, html]</code></p>\n<h2 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h2><h3 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h3><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p>\n<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h3><p>部署网站<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-g</td>\n<td style=\"text-align:center\">–generate    部署之前预先生成静态文件</td>\n</tr>\n</tbody>\n</table>\n<p>该命令可以简写为：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"阅读次数添加\"><a href=\"#阅读次数添加\" class=\"headerlink\" title=\"阅读次数添加\"></a>阅读次数添加</h2><p>参考<a href=\"https://lfwen.site/2016/05/31/add-count-for-hexo-next/\" target=\"_blank\" rel=\"noopener\">https://lfwen.site/2016/05/31/add-count-for-hexo-next/</a></p>\n<h2 id=\"百度统计添加\"><a href=\"#百度统计添加\" class=\"headerlink\" title=\"百度统计添加\"></a>百度统计添加</h2><p>参考 <a href=\"https://www.jianshu.com/p/6eb068a68b17\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/6eb068a68b17</a></p>\n"},{"title":"cookie与HTML5离线存储等","date":"2018-10-16T08:10:08.000Z","description":"cookie、HTML5离线存储、localStorage、sessionStorage、","keywords":"HTML","_content":"# cookies\n\n- 读取cookie `document.cookie`\n- 设置 cookie\n  - name 设置的时候需要 `encodeURIComponent`；同样的读取的时候 `decodeURIComponent`\n  - value 设置的时候需要 `encodeURIComponent`；同样的读取的时候 `decodeURIComponent`\n  - domain 可访问该 cookie 字段的域名\n  - path 可访问该 cookie 字段的 路径（比如 `/path` 则path路径下及其子路径都可以访问到该 cookie字段）\n  - max-age 单位 s 表示多少\b秒后该cookie失效\n    - -1 \b默认值 表示会话结束即失效\n    - 0 即时失效即表示删除该cookie\n  - expires 指定cookie的生存期 （未来一个用毫秒数表示的日期）\n  - secure 表示是否安全传输（非键值对 即只要存在改键 即表示HTTPS的时候才会传输）\n  - HttpOnly 如果这个属性设置为true，就不能通过js脚本来获取cookie的值，能有效的防止xss攻击 (该属性只在服务端使用，js控制不了该属性)\n\n  # Storage\n  - 只能存储字符串 (可以结合 \bJSON)\n  - 属性\n    - length 键数\n  - 方法\n    - setItem('key', value) 添加属性\n    - getItem('key') 获取属性值\n    - removeItem('key') 删除属性\n    - key(index) 获取index处的键的名字\n    - clear() 清除所有属性\n  localStorage 和 sessionStorage 都是 Storage的实例，所以 localStorage 和 sessionStorage 继承其方法\b\n\n\n  # localStorage\n  在 HTML5 取代了 globalStorage\n  - 跨越会话的存储\n  - 只要没有被 removeItem 等删除，也没有被用户清除缓存，则localStorage数据将一直存储在磁盘上\n\n  # sessionStorage\n  - 数据只存储到会话关闭\n  - 主要用于存储会话 小段数据的存储\n  - 存储到 sessionStorage 的数据可以跨越页面刷新（同一个会话窗口） 而存在\n","source":"_posts/cookie与HTML5离线存储等.md","raw":"---\ntitle: cookie与HTML5离线存储等\ndate: 2018-10-16 16:10:08\ntags: HTML\ndescription: cookie、HTML5离线存储、localStorage、sessionStorage、\nkeywords: HTML\ncategories: HTML\n---\n# cookies\n\n- 读取cookie `document.cookie`\n- 设置 cookie\n  - name 设置的时候需要 `encodeURIComponent`；同样的读取的时候 `decodeURIComponent`\n  - value 设置的时候需要 `encodeURIComponent`；同样的读取的时候 `decodeURIComponent`\n  - domain 可访问该 cookie 字段的域名\n  - path 可访问该 cookie 字段的 路径（比如 `/path` 则path路径下及其子路径都可以访问到该 cookie字段）\n  - max-age 单位 s 表示多少\b秒后该cookie失效\n    - -1 \b默认值 表示会话结束即失效\n    - 0 即时失效即表示删除该cookie\n  - expires 指定cookie的生存期 （未来一个用毫秒数表示的日期）\n  - secure 表示是否安全传输（非键值对 即只要存在改键 即表示HTTPS的时候才会传输）\n  - HttpOnly 如果这个属性设置为true，就不能通过js脚本来获取cookie的值，能有效的防止xss攻击 (该属性只在服务端使用，js控制不了该属性)\n\n  # Storage\n  - 只能存储字符串 (可以结合 \bJSON)\n  - 属性\n    - length 键数\n  - 方法\n    - setItem('key', value) 添加属性\n    - getItem('key') 获取属性值\n    - removeItem('key') 删除属性\n    - key(index) 获取index处的键的名字\n    - clear() 清除所有属性\n  localStorage 和 sessionStorage 都是 Storage的实例，所以 localStorage 和 sessionStorage 继承其方法\b\n\n\n  # localStorage\n  在 HTML5 取代了 globalStorage\n  - 跨越会话的存储\n  - 只要没有被 removeItem 等删除，也没有被用户清除缓存，则localStorage数据将一直存储在磁盘上\n\n  # sessionStorage\n  - 数据只存储到会话关闭\n  - 主要用于存储会话 小段数据的存储\n  - 存储到 sessionStorage 的数据可以跨越页面刷新（同一个会话窗口） 而存在\n","slug":"cookie与HTML5离线存储等","published":1,"updated":"2018-10-18T02:29:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7kpl02e000njcs6r7thz3si","content":"<h1 id=\"cookies\"><a href=\"#cookies\" class=\"headerlink\" title=\"cookies\"></a>cookies</h1><ul>\n<li>读取cookie <code>document.cookie</code></li>\n<li><p>设置 cookie</p>\n<ul>\n<li>name 设置的时候需要 <code>encodeURIComponent</code>；同样的读取的时候 <code>decodeURIComponent</code></li>\n<li>value 设置的时候需要 <code>encodeURIComponent</code>；同样的读取的时候 <code>decodeURIComponent</code></li>\n<li>domain 可访问该 cookie 字段的域名</li>\n<li>path 可访问该 cookie 字段的 路径（比如 <code>/path</code> 则path路径下及其子路径都可以访问到该 cookie字段）</li>\n<li>max-age 单位 s 表示多少\b秒后该cookie失效<ul>\n<li>-1 \b默认值 表示会话结束即失效</li>\n<li>0 即时失效即表示删除该cookie</li>\n</ul>\n</li>\n<li>expires 指定cookie的生存期 （未来一个用毫秒数表示的日期）</li>\n<li>secure 表示是否安全传输（非键值对 即只要存在改键 即表示HTTPS的时候才会传输）</li>\n<li>HttpOnly 如果这个属性设置为true，就不能通过js脚本来获取cookie的值，能有效的防止xss攻击 (该属性只在服务端使用，js控制不了该属性)</li>\n</ul>\n<h1 id=\"Storage\"><a href=\"#Storage\" class=\"headerlink\" title=\"Storage\"></a>Storage</h1><ul>\n<li>只能存储字符串 (可以结合 \bJSON)</li>\n<li>属性<ul>\n<li>length 键数</li>\n</ul>\n</li>\n<li>方法<ul>\n<li>setItem(‘key’, value) 添加属性</li>\n<li>getItem(‘key’) 获取属性值</li>\n<li>removeItem(‘key’) 删除属性</li>\n<li>key(index) 获取index处的键的名字</li>\n<li>clear() 清除所有属性<br>localStorage 和 sessionStorage 都是 Storage的实例，所以 localStorage 和 sessionStorage 继承其方法\b</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"localStorage\"><a href=\"#localStorage\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h1><p>  在 HTML5 取代了 globalStorage</p>\n<ul>\n<li>跨越会话的存储</li>\n<li><p>只要没有被 removeItem 等删除，也没有被用户清除缓存，则localStorage数据将一直存储在磁盘上</p>\n<h1 id=\"sessionStorage\"><a href=\"#sessionStorage\" class=\"headerlink\" title=\"sessionStorage\"></a>sessionStorage</h1></li>\n<li>数据只存储到会话关闭</li>\n<li>主要用于存储会话 小段数据的存储</li>\n<li>存储到 sessionStorage 的数据可以跨越页面刷新（同一个会话窗口） 而存在</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"cookies\"><a href=\"#cookies\" class=\"headerlink\" title=\"cookies\"></a>cookies</h1><ul>\n<li>读取cookie <code>document.cookie</code></li>\n<li><p>设置 cookie</p>\n<ul>\n<li>name 设置的时候需要 <code>encodeURIComponent</code>；同样的读取的时候 <code>decodeURIComponent</code></li>\n<li>value 设置的时候需要 <code>encodeURIComponent</code>；同样的读取的时候 <code>decodeURIComponent</code></li>\n<li>domain 可访问该 cookie 字段的域名</li>\n<li>path 可访问该 cookie 字段的 路径（比如 <code>/path</code> 则path路径下及其子路径都可以访问到该 cookie字段）</li>\n<li>max-age 单位 s 表示多少\b秒后该cookie失效<ul>\n<li>-1 \b默认值 表示会话结束即失效</li>\n<li>0 即时失效即表示删除该cookie</li>\n</ul>\n</li>\n<li>expires 指定cookie的生存期 （未来一个用毫秒数表示的日期）</li>\n<li>secure 表示是否安全传输（非键值对 即只要存在改键 即表示HTTPS的时候才会传输）</li>\n<li>HttpOnly 如果这个属性设置为true，就不能通过js脚本来获取cookie的值，能有效的防止xss攻击 (该属性只在服务端使用，js控制不了该属性)</li>\n</ul>\n<h1 id=\"Storage\"><a href=\"#Storage\" class=\"headerlink\" title=\"Storage\"></a>Storage</h1><ul>\n<li>只能存储字符串 (可以结合 \bJSON)</li>\n<li>属性<ul>\n<li>length 键数</li>\n</ul>\n</li>\n<li>方法<ul>\n<li>setItem(‘key’, value) 添加属性</li>\n<li>getItem(‘key’) 获取属性值</li>\n<li>removeItem(‘key’) 删除属性</li>\n<li>key(index) 获取index处的键的名字</li>\n<li>clear() 清除所有属性<br>localStorage 和 sessionStorage 都是 Storage的实例，所以 localStorage 和 sessionStorage 继承其方法\b</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"localStorage\"><a href=\"#localStorage\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h1><p>  在 HTML5 取代了 globalStorage</p>\n<ul>\n<li>跨越会话的存储</li>\n<li><p>只要没有被 removeItem 等删除，也没有被用户清除缓存，则localStorage数据将一直存储在磁盘上</p>\n<h1 id=\"sessionStorage\"><a href=\"#sessionStorage\" class=\"headerlink\" title=\"sessionStorage\"></a>sessionStorage</h1></li>\n<li>数据只存储到会话关闭</li>\n<li>主要用于存储会话 小段数据的存储</li>\n<li>存储到 sessionStorage 的数据可以跨越页面刷新（同一个会话窗口） 而存在</li>\n</ul>\n"},{"title":"animation与transform、transition","date":"2018-10-11T02:14:08.000Z","description":"animation与transform、transition","keywords":"animation与transform、transition","_content":"# transform 变换\n## 倾斜：skew(x-angle,y-angle),skewX(angle),skewY(angle)\n- skewX(angle)：元素高不变，x方向即宽被拉长\n- skewY(angle)：元素宽不变，y方向即高被拉长\n- skew(x-angle,y-angle)是前两个的结合，\n- skew(x deg,-x deg)会产生一个逆时针旋转x度且被放大的效果\n- 角度值可以是负值，skewX(10deg)与skewX(-10deg)倾斜角度关于y轴对称；\n- skewX(90deg)、skewX(-90deg)、skewX(270deg) 元素消失\n- skewX(91deg) == skewX(-89deg)\n## 示例\n原图\n\n![原图](https://static.oschina.net/uploads/space/2018/0304/201402_dIRA_2994006.png)\n\ntransform:skewX(30deg)\n\n![skewX(30deg)](https://static.oschina.net/uploads/space/2018/0304/185713_dZOS_2994006.png)\n\ntransform:skewY(30deg)\n\n![skewY(30deg)](https://static.oschina.net/uploads/space/2018/0304/185928_Yinh_2994006.png)\n\ntransform:skew(30deg,-30deg)\n\n![skew(30deg,-30deg)](https://static.oschina.net/uploads/space/2018/0304/190910_UAS2_2994006.png)\n\nransform:skew(-30deg,30deg)\n\n![skew(-30deg,30deg)](https://static.oschina.net/uploads/space/2018/0304/190946_zIRD_2994006.png)\n\n## 旋转：rotate(angle),rotateX(angle),rotateY(angle),rotateZ(angle)（与rotate(angle)效果相同）\n绕对应轴旋转\nrotate() == rotateZ() 在平面内顺时针旋转\n## 缩放：scale(x,y),scaleX(x),scaleY(y),scaleZ(z)\n沿对应轴方向缩放（根据变换原点不同，方向不同；比如origin是left的时候 x轴方向的缩放是向右缩放；若默认在元素中心，则x轴的缩放是从中心向两边同时缩放）\nz方向的缩放2d看不出效果\n接受值：数值 不接受百分比\n## 移动：translate(x,y), translateX(x), translateY(y), translateZ(z), translate3d(x,y,z)\n沿对应轴方向位移\nz方向2d变换看不出效果\n接受值： 30px或者百分比（百分比是以自身宽高为基数）\n## transform-origin：更改一个元素变形的原点\ntransform-origin: left;\ntransform-origin: 20px;\ntransform-origin: 40px  left;(水平，垂直)\n\n# transition 过渡\n> [参考](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions)\n\n```css\ntransition: <property属性名> <duration过渡时长> <timing-function过渡时间线> <delay\b>;\n```\n- transition-property: width, left;\n- transition-timing-function\n  - ease 中间快两端慢\n  - linear 匀速\n  - step-end 直接跳到最后一帧\n  - step(4,end) 分四步完成过渡\n- transition-duration: 3s\n- transition-delay: 3s\n可以合并写多个属性\n\n```css\ntransition:width 2s, height 2s;\n```\n\n# animation 动画\n> [参考](http://www.runoob.com/cssref/css3-pr-animation.html)\n\n```css\nanimation: name duration timing-function delay iteration-count direction fill-mode play-state;\n```\n\n- animation-name\t指定要绑定到选择器的关键帧的名称\n  - 默认值：none\n- animation-duration\t动画指定需要多少秒或毫秒完成\n  - 3s\n  \b- 默认 0\n- animation-timing-function\t设置动画将如何完成一个周期\n  - linear 匀速\n  - ease 默认 中间快两边慢\n  - ease-in 低速开始\n  - ease-out 低速结束\n  - ease-in-out 低俗开始，低速结束（与ease区别大概是中间速度没有ease高）\n  - cubic-bezier(n,n,n,n) n是0-1的值\n- animation-delay\t设置动画在启动前的延迟间隔。\n  - 3s\n  -\b 默认 0\n- animation-iteration-count\t定义动画的播放次数。 \n  - 默认 1\n  - n 整数表示播放n次\n  - infinite 无限循环播放\n- animation-direction\t指定是否应该轮流反向播放动画。\n  - normal 默认值\n  - reverse 方向播放\n  - alternate 在奇数次 正常播放，在偶数次 反向播放\n  - alternate-reverse 在偶数次正常播放，在奇数次 反向播放\n  - initial 设置该属性为他的默认值\n  - inherit\n- animation-fill-mode\t规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式。\n  - none 默认 不会应用任何样式（其实就是在动画结束后，画面回到动画的第一帧\n  - forwards 动画结束后，停留在最后一帧\n  - backwards 动画结束后，停留到动画开始的第一帧\n  - both forwards和backwards两个方向上扩展动画属性\n- animation-play-state\t指定动画是否正在运行或已暂停。\n  - running 默认 运行\n  - paused 暂停 当属性值为paused时，动画停留在被暂停的那一帧\n- initial\t设置属性为其默认值。 阅读关于 initial的介绍。\n- inherit\t从父元素继承属性。 阅读关于 initinherital的介绍。","source":"_posts/animation与transform.md","raw":"---\ntitle: animation与transform、transition\ndate: 2018-10-11 10:14:08\ntags: CSS\ndescription: animation与transform、transition\ncategories: CSS\nkeywords: animation与transform、transition\n---\n# transform 变换\n## 倾斜：skew(x-angle,y-angle),skewX(angle),skewY(angle)\n- skewX(angle)：元素高不变，x方向即宽被拉长\n- skewY(angle)：元素宽不变，y方向即高被拉长\n- skew(x-angle,y-angle)是前两个的结合，\n- skew(x deg,-x deg)会产生一个逆时针旋转x度且被放大的效果\n- 角度值可以是负值，skewX(10deg)与skewX(-10deg)倾斜角度关于y轴对称；\n- skewX(90deg)、skewX(-90deg)、skewX(270deg) 元素消失\n- skewX(91deg) == skewX(-89deg)\n## 示例\n原图\n\n![原图](https://static.oschina.net/uploads/space/2018/0304/201402_dIRA_2994006.png)\n\ntransform:skewX(30deg)\n\n![skewX(30deg)](https://static.oschina.net/uploads/space/2018/0304/185713_dZOS_2994006.png)\n\ntransform:skewY(30deg)\n\n![skewY(30deg)](https://static.oschina.net/uploads/space/2018/0304/185928_Yinh_2994006.png)\n\ntransform:skew(30deg,-30deg)\n\n![skew(30deg,-30deg)](https://static.oschina.net/uploads/space/2018/0304/190910_UAS2_2994006.png)\n\nransform:skew(-30deg,30deg)\n\n![skew(-30deg,30deg)](https://static.oschina.net/uploads/space/2018/0304/190946_zIRD_2994006.png)\n\n## 旋转：rotate(angle),rotateX(angle),rotateY(angle),rotateZ(angle)（与rotate(angle)效果相同）\n绕对应轴旋转\nrotate() == rotateZ() 在平面内顺时针旋转\n## 缩放：scale(x,y),scaleX(x),scaleY(y),scaleZ(z)\n沿对应轴方向缩放（根据变换原点不同，方向不同；比如origin是left的时候 x轴方向的缩放是向右缩放；若默认在元素中心，则x轴的缩放是从中心向两边同时缩放）\nz方向的缩放2d看不出效果\n接受值：数值 不接受百分比\n## 移动：translate(x,y), translateX(x), translateY(y), translateZ(z), translate3d(x,y,z)\n沿对应轴方向位移\nz方向2d变换看不出效果\n接受值： 30px或者百分比（百分比是以自身宽高为基数）\n## transform-origin：更改一个元素变形的原点\ntransform-origin: left;\ntransform-origin: 20px;\ntransform-origin: 40px  left;(水平，垂直)\n\n# transition 过渡\n> [参考](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions)\n\n```css\ntransition: <property属性名> <duration过渡时长> <timing-function过渡时间线> <delay\b>;\n```\n- transition-property: width, left;\n- transition-timing-function\n  - ease 中间快两端慢\n  - linear 匀速\n  - step-end 直接跳到最后一帧\n  - step(4,end) 分四步完成过渡\n- transition-duration: 3s\n- transition-delay: 3s\n可以合并写多个属性\n\n```css\ntransition:width 2s, height 2s;\n```\n\n# animation 动画\n> [参考](http://www.runoob.com/cssref/css3-pr-animation.html)\n\n```css\nanimation: name duration timing-function delay iteration-count direction fill-mode play-state;\n```\n\n- animation-name\t指定要绑定到选择器的关键帧的名称\n  - 默认值：none\n- animation-duration\t动画指定需要多少秒或毫秒完成\n  - 3s\n  \b- 默认 0\n- animation-timing-function\t设置动画将如何完成一个周期\n  - linear 匀速\n  - ease 默认 中间快两边慢\n  - ease-in 低速开始\n  - ease-out 低速结束\n  - ease-in-out 低俗开始，低速结束（与ease区别大概是中间速度没有ease高）\n  - cubic-bezier(n,n,n,n) n是0-1的值\n- animation-delay\t设置动画在启动前的延迟间隔。\n  - 3s\n  -\b 默认 0\n- animation-iteration-count\t定义动画的播放次数。 \n  - 默认 1\n  - n 整数表示播放n次\n  - infinite 无限循环播放\n- animation-direction\t指定是否应该轮流反向播放动画。\n  - normal 默认值\n  - reverse 方向播放\n  - alternate 在奇数次 正常播放，在偶数次 反向播放\n  - alternate-reverse 在偶数次正常播放，在奇数次 反向播放\n  - initial 设置该属性为他的默认值\n  - inherit\n- animation-fill-mode\t规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式。\n  - none 默认 不会应用任何样式（其实就是在动画结束后，画面回到动画的第一帧\n  - forwards 动画结束后，停留在最后一帧\n  - backwards 动画结束后，停留到动画开始的第一帧\n  - both forwards和backwards两个方向上扩展动画属性\n- animation-play-state\t指定动画是否正在运行或已暂停。\n  - running 默认 运行\n  - paused 暂停 当属性值为paused时，动画停留在被暂停的那一帧\n- initial\t设置属性为其默认值。 阅读关于 initial的介绍。\n- inherit\t从父元素继承属性。 阅读关于 initinherital的介绍。","slug":"animation与transform","published":1,"updated":"2018-10-11T07:52:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7kpl02f000pjcs6memqeg8b","content":"<h1 id=\"transform-变换\"><a href=\"#transform-变换\" class=\"headerlink\" title=\"transform 变换\"></a>transform 变换</h1><h2 id=\"倾斜：skew-x-angle-y-angle-skewX-angle-skewY-angle\"><a href=\"#倾斜：skew-x-angle-y-angle-skewX-angle-skewY-angle\" class=\"headerlink\" title=\"倾斜：skew(x-angle,y-angle),skewX(angle),skewY(angle)\"></a>倾斜：skew(x-angle,y-angle),skewX(angle),skewY(angle)</h2><ul>\n<li>skewX(angle)：元素高不变，x方向即宽被拉长</li>\n<li>skewY(angle)：元素宽不变，y方向即高被拉长</li>\n<li>skew(x-angle,y-angle)是前两个的结合，</li>\n<li>skew(x deg,-x deg)会产生一个逆时针旋转x度且被放大的效果</li>\n<li>角度值可以是负值，skewX(10deg)与skewX(-10deg)倾斜角度关于y轴对称；</li>\n<li>skewX(90deg)、skewX(-90deg)、skewX(270deg) 元素消失</li>\n<li>skewX(91deg) == skewX(-89deg)<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2>原图</li>\n</ul>\n<p><img src=\"https://static.oschina.net/uploads/space/2018/0304/201402_dIRA_2994006.png\" alt=\"原图\"></p>\n<p>transform:skewX(30deg)</p>\n<p><img src=\"https://static.oschina.net/uploads/space/2018/0304/185713_dZOS_2994006.png\" alt=\"skewX(30deg)\"></p>\n<p>transform:skewY(30deg)</p>\n<p><img src=\"https://static.oschina.net/uploads/space/2018/0304/185928_Yinh_2994006.png\" alt=\"skewY(30deg)\"></p>\n<p>transform:skew(30deg,-30deg)</p>\n<p><img src=\"https://static.oschina.net/uploads/space/2018/0304/190910_UAS2_2994006.png\" alt=\"skew(30deg,-30deg)\"></p>\n<p>ransform:skew(-30deg,30deg)</p>\n<p><img src=\"https://static.oschina.net/uploads/space/2018/0304/190946_zIRD_2994006.png\" alt=\"skew(-30deg,30deg)\"></p>\n<h2 id=\"旋转：rotate-angle-rotateX-angle-rotateY-angle-rotateZ-angle-（与rotate-angle-效果相同）\"><a href=\"#旋转：rotate-angle-rotateX-angle-rotateY-angle-rotateZ-angle-（与rotate-angle-效果相同）\" class=\"headerlink\" title=\"旋转：rotate(angle),rotateX(angle),rotateY(angle),rotateZ(angle)（与rotate(angle)效果相同）\"></a>旋转：rotate(angle),rotateX(angle),rotateY(angle),rotateZ(angle)（与rotate(angle)效果相同）</h2><p>绕对应轴旋转<br>rotate() == rotateZ() 在平面内顺时针旋转</p>\n<h2 id=\"缩放：scale-x-y-scaleX-x-scaleY-y-scaleZ-z\"><a href=\"#缩放：scale-x-y-scaleX-x-scaleY-y-scaleZ-z\" class=\"headerlink\" title=\"缩放：scale(x,y),scaleX(x),scaleY(y),scaleZ(z)\"></a>缩放：scale(x,y),scaleX(x),scaleY(y),scaleZ(z)</h2><p>沿对应轴方向缩放（根据变换原点不同，方向不同；比如origin是left的时候 x轴方向的缩放是向右缩放；若默认在元素中心，则x轴的缩放是从中心向两边同时缩放）<br>z方向的缩放2d看不出效果<br>接受值：数值 不接受百分比</p>\n<h2 id=\"移动：translate-x-y-translateX-x-translateY-y-translateZ-z-translate3d-x-y-z\"><a href=\"#移动：translate-x-y-translateX-x-translateY-y-translateZ-z-translate3d-x-y-z\" class=\"headerlink\" title=\"移动：translate(x,y), translateX(x), translateY(y), translateZ(z), translate3d(x,y,z)\"></a>移动：translate(x,y), translateX(x), translateY(y), translateZ(z), translate3d(x,y,z)</h2><p>沿对应轴方向位移<br>z方向2d变换看不出效果<br>接受值： 30px或者百分比（百分比是以自身宽高为基数）</p>\n<h2 id=\"transform-origin：更改一个元素变形的原点\"><a href=\"#transform-origin：更改一个元素变形的原点\" class=\"headerlink\" title=\"transform-origin：更改一个元素变形的原点\"></a>transform-origin：更改一个元素变形的原点</h2><p>transform-origin: left;<br>transform-origin: 20px;<br>transform-origin: 40px  left;(水平，垂直)</p>\n<h1 id=\"transition-过渡\"><a href=\"#transition-过渡\" class=\"headerlink\" title=\"transition 过渡\"></a>transition 过渡</h1><blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transition</span>: &lt;<span class=\"selector-tag\">property</span>属性名&gt; &lt;<span class=\"selector-tag\">duration</span>过渡时长&gt; &lt;<span class=\"selector-tag\">timing-function</span>过渡时间线&gt; &lt;<span class=\"selector-tag\">delay</span>\b&gt;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>transition-property: width, left;</li>\n<li>transition-timing-function<ul>\n<li>ease 中间快两端慢</li>\n<li>linear 匀速</li>\n<li>step-end 直接跳到最后一帧</li>\n<li>step(4,end) 分四步完成过渡</li>\n</ul>\n</li>\n<li>transition-duration: 3s</li>\n<li>transition-delay: 3s<br>可以合并写多个属性</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transition</span><span class=\"selector-pseudo\">:width</span> 2<span class=\"selector-tag\">s</span>, <span class=\"selector-tag\">height</span> 2<span class=\"selector-tag\">s</span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"animation-动画\"><a href=\"#animation-动画\" class=\"headerlink\" title=\"animation 动画\"></a>animation 动画</h1><blockquote>\n<p><a href=\"http://www.runoob.com/cssref/css3-pr-animation.html\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">animation</span>: <span class=\"selector-tag\">name</span> <span class=\"selector-tag\">duration</span> <span class=\"selector-tag\">timing-function</span> <span class=\"selector-tag\">delay</span> <span class=\"selector-tag\">iteration-count</span> <span class=\"selector-tag\">direction</span> <span class=\"selector-tag\">fill-mode</span> <span class=\"selector-tag\">play-state</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>animation-name    指定要绑定到选择器的关键帧的名称<ul>\n<li>默认值：none</li>\n</ul>\n</li>\n<li>animation-duration    动画指定需要多少秒或毫秒完成<ul>\n<li>3s<br>\b- 默认 0</li>\n</ul>\n</li>\n<li>animation-timing-function    设置动画将如何完成一个周期<ul>\n<li>linear 匀速</li>\n<li>ease 默认 中间快两边慢</li>\n<li>ease-in 低速开始</li>\n<li>ease-out 低速结束</li>\n<li>ease-in-out 低俗开始，低速结束（与ease区别大概是中间速度没有ease高）</li>\n<li>cubic-bezier(n,n,n,n) n是0-1的值</li>\n</ul>\n</li>\n<li>animation-delay    设置动画在启动前的延迟间隔。<ul>\n<li>3s<br>-\b 默认 0</li>\n</ul>\n</li>\n<li>animation-iteration-count    定义动画的播放次数。 <ul>\n<li>默认 1</li>\n<li>n 整数表示播放n次</li>\n<li>infinite 无限循环播放</li>\n</ul>\n</li>\n<li>animation-direction    指定是否应该轮流反向播放动画。<ul>\n<li>normal 默认值</li>\n<li>reverse 方向播放</li>\n<li>alternate 在奇数次 正常播放，在偶数次 反向播放</li>\n<li>alternate-reverse 在偶数次正常播放，在奇数次 反向播放</li>\n<li>initial 设置该属性为他的默认值</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>animation-fill-mode    规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式。<ul>\n<li>none 默认 不会应用任何样式（其实就是在动画结束后，画面回到动画的第一帧</li>\n<li>forwards 动画结束后，停留在最后一帧</li>\n<li>backwards 动画结束后，停留到动画开始的第一帧</li>\n<li>both forwards和backwards两个方向上扩展动画属性</li>\n</ul>\n</li>\n<li>animation-play-state    指定动画是否正在运行或已暂停。<ul>\n<li>running 默认 运行</li>\n<li>paused 暂停 当属性值为paused时，动画停留在被暂停的那一帧</li>\n</ul>\n</li>\n<li>initial    设置属性为其默认值。 阅读关于 initial的介绍。</li>\n<li>inherit    从父元素继承属性。 阅读关于 initinherital的介绍。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"transform-变换\"><a href=\"#transform-变换\" class=\"headerlink\" title=\"transform 变换\"></a>transform 变换</h1><h2 id=\"倾斜：skew-x-angle-y-angle-skewX-angle-skewY-angle\"><a href=\"#倾斜：skew-x-angle-y-angle-skewX-angle-skewY-angle\" class=\"headerlink\" title=\"倾斜：skew(x-angle,y-angle),skewX(angle),skewY(angle)\"></a>倾斜：skew(x-angle,y-angle),skewX(angle),skewY(angle)</h2><ul>\n<li>skewX(angle)：元素高不变，x方向即宽被拉长</li>\n<li>skewY(angle)：元素宽不变，y方向即高被拉长</li>\n<li>skew(x-angle,y-angle)是前两个的结合，</li>\n<li>skew(x deg,-x deg)会产生一个逆时针旋转x度且被放大的效果</li>\n<li>角度值可以是负值，skewX(10deg)与skewX(-10deg)倾斜角度关于y轴对称；</li>\n<li>skewX(90deg)、skewX(-90deg)、skewX(270deg) 元素消失</li>\n<li>skewX(91deg) == skewX(-89deg)<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2>原图</li>\n</ul>\n<p><img src=\"https://static.oschina.net/uploads/space/2018/0304/201402_dIRA_2994006.png\" alt=\"原图\"></p>\n<p>transform:skewX(30deg)</p>\n<p><img src=\"https://static.oschina.net/uploads/space/2018/0304/185713_dZOS_2994006.png\" alt=\"skewX(30deg)\"></p>\n<p>transform:skewY(30deg)</p>\n<p><img src=\"https://static.oschina.net/uploads/space/2018/0304/185928_Yinh_2994006.png\" alt=\"skewY(30deg)\"></p>\n<p>transform:skew(30deg,-30deg)</p>\n<p><img src=\"https://static.oschina.net/uploads/space/2018/0304/190910_UAS2_2994006.png\" alt=\"skew(30deg,-30deg)\"></p>\n<p>ransform:skew(-30deg,30deg)</p>\n<p><img src=\"https://static.oschina.net/uploads/space/2018/0304/190946_zIRD_2994006.png\" alt=\"skew(-30deg,30deg)\"></p>\n<h2 id=\"旋转：rotate-angle-rotateX-angle-rotateY-angle-rotateZ-angle-（与rotate-angle-效果相同）\"><a href=\"#旋转：rotate-angle-rotateX-angle-rotateY-angle-rotateZ-angle-（与rotate-angle-效果相同）\" class=\"headerlink\" title=\"旋转：rotate(angle),rotateX(angle),rotateY(angle),rotateZ(angle)（与rotate(angle)效果相同）\"></a>旋转：rotate(angle),rotateX(angle),rotateY(angle),rotateZ(angle)（与rotate(angle)效果相同）</h2><p>绕对应轴旋转<br>rotate() == rotateZ() 在平面内顺时针旋转</p>\n<h2 id=\"缩放：scale-x-y-scaleX-x-scaleY-y-scaleZ-z\"><a href=\"#缩放：scale-x-y-scaleX-x-scaleY-y-scaleZ-z\" class=\"headerlink\" title=\"缩放：scale(x,y),scaleX(x),scaleY(y),scaleZ(z)\"></a>缩放：scale(x,y),scaleX(x),scaleY(y),scaleZ(z)</h2><p>沿对应轴方向缩放（根据变换原点不同，方向不同；比如origin是left的时候 x轴方向的缩放是向右缩放；若默认在元素中心，则x轴的缩放是从中心向两边同时缩放）<br>z方向的缩放2d看不出效果<br>接受值：数值 不接受百分比</p>\n<h2 id=\"移动：translate-x-y-translateX-x-translateY-y-translateZ-z-translate3d-x-y-z\"><a href=\"#移动：translate-x-y-translateX-x-translateY-y-translateZ-z-translate3d-x-y-z\" class=\"headerlink\" title=\"移动：translate(x,y), translateX(x), translateY(y), translateZ(z), translate3d(x,y,z)\"></a>移动：translate(x,y), translateX(x), translateY(y), translateZ(z), translate3d(x,y,z)</h2><p>沿对应轴方向位移<br>z方向2d变换看不出效果<br>接受值： 30px或者百分比（百分比是以自身宽高为基数）</p>\n<h2 id=\"transform-origin：更改一个元素变形的原点\"><a href=\"#transform-origin：更改一个元素变形的原点\" class=\"headerlink\" title=\"transform-origin：更改一个元素变形的原点\"></a>transform-origin：更改一个元素变形的原点</h2><p>transform-origin: left;<br>transform-origin: 20px;<br>transform-origin: 40px  left;(水平，垂直)</p>\n<h1 id=\"transition-过渡\"><a href=\"#transition-过渡\" class=\"headerlink\" title=\"transition 过渡\"></a>transition 过渡</h1><blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transition</span>: &lt;<span class=\"selector-tag\">property</span>属性名&gt; &lt;<span class=\"selector-tag\">duration</span>过渡时长&gt; &lt;<span class=\"selector-tag\">timing-function</span>过渡时间线&gt; &lt;<span class=\"selector-tag\">delay</span>\b&gt;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>transition-property: width, left;</li>\n<li>transition-timing-function<ul>\n<li>ease 中间快两端慢</li>\n<li>linear 匀速</li>\n<li>step-end 直接跳到最后一帧</li>\n<li>step(4,end) 分四步完成过渡</li>\n</ul>\n</li>\n<li>transition-duration: 3s</li>\n<li>transition-delay: 3s<br>可以合并写多个属性</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transition</span><span class=\"selector-pseudo\">:width</span> 2<span class=\"selector-tag\">s</span>, <span class=\"selector-tag\">height</span> 2<span class=\"selector-tag\">s</span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"animation-动画\"><a href=\"#animation-动画\" class=\"headerlink\" title=\"animation 动画\"></a>animation 动画</h1><blockquote>\n<p><a href=\"http://www.runoob.com/cssref/css3-pr-animation.html\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">animation</span>: <span class=\"selector-tag\">name</span> <span class=\"selector-tag\">duration</span> <span class=\"selector-tag\">timing-function</span> <span class=\"selector-tag\">delay</span> <span class=\"selector-tag\">iteration-count</span> <span class=\"selector-tag\">direction</span> <span class=\"selector-tag\">fill-mode</span> <span class=\"selector-tag\">play-state</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>animation-name    指定要绑定到选择器的关键帧的名称<ul>\n<li>默认值：none</li>\n</ul>\n</li>\n<li>animation-duration    动画指定需要多少秒或毫秒完成<ul>\n<li>3s<br>\b- 默认 0</li>\n</ul>\n</li>\n<li>animation-timing-function    设置动画将如何完成一个周期<ul>\n<li>linear 匀速</li>\n<li>ease 默认 中间快两边慢</li>\n<li>ease-in 低速开始</li>\n<li>ease-out 低速结束</li>\n<li>ease-in-out 低俗开始，低速结束（与ease区别大概是中间速度没有ease高）</li>\n<li>cubic-bezier(n,n,n,n) n是0-1的值</li>\n</ul>\n</li>\n<li>animation-delay    设置动画在启动前的延迟间隔。<ul>\n<li>3s<br>-\b 默认 0</li>\n</ul>\n</li>\n<li>animation-iteration-count    定义动画的播放次数。 <ul>\n<li>默认 1</li>\n<li>n 整数表示播放n次</li>\n<li>infinite 无限循环播放</li>\n</ul>\n</li>\n<li>animation-direction    指定是否应该轮流反向播放动画。<ul>\n<li>normal 默认值</li>\n<li>reverse 方向播放</li>\n<li>alternate 在奇数次 正常播放，在偶数次 反向播放</li>\n<li>alternate-reverse 在偶数次正常播放，在奇数次 反向播放</li>\n<li>initial 设置该属性为他的默认值</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>animation-fill-mode    规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式。<ul>\n<li>none 默认 不会应用任何样式（其实就是在动画结束后，画面回到动画的第一帧</li>\n<li>forwards 动画结束后，停留在最后一帧</li>\n<li>backwards 动画结束后，停留到动画开始的第一帧</li>\n<li>both forwards和backwards两个方向上扩展动画属性</li>\n</ul>\n</li>\n<li>animation-play-state    指定动画是否正在运行或已暂停。<ul>\n<li>running 默认 运行</li>\n<li>paused 暂停 当属性值为paused时，动画停留在被暂停的那一帧</li>\n</ul>\n</li>\n<li>initial    设置属性为其默认值。 阅读关于 initial的介绍。</li>\n<li>inherit    从父元素继承属性。 阅读关于 initinherital的介绍。</li>\n</ul>\n"},{"title":"flex布局","date":"2018-09-27T08:15:45.000Z","description":"简记flex布局","keywords":"flex","_content":"> 参考链接\n> - [flex布局教程](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?^%$)\n> - [深入理解css3中的flex-grow、flex-shrink、flex-basis](http://zhoon.github.io/css3/2014/08/23/flex.html)\n\n## 布局方案\n传统的布局解决方案： 基于基本的盒子模型，依赖 `display` 属性 + `position` 属性 + `float` 属性；\n现在还有了 `flex` 布局（弹性布局）；\n\n任何一个元素都可以指为 flex 布局\n\n兼容性：\n- Chrome 21+ \n- Opera 12.1+\n- Firefox 22+\n- Safari 6.1+（-webkit-）\n- IE 10+\n\n## 容器属性\n- flex-direction（决定主轴的方向，即项目的排列方向）\n  - row（默认，水平+自左向右）\n  - row-reverse（水平+自右向左）\n  - column（垂直+自上而下）\n  - column-reverse（垂直+自下而上）\n- flex-wrap（决定如果一条轴线排不下，怎么换行，只决定行的排列，与每条主线上项目的排列无关）\n  - nowrap 默认，不换行\n  - wrap 正常排序换行 多出的一行在下面\n  - wrap-reverse 反序 多出的一行在上面（会影响交叉轴的方向）\n- flex-flow（direction和wrap的简写）\n  - direction || wrap(无所谓两个属性的顺序 及 是否必填)\n- justify-content（决定项目在主轴上的对齐方式）\n  - flex-start 默认 左对齐\n  - flex-end 默认 右对齐\n  - center 居中\n  - space-between 两端对齐，项目之间的间隔相等\n  - space-around 效果类似，每个项目的左右margin相等 所以项目间的间隔要比项目与父元素边框的距离大一倍\n- align-items(觉得项目在交叉轴上如何对齐；比如水平排列时项目在垂直方向上的排序)\n  - flex-start 交叉轴的起点对齐\n  - flex-end 交叉轴的终点对齐\n  - center 交叉轴中点对齐\n  - baseline 项目第一行文字的底部基线对齐\n  - stretch 默认 如果项目没有设置高度或者为auto，将占满整个容器的高度\n- align-content（决定多条轴线（主轴）的对齐方式；如果只有一条轴线，该属性不起作用）\n  - flex-start 交叉轴的起点对齐\n  - flex-end 交叉轴的终点对齐\n  - center 交叉轴中点对齐\n  - space-between 交叉轴两端对齐，轴线间的距离均分\n  - space-around 效果类似每个轴线的上线margin相等，所以轴线与父元素边框的距离会比轴线间的距离小一半\n  - stretch 默认 如果项目没有设置高度或者为auto，将占满整个容器的高度\n\n## 项目的属性\n\n- order\n  - 决定项目的排列顺序，数值越小排列越靠前，默认为0 可以负值\n- flex-grow\n  - 定义项目瓜分容器剩余空间的比例 默认为0即不瓜分剩余空间\n- flex-shrink\n  - 定义了项目的缩小比例（即空间不足的时候）默认为1（0表示不缩小） 负值无效\n- flex-basis\n  - 定义在分配多余空间前，项目占据的主轴空间，默认为auto即项目的本来大小（其实跟width、height效果差不多）\n- flex \n  - flex-grow、flex-shrink、flex-basic的简写 默认 0 1 auto\n  - auto（1 1 auto）\n  - none（0 0 auto）\n- align-self\n  - 定义单个项目的对齐方式，覆盖align-items 属性","source":"_posts/flex布局.md","raw":"---\ntitle: flex布局\ndate: 2018-09-27 16:15:45\ntags: CSS\ndescription: 简记flex布局\ncategories: CSS\nkeywords: flex\n---\n> 参考链接\n> - [flex布局教程](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?^%$)\n> - [深入理解css3中的flex-grow、flex-shrink、flex-basis](http://zhoon.github.io/css3/2014/08/23/flex.html)\n\n## 布局方案\n传统的布局解决方案： 基于基本的盒子模型，依赖 `display` 属性 + `position` 属性 + `float` 属性；\n现在还有了 `flex` 布局（弹性布局）；\n\n任何一个元素都可以指为 flex 布局\n\n兼容性：\n- Chrome 21+ \n- Opera 12.1+\n- Firefox 22+\n- Safari 6.1+（-webkit-）\n- IE 10+\n\n## 容器属性\n- flex-direction（决定主轴的方向，即项目的排列方向）\n  - row（默认，水平+自左向右）\n  - row-reverse（水平+自右向左）\n  - column（垂直+自上而下）\n  - column-reverse（垂直+自下而上）\n- flex-wrap（决定如果一条轴线排不下，怎么换行，只决定行的排列，与每条主线上项目的排列无关）\n  - nowrap 默认，不换行\n  - wrap 正常排序换行 多出的一行在下面\n  - wrap-reverse 反序 多出的一行在上面（会影响交叉轴的方向）\n- flex-flow（direction和wrap的简写）\n  - direction || wrap(无所谓两个属性的顺序 及 是否必填)\n- justify-content（决定项目在主轴上的对齐方式）\n  - flex-start 默认 左对齐\n  - flex-end 默认 右对齐\n  - center 居中\n  - space-between 两端对齐，项目之间的间隔相等\n  - space-around 效果类似，每个项目的左右margin相等 所以项目间的间隔要比项目与父元素边框的距离大一倍\n- align-items(觉得项目在交叉轴上如何对齐；比如水平排列时项目在垂直方向上的排序)\n  - flex-start 交叉轴的起点对齐\n  - flex-end 交叉轴的终点对齐\n  - center 交叉轴中点对齐\n  - baseline 项目第一行文字的底部基线对齐\n  - stretch 默认 如果项目没有设置高度或者为auto，将占满整个容器的高度\n- align-content（决定多条轴线（主轴）的对齐方式；如果只有一条轴线，该属性不起作用）\n  - flex-start 交叉轴的起点对齐\n  - flex-end 交叉轴的终点对齐\n  - center 交叉轴中点对齐\n  - space-between 交叉轴两端对齐，轴线间的距离均分\n  - space-around 效果类似每个轴线的上线margin相等，所以轴线与父元素边框的距离会比轴线间的距离小一半\n  - stretch 默认 如果项目没有设置高度或者为auto，将占满整个容器的高度\n\n## 项目的属性\n\n- order\n  - 决定项目的排列顺序，数值越小排列越靠前，默认为0 可以负值\n- flex-grow\n  - 定义项目瓜分容器剩余空间的比例 默认为0即不瓜分剩余空间\n- flex-shrink\n  - 定义了项目的缩小比例（即空间不足的时候）默认为1（0表示不缩小） 负值无效\n- flex-basis\n  - 定义在分配多余空间前，项目占据的主轴空间，默认为auto即项目的本来大小（其实跟width、height效果差不多）\n- flex \n  - flex-grow、flex-shrink、flex-basic的简写 默认 0 1 auto\n  - auto（1 1 auto）\n  - none（0 0 auto）\n- align-self\n  - 定义单个项目的对齐方式，覆盖align-items 属性","slug":"flex布局","published":1,"updated":"2018-09-30T07:32:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7kpl02h000ujcs6gb8t5f9u","content":"<blockquote>\n<p>参考链接</p>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?^%$\" target=\"_blank\" rel=\"noopener\">flex布局教程</a></li>\n<li><a href=\"http://zhoon.github.io/css3/2014/08/23/flex.html\" target=\"_blank\" rel=\"noopener\">深入理解css3中的flex-grow、flex-shrink、flex-basis</a></li>\n</ul>\n</blockquote>\n<h2 id=\"布局方案\"><a href=\"#布局方案\" class=\"headerlink\" title=\"布局方案\"></a>布局方案</h2><p>传统的布局解决方案： 基于基本的盒子模型，依赖 <code>display</code> 属性 + <code>position</code> 属性 + <code>float</code> 属性；<br>现在还有了 <code>flex</code> 布局（弹性布局）；</p>\n<p>任何一个元素都可以指为 flex 布局</p>\n<p>兼容性：</p>\n<ul>\n<li>Chrome 21+ </li>\n<li>Opera 12.1+</li>\n<li>Firefox 22+</li>\n<li>Safari 6.1+（-webkit-）</li>\n<li>IE 10+</li>\n</ul>\n<h2 id=\"容器属性\"><a href=\"#容器属性\" class=\"headerlink\" title=\"容器属性\"></a>容器属性</h2><ul>\n<li>flex-direction（决定主轴的方向，即项目的排列方向）<ul>\n<li>row（默认，水平+自左向右）</li>\n<li>row-reverse（水平+自右向左）</li>\n<li>column（垂直+自上而下）</li>\n<li>column-reverse（垂直+自下而上）</li>\n</ul>\n</li>\n<li>flex-wrap（决定如果一条轴线排不下，怎么换行，只决定行的排列，与每条主线上项目的排列无关）<ul>\n<li>nowrap 默认，不换行</li>\n<li>wrap 正常排序换行 多出的一行在下面</li>\n<li>wrap-reverse 反序 多出的一行在上面（会影响交叉轴的方向）</li>\n</ul>\n</li>\n<li>flex-flow（direction和wrap的简写）<ul>\n<li>direction || wrap(无所谓两个属性的顺序 及 是否必填)</li>\n</ul>\n</li>\n<li>justify-content（决定项目在主轴上的对齐方式）<ul>\n<li>flex-start 默认 左对齐</li>\n<li>flex-end 默认 右对齐</li>\n<li>center 居中</li>\n<li>space-between 两端对齐，项目之间的间隔相等</li>\n<li>space-around 效果类似，每个项目的左右margin相等 所以项目间的间隔要比项目与父元素边框的距离大一倍</li>\n</ul>\n</li>\n<li>align-items(觉得项目在交叉轴上如何对齐；比如水平排列时项目在垂直方向上的排序)<ul>\n<li>flex-start 交叉轴的起点对齐</li>\n<li>flex-end 交叉轴的终点对齐</li>\n<li>center 交叉轴中点对齐</li>\n<li>baseline 项目第一行文字的底部基线对齐</li>\n<li>stretch 默认 如果项目没有设置高度或者为auto，将占满整个容器的高度</li>\n</ul>\n</li>\n<li>align-content（决定多条轴线（主轴）的对齐方式；如果只有一条轴线，该属性不起作用）<ul>\n<li>flex-start 交叉轴的起点对齐</li>\n<li>flex-end 交叉轴的终点对齐</li>\n<li>center 交叉轴中点对齐</li>\n<li>space-between 交叉轴两端对齐，轴线间的距离均分</li>\n<li>space-around 效果类似每个轴线的上线margin相等，所以轴线与父元素边框的距离会比轴线间的距离小一半</li>\n<li>stretch 默认 如果项目没有设置高度或者为auto，将占满整个容器的高度</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"项目的属性\"><a href=\"#项目的属性\" class=\"headerlink\" title=\"项目的属性\"></a>项目的属性</h2><ul>\n<li>order<ul>\n<li>决定项目的排列顺序，数值越小排列越靠前，默认为0 可以负值</li>\n</ul>\n</li>\n<li>flex-grow<ul>\n<li>定义项目瓜分容器剩余空间的比例 默认为0即不瓜分剩余空间</li>\n</ul>\n</li>\n<li>flex-shrink<ul>\n<li>定义了项目的缩小比例（即空间不足的时候）默认为1（0表示不缩小） 负值无效</li>\n</ul>\n</li>\n<li>flex-basis<ul>\n<li>定义在分配多余空间前，项目占据的主轴空间，默认为auto即项目的本来大小（其实跟width、height效果差不多）</li>\n</ul>\n</li>\n<li>flex <ul>\n<li>flex-grow、flex-shrink、flex-basic的简写 默认 0 1 auto</li>\n<li>auto（1 1 auto）</li>\n<li>none（0 0 auto）</li>\n</ul>\n</li>\n<li>align-self<ul>\n<li>定义单个项目的对齐方式，覆盖align-items 属性</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>参考链接</p>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?^%$\" target=\"_blank\" rel=\"noopener\">flex布局教程</a></li>\n<li><a href=\"http://zhoon.github.io/css3/2014/08/23/flex.html\" target=\"_blank\" rel=\"noopener\">深入理解css3中的flex-grow、flex-shrink、flex-basis</a></li>\n</ul>\n</blockquote>\n<h2 id=\"布局方案\"><a href=\"#布局方案\" class=\"headerlink\" title=\"布局方案\"></a>布局方案</h2><p>传统的布局解决方案： 基于基本的盒子模型，依赖 <code>display</code> 属性 + <code>position</code> 属性 + <code>float</code> 属性；<br>现在还有了 <code>flex</code> 布局（弹性布局）；</p>\n<p>任何一个元素都可以指为 flex 布局</p>\n<p>兼容性：</p>\n<ul>\n<li>Chrome 21+ </li>\n<li>Opera 12.1+</li>\n<li>Firefox 22+</li>\n<li>Safari 6.1+（-webkit-）</li>\n<li>IE 10+</li>\n</ul>\n<h2 id=\"容器属性\"><a href=\"#容器属性\" class=\"headerlink\" title=\"容器属性\"></a>容器属性</h2><ul>\n<li>flex-direction（决定主轴的方向，即项目的排列方向）<ul>\n<li>row（默认，水平+自左向右）</li>\n<li>row-reverse（水平+自右向左）</li>\n<li>column（垂直+自上而下）</li>\n<li>column-reverse（垂直+自下而上）</li>\n</ul>\n</li>\n<li>flex-wrap（决定如果一条轴线排不下，怎么换行，只决定行的排列，与每条主线上项目的排列无关）<ul>\n<li>nowrap 默认，不换行</li>\n<li>wrap 正常排序换行 多出的一行在下面</li>\n<li>wrap-reverse 反序 多出的一行在上面（会影响交叉轴的方向）</li>\n</ul>\n</li>\n<li>flex-flow（direction和wrap的简写）<ul>\n<li>direction || wrap(无所谓两个属性的顺序 及 是否必填)</li>\n</ul>\n</li>\n<li>justify-content（决定项目在主轴上的对齐方式）<ul>\n<li>flex-start 默认 左对齐</li>\n<li>flex-end 默认 右对齐</li>\n<li>center 居中</li>\n<li>space-between 两端对齐，项目之间的间隔相等</li>\n<li>space-around 效果类似，每个项目的左右margin相等 所以项目间的间隔要比项目与父元素边框的距离大一倍</li>\n</ul>\n</li>\n<li>align-items(觉得项目在交叉轴上如何对齐；比如水平排列时项目在垂直方向上的排序)<ul>\n<li>flex-start 交叉轴的起点对齐</li>\n<li>flex-end 交叉轴的终点对齐</li>\n<li>center 交叉轴中点对齐</li>\n<li>baseline 项目第一行文字的底部基线对齐</li>\n<li>stretch 默认 如果项目没有设置高度或者为auto，将占满整个容器的高度</li>\n</ul>\n</li>\n<li>align-content（决定多条轴线（主轴）的对齐方式；如果只有一条轴线，该属性不起作用）<ul>\n<li>flex-start 交叉轴的起点对齐</li>\n<li>flex-end 交叉轴的终点对齐</li>\n<li>center 交叉轴中点对齐</li>\n<li>space-between 交叉轴两端对齐，轴线间的距离均分</li>\n<li>space-around 效果类似每个轴线的上线margin相等，所以轴线与父元素边框的距离会比轴线间的距离小一半</li>\n<li>stretch 默认 如果项目没有设置高度或者为auto，将占满整个容器的高度</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"项目的属性\"><a href=\"#项目的属性\" class=\"headerlink\" title=\"项目的属性\"></a>项目的属性</h2><ul>\n<li>order<ul>\n<li>决定项目的排列顺序，数值越小排列越靠前，默认为0 可以负值</li>\n</ul>\n</li>\n<li>flex-grow<ul>\n<li>定义项目瓜分容器剩余空间的比例 默认为0即不瓜分剩余空间</li>\n</ul>\n</li>\n<li>flex-shrink<ul>\n<li>定义了项目的缩小比例（即空间不足的时候）默认为1（0表示不缩小） 负值无效</li>\n</ul>\n</li>\n<li>flex-basis<ul>\n<li>定义在分配多余空间前，项目占据的主轴空间，默认为auto即项目的本来大小（其实跟width、height效果差不多）</li>\n</ul>\n</li>\n<li>flex <ul>\n<li>flex-grow、flex-shrink、flex-basic的简写 默认 0 1 auto</li>\n<li>auto（1 1 auto）</li>\n<li>none（0 0 auto）</li>\n</ul>\n</li>\n<li>align-self<ul>\n<li>定义单个项目的对齐方式，覆盖align-items 属性</li>\n</ul>\n</li>\n</ul>\n"},{"title":"css居中","date":"2018-08-20T07:06:52.000Z","description":"使用css居中的几种方法","keywords":"css 居中","_content":"\n> css居中的方法有多种，需要居中的情形也有多种，下面就来总结\b一下\n\n### `inline-block\b` 的居中\n- 多个`inline-block` 的水平居中`text-align: center`\n- 多个`inline-block` 的垂直居中`vertical-align: middle`\n\n```html\n<ul class=\"list-outer\">\n  <li class=\"list-item\">1</li>\n  <li class=\"list-item\">2</li>\n  <li class=\"list-item\">3</li>\n</ul>\n```\n``` LESS\n.list-outer{\n  margin: 0;\n  padding: 0;\n  color: #fff;\n  text-align: center;\n  background: #999;\n  .list-item{\n    display: inline-block;\n    width: 100px;\n    background: #1246a4;\n    vertical-align: middle;\n    &:first-child{\n      height: 30px;\n    }\n    &:nth-child(2){\n      height: 50px;\n    }\n    &:last-child{\n      height: 100px;\n    }\n  }\n}\n```\n![效果](/teresa/images/inline-block.jpg)\n\n### 块元素的居中\n> 无论父元素、子元素的宽度是否都已知，都可以通过`margin: auto；`来水平居中\n> 注意margin、padding的百分比是基于其包含块宽度的百分比\n\n#### 父元素、子元素定宽定高\n- 通过设置margin值，计算出垂直、水平居中的margin值达到居中的效果\n\n```html\n  <div class=\"block-outer\">\n    <div class=\"block-inner\">inner div</div>\n  </div>\n```\n \n```css\n.block-outer{\n  width: 300px;\n  height: 300px;\n  margin: 50px auto;\n  background: #999;\n  overflow: hidden;\n}\n.block-inner{\n  width: 80%;\n  height: 150px;\n  background: #1246a4;\n  /* margin: 75px 30px; */\n  /* margin padding 的百分比值是取自父元素大小的百分比 */\n  margin: 75px 10%;\n}\n```\n![效果](/teresa/images/block_1.jpg)\n\n#### 父元素大小未知、子元素大小确定\n> 知识点： absolute定位的top、right等值，百分比时，取自其相对元素的宽度、高度的百分比；\n\n- 父元素相对定位；子元素绝对定位 + margin负值\n\n```css\n/* 父元素大小未知 */\n.block-outer{\n  position: relative;\n  width: 300px;\n  height: 300px;\n  margin: 50px auto;\n  background: #999;\n}\n.block-inner{\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 80%;\n  height: 150px;\n  margin: -75px -40%;\n  background: #1246a4;\n}\n```\n#### 父元素、子元素大小未知\n- 父元素相对定位；子元素绝对定位(子元素left、right、bottom、top均为0) + `margin: auto`\n\n``` css\n.block-outer{\n  position: relative;\n  width: 300px;\n  height: 300px;\n  margin: 50px auto;\n  background: #999;\n}\n.block-inner{\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 80%;\n  height: 150px;\n  margin: auto;\n  background: #1246a4;\n}\n```\n- 父元素相对定位；子元素绝对定位 + 位移\n\n> 知识点： 定位百分比的值取自“其父元素”，而位移变换的百分比，取自作用当前元素的百分比\n\n``` css\n.block-outer{\n  position: relative;\n  width: 300px;\n  height: 300px;\n  margin: 50px auto;\n  background: #999;\n}\n.block-inner{\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 80%;\n  height: 150px;\n  transform: translate(-50%, -50%);\n  background: #1246a4;\n}\n```\n- 父元素flex\n\n```css\n.block-outer{\n  display: flex;\n  width: 300px;\n  height: 300px;\n  margin: 50px auto;\n  background: #999;\n  align-items: center;\n  justify-content: center;\n}\n.block-inner{\n  width: 80%;\n  height: 150px;\n  background: #1246a4;\n}\n```\n\n#### 其它居中方法\n- 父元素`table-cell`+`vertical-align`;\n\n```css\n.block-outer{\n  display: table-cell;\n  width: 300px;\n  height: 300px;\n  background: #999;\n  vertical-align: middle;\n}\n.block-inner{\n  width: 80%;\n  height: 150px;\n  background: #1246a4;\n  /* 水平居中 */\n  amrgin: 0 auto; \n}\n```\n\n- 添加一个伪元素，作为对照物+`vertical-align`来垂直居中;\n\n```css\n.block-outer{\n  width: 300px;\n  height: 300px;\n  margin: 50px auto;\n  background: #999;\n  /* 水平居中 */\n  text-align: center;\n}\n.block-outer::after{\n  display: inline-block;\n  content: '';\n  height: 100%;\n  vertical-align: middle;\n}\n.block-inner{\n  display: inline-block;\n  width: 80%;\n  height: 150px;\n  background: #1246a4;\n  vertical-align: middle;\n}\n```","source":"_posts/css居中.md","raw":"---\ntitle: css居中\ndate: 2018-08-20 15:06:52\ntags: CSS\ndescription: 使用css居中的几种方法\nkeywords: css 居中\ncategories: CSS\n---\n\n> css居中的方法有多种，需要居中的情形也有多种，下面就来总结\b一下\n\n### `inline-block\b` 的居中\n- 多个`inline-block` 的水平居中`text-align: center`\n- 多个`inline-block` 的垂直居中`vertical-align: middle`\n\n```html\n<ul class=\"list-outer\">\n  <li class=\"list-item\">1</li>\n  <li class=\"list-item\">2</li>\n  <li class=\"list-item\">3</li>\n</ul>\n```\n``` LESS\n.list-outer{\n  margin: 0;\n  padding: 0;\n  color: #fff;\n  text-align: center;\n  background: #999;\n  .list-item{\n    display: inline-block;\n    width: 100px;\n    background: #1246a4;\n    vertical-align: middle;\n    &:first-child{\n      height: 30px;\n    }\n    &:nth-child(2){\n      height: 50px;\n    }\n    &:last-child{\n      height: 100px;\n    }\n  }\n}\n```\n![效果](/teresa/images/inline-block.jpg)\n\n### 块元素的居中\n> 无论父元素、子元素的宽度是否都已知，都可以通过`margin: auto；`来水平居中\n> 注意margin、padding的百分比是基于其包含块宽度的百分比\n\n#### 父元素、子元素定宽定高\n- 通过设置margin值，计算出垂直、水平居中的margin值达到居中的效果\n\n```html\n  <div class=\"block-outer\">\n    <div class=\"block-inner\">inner div</div>\n  </div>\n```\n \n```css\n.block-outer{\n  width: 300px;\n  height: 300px;\n  margin: 50px auto;\n  background: #999;\n  overflow: hidden;\n}\n.block-inner{\n  width: 80%;\n  height: 150px;\n  background: #1246a4;\n  /* margin: 75px 30px; */\n  /* margin padding 的百分比值是取自父元素大小的百分比 */\n  margin: 75px 10%;\n}\n```\n![效果](/teresa/images/block_1.jpg)\n\n#### 父元素大小未知、子元素大小确定\n> 知识点： absolute定位的top、right等值，百分比时，取自其相对元素的宽度、高度的百分比；\n\n- 父元素相对定位；子元素绝对定位 + margin负值\n\n```css\n/* 父元素大小未知 */\n.block-outer{\n  position: relative;\n  width: 300px;\n  height: 300px;\n  margin: 50px auto;\n  background: #999;\n}\n.block-inner{\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 80%;\n  height: 150px;\n  margin: -75px -40%;\n  background: #1246a4;\n}\n```\n#### 父元素、子元素大小未知\n- 父元素相对定位；子元素绝对定位(子元素left、right、bottom、top均为0) + `margin: auto`\n\n``` css\n.block-outer{\n  position: relative;\n  width: 300px;\n  height: 300px;\n  margin: 50px auto;\n  background: #999;\n}\n.block-inner{\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 80%;\n  height: 150px;\n  margin: auto;\n  background: #1246a4;\n}\n```\n- 父元素相对定位；子元素绝对定位 + 位移\n\n> 知识点： 定位百分比的值取自“其父元素”，而位移变换的百分比，取自作用当前元素的百分比\n\n``` css\n.block-outer{\n  position: relative;\n  width: 300px;\n  height: 300px;\n  margin: 50px auto;\n  background: #999;\n}\n.block-inner{\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 80%;\n  height: 150px;\n  transform: translate(-50%, -50%);\n  background: #1246a4;\n}\n```\n- 父元素flex\n\n```css\n.block-outer{\n  display: flex;\n  width: 300px;\n  height: 300px;\n  margin: 50px auto;\n  background: #999;\n  align-items: center;\n  justify-content: center;\n}\n.block-inner{\n  width: 80%;\n  height: 150px;\n  background: #1246a4;\n}\n```\n\n#### 其它居中方法\n- 父元素`table-cell`+`vertical-align`;\n\n```css\n.block-outer{\n  display: table-cell;\n  width: 300px;\n  height: 300px;\n  background: #999;\n  vertical-align: middle;\n}\n.block-inner{\n  width: 80%;\n  height: 150px;\n  background: #1246a4;\n  /* 水平居中 */\n  amrgin: 0 auto; \n}\n```\n\n- 添加一个伪元素，作为对照物+`vertical-align`来垂直居中;\n\n```css\n.block-outer{\n  width: 300px;\n  height: 300px;\n  margin: 50px auto;\n  background: #999;\n  /* 水平居中 */\n  text-align: center;\n}\n.block-outer::after{\n  display: inline-block;\n  content: '';\n  height: 100%;\n  vertical-align: middle;\n}\n.block-inner{\n  display: inline-block;\n  width: 80%;\n  height: 150px;\n  background: #1246a4;\n  vertical-align: middle;\n}\n```","slug":"css居中","published":1,"updated":"2018-11-13T09:23:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7kpl02i000wjcs6580js205","content":"<blockquote>\n<p>css居中的方法有多种，需要居中的情形也有多种，下面就来总结\b一下</p>\n</blockquote>\n<h3 id=\"inline-block-的居中\"><a href=\"#inline-block-的居中\" class=\"headerlink\" title=\"inline-block\b 的居中\"></a><code>inline-block\b</code> 的居中</h3><ul>\n<li>多个<code>inline-block</code> 的水平居中<code>text-align: center</code></li>\n<li>多个<code>inline-block</code> 的垂直居中<code>vertical-align: middle</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-outer\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-item\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-item\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-item\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.list-outer</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">  <span class=\"selector-class\">.list-item</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#1246a4</span>;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">    <span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:first-child</span>&#123;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:last-child</span>&#123;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/teresa/images/inline-block.jpg\" alt=\"效果\"></p>\n<h3 id=\"块元素的居中\"><a href=\"#块元素的居中\" class=\"headerlink\" title=\"块元素的居中\"></a>块元素的居中</h3><blockquote>\n<p>无论父元素、子元素的宽度是否都已知，都可以通过<code>margin: auto；</code>来水平居中<br>注意margin、padding的百分比是基于其包含块宽度的百分比</p>\n</blockquote>\n<h4 id=\"父元素、子元素定宽定高\"><a href=\"#父元素、子元素定宽定高\" class=\"headerlink\" title=\"父元素、子元素定宽定高\"></a>父元素、子元素定宽定高</h4><ul>\n<li>通过设置margin值，计算出垂直、水平居中的margin值达到居中的效果</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-outer\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-inner\"</span>&gt;</span>inner div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.block-outer</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-inner</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#1246a4</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* margin: 75px 30px; */</span></span><br><span class=\"line\">  <span class=\"comment\">/* margin padding 的百分比值是取自父元素大小的百分比 */</span></span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">75px</span> <span class=\"number\">10%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/teresa/images/block_1.jpg\" alt=\"效果\"></p>\n<h4 id=\"父元素大小未知、子元素大小确定\"><a href=\"#父元素大小未知、子元素大小确定\" class=\"headerlink\" title=\"父元素大小未知、子元素大小确定\"></a>父元素大小未知、子元素大小确定</h4><blockquote>\n<p>知识点： absolute定位的top、right等值，百分比时，取自其相对元素的宽度、高度的百分比；</p>\n</blockquote>\n<ul>\n<li>父元素相对定位；子元素绝对定位 + margin负值</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 父元素大小未知 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.block-outer</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-inner</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: -<span class=\"number\">75px</span> -<span class=\"number\">40%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#1246a4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"父元素、子元素大小未知\"><a href=\"#父元素、子元素大小未知\" class=\"headerlink\" title=\"父元素、子元素大小未知\"></a>父元素、子元素大小未知</h4><ul>\n<li>父元素相对定位；子元素绝对定位(子元素left、right、bottom、top均为0) + <code>margin: auto</code></li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.block-outer</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-inner</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#1246a4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>父元素相对定位；子元素绝对定位 + 位移</li>\n</ul>\n<blockquote>\n<p>知识点： 定位百分比的值取自“其父元素”，而位移变换的百分比，取自作用当前元素的百分比</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.block-outer</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-inner</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%, -50%);</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#1246a4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>父元素flex</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.block-outer</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-inner</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#1246a4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"其它居中方法\"><a href=\"#其它居中方法\" class=\"headerlink\" title=\"其它居中方法\"></a>其它居中方法</h4><ul>\n<li>父元素<code>table-cell</code>+<code>vertical-align</code>;</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.block-outer</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-inner</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#1246a4</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* 水平居中 */</span></span><br><span class=\"line\">  <span class=\"attribute\">amrgin</span>: <span class=\"number\">0</span> auto; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加一个伪元素，作为对照物+<code>vertical-align</code>来垂直居中;</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.block-outer</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* 水平居中 */</span></span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-outer</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-inner</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#1246a4</span>;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>css居中的方法有多种，需要居中的情形也有多种，下面就来总结\b一下</p>\n</blockquote>\n<h3 id=\"inline-block-的居中\"><a href=\"#inline-block-的居中\" class=\"headerlink\" title=\"inline-block\b 的居中\"></a><code>inline-block\b</code> 的居中</h3><ul>\n<li>多个<code>inline-block</code> 的水平居中<code>text-align: center</code></li>\n<li>多个<code>inline-block</code> 的垂直居中<code>vertical-align: middle</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-outer\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-item\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-item\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-item\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.list-outer</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">  <span class=\"selector-class\">.list-item</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#1246a4</span>;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">    <span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:first-child</span>&#123;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:last-child</span>&#123;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/teresa/images/inline-block.jpg\" alt=\"效果\"></p>\n<h3 id=\"块元素的居中\"><a href=\"#块元素的居中\" class=\"headerlink\" title=\"块元素的居中\"></a>块元素的居中</h3><blockquote>\n<p>无论父元素、子元素的宽度是否都已知，都可以通过<code>margin: auto；</code>来水平居中<br>注意margin、padding的百分比是基于其包含块宽度的百分比</p>\n</blockquote>\n<h4 id=\"父元素、子元素定宽定高\"><a href=\"#父元素、子元素定宽定高\" class=\"headerlink\" title=\"父元素、子元素定宽定高\"></a>父元素、子元素定宽定高</h4><ul>\n<li>通过设置margin值，计算出垂直、水平居中的margin值达到居中的效果</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-outer\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"block-inner\"</span>&gt;</span>inner div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.block-outer</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-inner</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#1246a4</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* margin: 75px 30px; */</span></span><br><span class=\"line\">  <span class=\"comment\">/* margin padding 的百分比值是取自父元素大小的百分比 */</span></span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">75px</span> <span class=\"number\">10%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/teresa/images/block_1.jpg\" alt=\"效果\"></p>\n<h4 id=\"父元素大小未知、子元素大小确定\"><a href=\"#父元素大小未知、子元素大小确定\" class=\"headerlink\" title=\"父元素大小未知、子元素大小确定\"></a>父元素大小未知、子元素大小确定</h4><blockquote>\n<p>知识点： absolute定位的top、right等值，百分比时，取自其相对元素的宽度、高度的百分比；</p>\n</blockquote>\n<ul>\n<li>父元素相对定位；子元素绝对定位 + margin负值</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 父元素大小未知 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.block-outer</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-inner</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: -<span class=\"number\">75px</span> -<span class=\"number\">40%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#1246a4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"父元素、子元素大小未知\"><a href=\"#父元素、子元素大小未知\" class=\"headerlink\" title=\"父元素、子元素大小未知\"></a>父元素、子元素大小未知</h4><ul>\n<li>父元素相对定位；子元素绝对定位(子元素left、right、bottom、top均为0) + <code>margin: auto</code></li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.block-outer</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-inner</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#1246a4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>父元素相对定位；子元素绝对定位 + 位移</li>\n</ul>\n<blockquote>\n<p>知识点： 定位百分比的值取自“其父元素”，而位移变换的百分比，取自作用当前元素的百分比</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.block-outer</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-inner</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%, -50%);</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#1246a4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>父元素flex</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.block-outer</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-inner</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#1246a4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"其它居中方法\"><a href=\"#其它居中方法\" class=\"headerlink\" title=\"其它居中方法\"></a>其它居中方法</h4><ul>\n<li>父元素<code>table-cell</code>+<code>vertical-align</code>;</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.block-outer</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-inner</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#1246a4</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* 水平居中 */</span></span><br><span class=\"line\">  <span class=\"attribute\">amrgin</span>: <span class=\"number\">0</span> auto; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加一个伪元素，作为对照物+<code>vertical-align</code>来垂直居中;</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.block-outer</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* 水平居中 */</span></span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-outer</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block-inner</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#1246a4</span>;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"js高效更改对象属性名","date":"2018-08-23T06:39:52.000Z","description":"使用js高效的更改对象中的属性名","keywords":"使用js高效的更改对象中的属性名","_content":"项目中需要使用到嵌套对象，且每层对象的数据结构相同，如下：\n```js\n[\n  {\n    name: '北京',\n    id: '010',\n    children: [\n      {\n        name: '东城区',\n        id: '0101',\n        children: [\n          { name: '长安街', id: '010101' },\n          { name: '长椿街', id: '010102' }\n        ]\n      },\n      {\n        name: '西城区',\n        id: '0102',\n        children: [\n          { name: '西长安街', id: '010201' },\n          { name: '西长椿街', id: '010202' }\n        ]\n      }\n    ]\n  }\n]\n```\n\n但是，现在接口获取到的dataList是这样的\n```js\n[\n  {\n    name: '北京',\n    id: '010',\n    dataList: [\n      {\n        name: '东城区',\n        id: '0101',\n        dataList: [\n          { name: '长安街', id: '010101' },\n          { name: '长椿街', id: '010102' }\n        ]\n      },\n      {\n        name: '西城区',\n        id: '0102',\n        dataList: [\n          { name: '西长安街', id: '010201' },\n          { name: '西长椿街', id: '010202' }\n        ]\n      }\n    ]\n  }\n]\n```\n\n我的组件需要第一种 `children` 类型的数据，那么我就需要拿到数据后做处理；网上查阅了下比较简单直接的方法，觉得很赞，特来记录下(假设需要处理的数据列表是变量 `dataList` )：\n\n```js\nconst data = JSON.parse(JSON.stringify(dataList).replace(/dataList/g,'children'));\n```\n\n`data` 即所想得\n\n> [参考链接](https://segmentfault.com/q/1010000011923504)","source":"_posts/js高效更改对象属性名.md","raw":"---\ntitle: js高效更改对象属性名\ndate: 2018-08-23 14:39:52\ntags: JavaScript\ndescription: 使用js高效的更改对象中的属性名\ncategories: JavaScript\nkeywords: 使用js高效的更改对象中的属性名\n---\n项目中需要使用到嵌套对象，且每层对象的数据结构相同，如下：\n```js\n[\n  {\n    name: '北京',\n    id: '010',\n    children: [\n      {\n        name: '东城区',\n        id: '0101',\n        children: [\n          { name: '长安街', id: '010101' },\n          { name: '长椿街', id: '010102' }\n        ]\n      },\n      {\n        name: '西城区',\n        id: '0102',\n        children: [\n          { name: '西长安街', id: '010201' },\n          { name: '西长椿街', id: '010202' }\n        ]\n      }\n    ]\n  }\n]\n```\n\n但是，现在接口获取到的dataList是这样的\n```js\n[\n  {\n    name: '北京',\n    id: '010',\n    dataList: [\n      {\n        name: '东城区',\n        id: '0101',\n        dataList: [\n          { name: '长安街', id: '010101' },\n          { name: '长椿街', id: '010102' }\n        ]\n      },\n      {\n        name: '西城区',\n        id: '0102',\n        dataList: [\n          { name: '西长安街', id: '010201' },\n          { name: '西长椿街', id: '010202' }\n        ]\n      }\n    ]\n  }\n]\n```\n\n我的组件需要第一种 `children` 类型的数据，那么我就需要拿到数据后做处理；网上查阅了下比较简单直接的方法，觉得很赞，特来记录下(假设需要处理的数据列表是变量 `dataList` )：\n\n```js\nconst data = JSON.parse(JSON.stringify(dataList).replace(/dataList/g,'children'));\n```\n\n`data` 即所想得\n\n> [参考链接](https://segmentfault.com/q/1010000011923504)","slug":"js高效更改对象属性名","published":1,"updated":"2018-09-27T08:19:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7kpl02k0011jcs6cbszcesg","content":"<p>项目中需要使用到嵌套对象，且每层对象的数据结构相同，如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'北京'</span>,</span><br><span class=\"line\">    id: <span class=\"string\">'010'</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'东城区'</span>,</span><br><span class=\"line\">        id: <span class=\"string\">'0101'</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123; <span class=\"attr\">name</span>: <span class=\"string\">'长安街'</span>, <span class=\"attr\">id</span>: <span class=\"string\">'010101'</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">name</span>: <span class=\"string\">'长椿街'</span>, <span class=\"attr\">id</span>: <span class=\"string\">'010102'</span> &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'西城区'</span>,</span><br><span class=\"line\">        id: <span class=\"string\">'0102'</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123; <span class=\"attr\">name</span>: <span class=\"string\">'西长安街'</span>, <span class=\"attr\">id</span>: <span class=\"string\">'010201'</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">name</span>: <span class=\"string\">'西长椿街'</span>, <span class=\"attr\">id</span>: <span class=\"string\">'010202'</span> &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>但是，现在接口获取到的dataList是这样的<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'北京'</span>,</span><br><span class=\"line\">    id: <span class=\"string\">'010'</span>,</span><br><span class=\"line\">    dataList: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'东城区'</span>,</span><br><span class=\"line\">        id: <span class=\"string\">'0101'</span>,</span><br><span class=\"line\">        dataList: [</span><br><span class=\"line\">          &#123; <span class=\"attr\">name</span>: <span class=\"string\">'长安街'</span>, <span class=\"attr\">id</span>: <span class=\"string\">'010101'</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">name</span>: <span class=\"string\">'长椿街'</span>, <span class=\"attr\">id</span>: <span class=\"string\">'010102'</span> &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'西城区'</span>,</span><br><span class=\"line\">        id: <span class=\"string\">'0102'</span>,</span><br><span class=\"line\">        dataList: [</span><br><span class=\"line\">          &#123; <span class=\"attr\">name</span>: <span class=\"string\">'西长安街'</span>, <span class=\"attr\">id</span>: <span class=\"string\">'010201'</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">name</span>: <span class=\"string\">'西长椿街'</span>, <span class=\"attr\">id</span>: <span class=\"string\">'010202'</span> &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>我的组件需要第一种 <code>children</code> 类型的数据，那么我就需要拿到数据后做处理；网上查阅了下比较简单直接的方法，觉得很赞，特来记录下(假设需要处理的数据列表是变量 <code>dataList</code> )：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(dataList).replace(<span class=\"regexp\">/dataList/g</span>,<span class=\"string\">'children'</span>));</span><br></pre></td></tr></table></figure>\n<p><code>data</code> 即所想得</p>\n<blockquote>\n<p><a href=\"https://segmentfault.com/q/1010000011923504\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>项目中需要使用到嵌套对象，且每层对象的数据结构相同，如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'北京'</span>,</span><br><span class=\"line\">    id: <span class=\"string\">'010'</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'东城区'</span>,</span><br><span class=\"line\">        id: <span class=\"string\">'0101'</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123; <span class=\"attr\">name</span>: <span class=\"string\">'长安街'</span>, <span class=\"attr\">id</span>: <span class=\"string\">'010101'</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">name</span>: <span class=\"string\">'长椿街'</span>, <span class=\"attr\">id</span>: <span class=\"string\">'010102'</span> &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'西城区'</span>,</span><br><span class=\"line\">        id: <span class=\"string\">'0102'</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123; <span class=\"attr\">name</span>: <span class=\"string\">'西长安街'</span>, <span class=\"attr\">id</span>: <span class=\"string\">'010201'</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">name</span>: <span class=\"string\">'西长椿街'</span>, <span class=\"attr\">id</span>: <span class=\"string\">'010202'</span> &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>但是，现在接口获取到的dataList是这样的<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'北京'</span>,</span><br><span class=\"line\">    id: <span class=\"string\">'010'</span>,</span><br><span class=\"line\">    dataList: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'东城区'</span>,</span><br><span class=\"line\">        id: <span class=\"string\">'0101'</span>,</span><br><span class=\"line\">        dataList: [</span><br><span class=\"line\">          &#123; <span class=\"attr\">name</span>: <span class=\"string\">'长安街'</span>, <span class=\"attr\">id</span>: <span class=\"string\">'010101'</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">name</span>: <span class=\"string\">'长椿街'</span>, <span class=\"attr\">id</span>: <span class=\"string\">'010102'</span> &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'西城区'</span>,</span><br><span class=\"line\">        id: <span class=\"string\">'0102'</span>,</span><br><span class=\"line\">        dataList: [</span><br><span class=\"line\">          &#123; <span class=\"attr\">name</span>: <span class=\"string\">'西长安街'</span>, <span class=\"attr\">id</span>: <span class=\"string\">'010201'</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">name</span>: <span class=\"string\">'西长椿街'</span>, <span class=\"attr\">id</span>: <span class=\"string\">'010202'</span> &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>我的组件需要第一种 <code>children</code> 类型的数据，那么我就需要拿到数据后做处理；网上查阅了下比较简单直接的方法，觉得很赞，特来记录下(假设需要处理的数据列表是变量 <code>dataList</code> )：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(dataList).replace(<span class=\"regexp\">/dataList/g</span>,<span class=\"string\">'children'</span>));</span><br></pre></td></tr></table></figure>\n<p><code>data</code> 即所想得</p>\n<blockquote>\n<p><a href=\"https://segmentfault.com/q/1010000011923504\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n</blockquote>\n"},{"title":"js数据转换","date":"2018-08-21T14:47:49.000Z","description":"记录设计js数据类型转换相关","keywords":"js中的数据类型转换","_content":"## 加减乘除运算\n> - 运算符会将其两边非数字类型的值经过 `Number` 转换为数值类型\n> - `字符串 + 数值` 时，返回拼接字符串\n> - `字符串 - 或 * 或 / 或 % 数值` 时，返回数值类型，字符串 `Number` 转换失败返回 `NaN`\n> - 一切与`NaN`有关的运算操作，均返回 `NaN`\n\n## Number()\n> `Number` 转换相比\b `parseInt`、`parseFloat` 要相对严格的多，只要存在转换失败的因素即返回 `NaN`\n\n```js\nNumber(123) // 123\nNumber('123') // 123\nNumber('123sss') // NaN\nNumber(undefined) // NaN\nNumber(null) // 0\nNumber(false) // 0\nNumber(true) // 1\nNumber('') // 0\nNumber([1, 2, 3]) // NaN\nNumber([5]) // 5\nNumber({}) // NaN\n// Number转换对象时，先调用对象的valueOf方法，如果\b该方法返回对象，\n// 则再调用对象的toString方法，如若toString返回对象则Number报错；\nparseFloat('12.00a') //12\nparseInt('12.001a') //12\nparseFloat('12.001a') //12.001\nparseFloat('a12.001a') //NaN\nparseFloat('a12.001') //NaN\nparseInt('12.001') //12\nparseInt(110,2) //6 以2进制 取整\n```\n\n## String()\n```js\nString(123) // \"123\"\nString('abc') // \"abc\"\nString(true) // \"true\"\nString(undefined) // \"undefined\"\nString(null) // \"null\"\nString([1,2,3]) // \"1,2,3\"\nString({a: 1}) // \"[object Object]\"\n// String转换对象时，同Number，只不过调用valueOf、toString的顺序相反，先toString在valueOf\n```\n\n## Boolean()\n> 除了以下五个值的转换结果为 `false`，其他的值全部为 `true`\n> - `undefined`\n> - `null`\n> - `-0`或`+0`\n> - `NaN`\n> - `''`（空)\n> 注意点是 `Boolean([])` => `true`，但是`[] == true` => `false`; `{} == true` \b报错\n\n## 自动转换\n> 自动转换的规则是这样的：预期什么类型的值，就调用该类型的转换函数。比如，某个位置预期为字符串，就调用`String`函数进行转换。如果该位置即可以是字符串，也可能是数值，那么默认转为数值。\n\n### 自动转换为布尔值\n> 比如 `if` 的判断语句，三元运算符；他们内部均调用 `Boolean` 隐式转换数据类型\n\n### 自动转换为字符串\n> 主要是字符串的拼接， `'string' + {}`等类似表达式加号后面将转换为字符串\n> 规则： 复杂类型 =》 原始类型 =》 `string`\n\n### 自动转换为数值\n> 系统在需要出现数值的地方，通过`Number`隐式转换数据类型\n> \n> 除了加法运算符（`+`）有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值。\n> 一元运算符也存在隐式转换： `-true // -1`\n\n### `==`的隐形转换\n> - 如果比较的两者中有布尔值 `Boolean`，会把 `Boolean` 先转换为对应的 `Number` ，即 `0` 和 `1`，然后进行比较。\n> - 如果比较的双方中有一方为 `Boolean` ，一方为 `String` 时，则会先将双方转换为数字，然后进行比较。\n> - 如果比较的双方中有一方为 `Number` ，一方为 `String` 时，会把 `String` 通过 `Number()` 方法转换为数字，然后进行比较。\n> - 如果比较的双方中有一方为 `Number` ，一方为 `Object` 时，则会调用 `Number` 方法将 `Object` 转换为数字，然后进行比较。\n> \n> 其实总结来看，尤其是复杂类型的数据，隐式转换可能不止一次，比如下例中的 变量`a`，`a == 1` 比较时，`a`的`valueOf`返回`'1'`\n>\n> 此时就相当于 `'1' == 1` 的比较，`'1'`要继续转换成数字1与其比较\n>\n> 给我的感觉就是在不存在`string`的情况下，一切都在向`number`转化\n\n```js\nvar a = {a: 222}\na == 1 //false\na.valueOf() //{a: 222}\na.toString() //\"[object Object]\"\na == \"[object Object]\" //true\na.valueOf = function(){return '1'}\na == \"[object Object]\" //false\na == 1 //true\na.toString = function() {return '2'}\na == 1 //true\n1 == a  //true\n2 == a  //false\na == '1' //true\na == '2' //false\n//=================\nvar b = [1]\nb==1 //true\nb=='1' //true\nb.valueOf() //[1]\nb.toString() //\"1\"\nb.valueOf = function(){return '2'}\nb=='1' //false\nb=='2' //true\n// =========================以上总结Object + string 或 Object + number 是先valueOf在toString\n```\n## 四舍五入 \b& 取整\n\n- 保留小数点后 n 位 （四舍五入）返回字符串\n  - num.toFixed(n)\n- 直接取整，不考虑小数点后面的值\n  - parseInt(num or string, n)\n  - n 表示以n进制取整\n- 向上取整 返回数字\n  - Math.ceil(num)\n- 向下取整 返回数字\n  - Math.floor(num)\n- 四舍五入取整 返回数字\n  - Math.round(num)\n\n> 本片文章参考自[https://wangdoc.com/javascript/features/conversion.html](https://wangdoc.com/javascript/features/conversion.html)\n\n> [js取float型小数点后两位数的方法](https://blog.csdn.net/superdog007/article/details/50800979)","source":"_posts/js数据转换.md","raw":"---\ntitle: js数据转换\ndate: 2018-08-21 22:47:49\ntags: [JavaScript]\ndescription: 记录设计js数据类型转换相关\ncategories: JavaScript\nkeywords: js中的数据类型转换\n---\n## 加减乘除运算\n> - 运算符会将其两边非数字类型的值经过 `Number` 转换为数值类型\n> - `字符串 + 数值` 时，返回拼接字符串\n> - `字符串 - 或 * 或 / 或 % 数值` 时，返回数值类型，字符串 `Number` 转换失败返回 `NaN`\n> - 一切与`NaN`有关的运算操作，均返回 `NaN`\n\n## Number()\n> `Number` 转换相比\b `parseInt`、`parseFloat` 要相对严格的多，只要存在转换失败的因素即返回 `NaN`\n\n```js\nNumber(123) // 123\nNumber('123') // 123\nNumber('123sss') // NaN\nNumber(undefined) // NaN\nNumber(null) // 0\nNumber(false) // 0\nNumber(true) // 1\nNumber('') // 0\nNumber([1, 2, 3]) // NaN\nNumber([5]) // 5\nNumber({}) // NaN\n// Number转换对象时，先调用对象的valueOf方法，如果\b该方法返回对象，\n// 则再调用对象的toString方法，如若toString返回对象则Number报错；\nparseFloat('12.00a') //12\nparseInt('12.001a') //12\nparseFloat('12.001a') //12.001\nparseFloat('a12.001a') //NaN\nparseFloat('a12.001') //NaN\nparseInt('12.001') //12\nparseInt(110,2) //6 以2进制 取整\n```\n\n## String()\n```js\nString(123) // \"123\"\nString('abc') // \"abc\"\nString(true) // \"true\"\nString(undefined) // \"undefined\"\nString(null) // \"null\"\nString([1,2,3]) // \"1,2,3\"\nString({a: 1}) // \"[object Object]\"\n// String转换对象时，同Number，只不过调用valueOf、toString的顺序相反，先toString在valueOf\n```\n\n## Boolean()\n> 除了以下五个值的转换结果为 `false`，其他的值全部为 `true`\n> - `undefined`\n> - `null`\n> - `-0`或`+0`\n> - `NaN`\n> - `''`（空)\n> 注意点是 `Boolean([])` => `true`，但是`[] == true` => `false`; `{} == true` \b报错\n\n## 自动转换\n> 自动转换的规则是这样的：预期什么类型的值，就调用该类型的转换函数。比如，某个位置预期为字符串，就调用`String`函数进行转换。如果该位置即可以是字符串，也可能是数值，那么默认转为数值。\n\n### 自动转换为布尔值\n> 比如 `if` 的判断语句，三元运算符；他们内部均调用 `Boolean` 隐式转换数据类型\n\n### 自动转换为字符串\n> 主要是字符串的拼接， `'string' + {}`等类似表达式加号后面将转换为字符串\n> 规则： 复杂类型 =》 原始类型 =》 `string`\n\n### 自动转换为数值\n> 系统在需要出现数值的地方，通过`Number`隐式转换数据类型\n> \n> 除了加法运算符（`+`）有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值。\n> 一元运算符也存在隐式转换： `-true // -1`\n\n### `==`的隐形转换\n> - 如果比较的两者中有布尔值 `Boolean`，会把 `Boolean` 先转换为对应的 `Number` ，即 `0` 和 `1`，然后进行比较。\n> - 如果比较的双方中有一方为 `Boolean` ，一方为 `String` 时，则会先将双方转换为数字，然后进行比较。\n> - 如果比较的双方中有一方为 `Number` ，一方为 `String` 时，会把 `String` 通过 `Number()` 方法转换为数字，然后进行比较。\n> - 如果比较的双方中有一方为 `Number` ，一方为 `Object` 时，则会调用 `Number` 方法将 `Object` 转换为数字，然后进行比较。\n> \n> 其实总结来看，尤其是复杂类型的数据，隐式转换可能不止一次，比如下例中的 变量`a`，`a == 1` 比较时，`a`的`valueOf`返回`'1'`\n>\n> 此时就相当于 `'1' == 1` 的比较，`'1'`要继续转换成数字1与其比较\n>\n> 给我的感觉就是在不存在`string`的情况下，一切都在向`number`转化\n\n```js\nvar a = {a: 222}\na == 1 //false\na.valueOf() //{a: 222}\na.toString() //\"[object Object]\"\na == \"[object Object]\" //true\na.valueOf = function(){return '1'}\na == \"[object Object]\" //false\na == 1 //true\na.toString = function() {return '2'}\na == 1 //true\n1 == a  //true\n2 == a  //false\na == '1' //true\na == '2' //false\n//=================\nvar b = [1]\nb==1 //true\nb=='1' //true\nb.valueOf() //[1]\nb.toString() //\"1\"\nb.valueOf = function(){return '2'}\nb=='1' //false\nb=='2' //true\n// =========================以上总结Object + string 或 Object + number 是先valueOf在toString\n```\n## 四舍五入 \b& 取整\n\n- 保留小数点后 n 位 （四舍五入）返回字符串\n  - num.toFixed(n)\n- 直接取整，不考虑小数点后面的值\n  - parseInt(num or string, n)\n  - n 表示以n进制取整\n- 向上取整 返回数字\n  - Math.ceil(num)\n- 向下取整 返回数字\n  - Math.floor(num)\n- 四舍五入取整 返回数字\n  - Math.round(num)\n\n> 本片文章参考自[https://wangdoc.com/javascript/features/conversion.html](https://wangdoc.com/javascript/features/conversion.html)\n\n> [js取float型小数点后两位数的方法](https://blog.csdn.net/superdog007/article/details/50800979)","slug":"js数据转换","published":1,"updated":"2018-10-18T07:10:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7kpl02m0014jcs65vei2t6t","content":"<h2 id=\"加减乘除运算\"><a href=\"#加减乘除运算\" class=\"headerlink\" title=\"加减乘除运算\"></a>加减乘除运算</h2><blockquote>\n<ul>\n<li>运算符会将其两边非数字类型的值经过 <code>Number</code> 转换为数值类型</li>\n<li><code>字符串 + 数值</code> 时，返回拼接字符串</li>\n<li><code>字符串 - 或 * 或 / 或 % 数值</code> 时，返回数值类型，字符串 <code>Number</code> 转换失败返回 <code>NaN</code></li>\n<li>一切与<code>NaN</code>有关的运算操作，均返回 <code>NaN</code></li>\n</ul>\n</blockquote>\n<h2 id=\"Number\"><a href=\"#Number\" class=\"headerlink\" title=\"Number()\"></a>Number()</h2><blockquote>\n<p><code>Number</code> 转换相比\b <code>parseInt</code>、<code>parseFloat</code> 要相对严格的多，只要存在转换失败的因素即返回 <code>NaN</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"number\">123</span>) <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">'123'</span>) <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">'123sss'</span>) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"literal\">undefined</span>) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"literal\">null</span>) <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"literal\">false</span>) <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"literal\">true</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">''</span>) <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>([<span class=\"number\">5</span>]) <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(&#123;&#125;) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"comment\">// Number转换对象时，先调用对象的valueOf方法，如果\b该方法返回对象，</span></span><br><span class=\"line\"><span class=\"comment\">// 则再调用对象的toString方法，如若toString返回对象则Number报错；</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">'12.00a'</span>) <span class=\"comment\">//12</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'12.001a'</span>) <span class=\"comment\">//12</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">'12.001a'</span>) <span class=\"comment\">//12.001</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">'a12.001a'</span>) <span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">'a12.001'</span>) <span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'12.001'</span>) <span class=\"comment\">//12</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"number\">110</span>,<span class=\"number\">2</span>) <span class=\"comment\">//6 以2进制 取整</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String()\"></a>String()</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"number\">123</span>) <span class=\"comment\">// \"123\"</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"string\">'abc'</span>) <span class=\"comment\">// \"abc\"</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"literal\">true</span>) <span class=\"comment\">// \"true\"</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"literal\">undefined</span>) <span class=\"comment\">// \"undefined\"</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"literal\">null</span>) <span class=\"comment\">// \"null\"</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]) <span class=\"comment\">// \"1,2,3\"</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(&#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;) <span class=\"comment\">// \"[object Object]\"</span></span><br><span class=\"line\"><span class=\"comment\">// String转换对象时，同Number，只不过调用valueOf、toString的顺序相反，先toString在valueOf</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Boolean\"><a href=\"#Boolean\" class=\"headerlink\" title=\"Boolean()\"></a>Boolean()</h2><blockquote>\n<p>除了以下五个值的转换结果为 <code>false</code>，其他的值全部为 <code>true</code></p>\n<ul>\n<li><code>undefined</code></li>\n<li><code>null</code></li>\n<li><code>-0</code>或<code>+0</code></li>\n<li><code>NaN</code></li>\n<li><code>&#39;&#39;</code>（空)<br>注意点是 <code>Boolean([])</code> =&gt; <code>true</code>，但是<code>[] == true</code> =&gt; <code>false</code>; <code>{} == true</code> \b报错</li>\n</ul>\n</blockquote>\n<h2 id=\"自动转换\"><a href=\"#自动转换\" class=\"headerlink\" title=\"自动转换\"></a>自动转换</h2><blockquote>\n<p>自动转换的规则是这样的：预期什么类型的值，就调用该类型的转换函数。比如，某个位置预期为字符串，就调用<code>String</code>函数进行转换。如果该位置即可以是字符串，也可能是数值，那么默认转为数值。</p>\n</blockquote>\n<h3 id=\"自动转换为布尔值\"><a href=\"#自动转换为布尔值\" class=\"headerlink\" title=\"自动转换为布尔值\"></a>自动转换为布尔值</h3><blockquote>\n<p>比如 <code>if</code> 的判断语句，三元运算符；他们内部均调用 <code>Boolean</code> 隐式转换数据类型</p>\n</blockquote>\n<h3 id=\"自动转换为字符串\"><a href=\"#自动转换为字符串\" class=\"headerlink\" title=\"自动转换为字符串\"></a>自动转换为字符串</h3><blockquote>\n<p>主要是字符串的拼接， <code>&#39;string&#39; + {}</code>等类似表达式加号后面将转换为字符串<br>规则： 复杂类型 =》 原始类型 =》 <code>string</code></p>\n</blockquote>\n<h3 id=\"自动转换为数值\"><a href=\"#自动转换为数值\" class=\"headerlink\" title=\"自动转换为数值\"></a>自动转换为数值</h3><blockquote>\n<p>系统在需要出现数值的地方，通过<code>Number</code>隐式转换数据类型</p>\n<p>除了加法运算符（<code>+</code>）有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值。<br>一元运算符也存在隐式转换： <code>-true // -1</code></p>\n</blockquote>\n<h3 id=\"的隐形转换\"><a href=\"#的隐形转换\" class=\"headerlink\" title=\"==的隐形转换\"></a><code>==</code>的隐形转换</h3><blockquote>\n<ul>\n<li>如果比较的两者中有布尔值 <code>Boolean</code>，会把 <code>Boolean</code> 先转换为对应的 <code>Number</code> ，即 <code>0</code> 和 <code>1</code>，然后进行比较。</li>\n<li>如果比较的双方中有一方为 <code>Boolean</code> ，一方为 <code>String</code> 时，则会先将双方转换为数字，然后进行比较。</li>\n<li>如果比较的双方中有一方为 <code>Number</code> ，一方为 <code>String</code> 时，会把 <code>String</code> 通过 <code>Number()</code> 方法转换为数字，然后进行比较。</li>\n<li>如果比较的双方中有一方为 <code>Number</code> ，一方为 <code>Object</code> 时，则会调用 <code>Number</code> 方法将 <code>Object</code> 转换为数字，然后进行比较。</li>\n</ul>\n<p>其实总结来看，尤其是复杂类型的数据，隐式转换可能不止一次，比如下例中的 变量<code>a</code>，<code>a == 1</code> 比较时，<code>a</code>的<code>valueOf</code>返回<code>&#39;1&#39;</code></p>\n<p>此时就相当于 <code>&#39;1&#39; == 1</code> 的比较，<code>&#39;1&#39;</code>要继续转换成数字1与其比较</p>\n<p>给我的感觉就是在不存在<code>string</code>的情况下，一切都在向<code>number</code>转化</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"attr\">a</span>: <span class=\"number\">222</span>&#125;</span><br><span class=\"line\">a == <span class=\"number\">1</span> <span class=\"comment\">//false</span></span><br><span class=\"line\">a.valueOf() <span class=\"comment\">//&#123;a: 222&#125;</span></span><br><span class=\"line\">a.toString() <span class=\"comment\">//\"[object Object]\"</span></span><br><span class=\"line\">a == <span class=\"string\">\"[object Object]\"</span> <span class=\"comment\">//true</span></span><br><span class=\"line\">a.valueOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"string\">'1'</span>&#125;</span><br><span class=\"line\">a == <span class=\"string\">\"[object Object]\"</span> <span class=\"comment\">//false</span></span><br><span class=\"line\">a == <span class=\"number\">1</span> <span class=\"comment\">//true</span></span><br><span class=\"line\">a.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> <span class=\"string\">'2'</span>&#125;</span><br><span class=\"line\">a == <span class=\"number\">1</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"number\">1</span> == a  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"number\">2</span> == a  <span class=\"comment\">//false</span></span><br><span class=\"line\">a == <span class=\"string\">'1'</span> <span class=\"comment\">//true</span></span><br><span class=\"line\">a == <span class=\"string\">'2'</span> <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"comment\">//=================</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"number\">1</span>]</span><br><span class=\"line\">b==<span class=\"number\">1</span> <span class=\"comment\">//true</span></span><br><span class=\"line\">b==<span class=\"string\">'1'</span> <span class=\"comment\">//true</span></span><br><span class=\"line\">b.valueOf() <span class=\"comment\">//[1]</span></span><br><span class=\"line\">b.toString() <span class=\"comment\">//\"1\"</span></span><br><span class=\"line\">b.valueOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"string\">'2'</span>&#125;</span><br><span class=\"line\">b==<span class=\"string\">'1'</span> <span class=\"comment\">//false</span></span><br><span class=\"line\">b==<span class=\"string\">'2'</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">// =========================以上总结Object + string 或 Object + number 是先valueOf在toString</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"四舍五入-amp-取整\"><a href=\"#四舍五入-amp-取整\" class=\"headerlink\" title=\"四舍五入 \b&amp; 取整\"></a>四舍五入 \b&amp; 取整</h2><ul>\n<li>保留小数点后 n 位 （四舍五入）返回字符串<ul>\n<li>num.toFixed(n)</li>\n</ul>\n</li>\n<li>直接取整，不考虑小数点后面的值<ul>\n<li>parseInt(num or string, n)</li>\n<li>n 表示以n进制取整</li>\n</ul>\n</li>\n<li>向上取整 返回数字<ul>\n<li>Math.ceil(num)</li>\n</ul>\n</li>\n<li>向下取整 返回数字<ul>\n<li>Math.floor(num)</li>\n</ul>\n</li>\n<li>四舍五入取整 返回数字<ul>\n<li>Math.round(num)</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>本片文章参考自<a href=\"https://wangdoc.com/javascript/features/conversion.html\" target=\"_blank\" rel=\"noopener\">https://wangdoc.com/javascript/features/conversion.html</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/superdog007/article/details/50800979\" target=\"_blank\" rel=\"noopener\">js取float型小数点后两位数的方法</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"加减乘除运算\"><a href=\"#加减乘除运算\" class=\"headerlink\" title=\"加减乘除运算\"></a>加减乘除运算</h2><blockquote>\n<ul>\n<li>运算符会将其两边非数字类型的值经过 <code>Number</code> 转换为数值类型</li>\n<li><code>字符串 + 数值</code> 时，返回拼接字符串</li>\n<li><code>字符串 - 或 * 或 / 或 % 数值</code> 时，返回数值类型，字符串 <code>Number</code> 转换失败返回 <code>NaN</code></li>\n<li>一切与<code>NaN</code>有关的运算操作，均返回 <code>NaN</code></li>\n</ul>\n</blockquote>\n<h2 id=\"Number\"><a href=\"#Number\" class=\"headerlink\" title=\"Number()\"></a>Number()</h2><blockquote>\n<p><code>Number</code> 转换相比\b <code>parseInt</code>、<code>parseFloat</code> 要相对严格的多，只要存在转换失败的因素即返回 <code>NaN</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"number\">123</span>) <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">'123'</span>) <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">'123sss'</span>) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"literal\">undefined</span>) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"literal\">null</span>) <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"literal\">false</span>) <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"literal\">true</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">''</span>) <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>([<span class=\"number\">5</span>]) <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(&#123;&#125;) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"comment\">// Number转换对象时，先调用对象的valueOf方法，如果\b该方法返回对象，</span></span><br><span class=\"line\"><span class=\"comment\">// 则再调用对象的toString方法，如若toString返回对象则Number报错；</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">'12.00a'</span>) <span class=\"comment\">//12</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'12.001a'</span>) <span class=\"comment\">//12</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">'12.001a'</span>) <span class=\"comment\">//12.001</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">'a12.001a'</span>) <span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">'a12.001'</span>) <span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'12.001'</span>) <span class=\"comment\">//12</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"number\">110</span>,<span class=\"number\">2</span>) <span class=\"comment\">//6 以2进制 取整</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String()\"></a>String()</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"number\">123</span>) <span class=\"comment\">// \"123\"</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"string\">'abc'</span>) <span class=\"comment\">// \"abc\"</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"literal\">true</span>) <span class=\"comment\">// \"true\"</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"literal\">undefined</span>) <span class=\"comment\">// \"undefined\"</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"literal\">null</span>) <span class=\"comment\">// \"null\"</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]) <span class=\"comment\">// \"1,2,3\"</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(&#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;) <span class=\"comment\">// \"[object Object]\"</span></span><br><span class=\"line\"><span class=\"comment\">// String转换对象时，同Number，只不过调用valueOf、toString的顺序相反，先toString在valueOf</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Boolean\"><a href=\"#Boolean\" class=\"headerlink\" title=\"Boolean()\"></a>Boolean()</h2><blockquote>\n<p>除了以下五个值的转换结果为 <code>false</code>，其他的值全部为 <code>true</code></p>\n<ul>\n<li><code>undefined</code></li>\n<li><code>null</code></li>\n<li><code>-0</code>或<code>+0</code></li>\n<li><code>NaN</code></li>\n<li><code>&#39;&#39;</code>（空)<br>注意点是 <code>Boolean([])</code> =&gt; <code>true</code>，但是<code>[] == true</code> =&gt; <code>false</code>; <code>{} == true</code> \b报错</li>\n</ul>\n</blockquote>\n<h2 id=\"自动转换\"><a href=\"#自动转换\" class=\"headerlink\" title=\"自动转换\"></a>自动转换</h2><blockquote>\n<p>自动转换的规则是这样的：预期什么类型的值，就调用该类型的转换函数。比如，某个位置预期为字符串，就调用<code>String</code>函数进行转换。如果该位置即可以是字符串，也可能是数值，那么默认转为数值。</p>\n</blockquote>\n<h3 id=\"自动转换为布尔值\"><a href=\"#自动转换为布尔值\" class=\"headerlink\" title=\"自动转换为布尔值\"></a>自动转换为布尔值</h3><blockquote>\n<p>比如 <code>if</code> 的判断语句，三元运算符；他们内部均调用 <code>Boolean</code> 隐式转换数据类型</p>\n</blockquote>\n<h3 id=\"自动转换为字符串\"><a href=\"#自动转换为字符串\" class=\"headerlink\" title=\"自动转换为字符串\"></a>自动转换为字符串</h3><blockquote>\n<p>主要是字符串的拼接， <code>&#39;string&#39; + {}</code>等类似表达式加号后面将转换为字符串<br>规则： 复杂类型 =》 原始类型 =》 <code>string</code></p>\n</blockquote>\n<h3 id=\"自动转换为数值\"><a href=\"#自动转换为数值\" class=\"headerlink\" title=\"自动转换为数值\"></a>自动转换为数值</h3><blockquote>\n<p>系统在需要出现数值的地方，通过<code>Number</code>隐式转换数据类型</p>\n<p>除了加法运算符（<code>+</code>）有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值。<br>一元运算符也存在隐式转换： <code>-true // -1</code></p>\n</blockquote>\n<h3 id=\"的隐形转换\"><a href=\"#的隐形转换\" class=\"headerlink\" title=\"==的隐形转换\"></a><code>==</code>的隐形转换</h3><blockquote>\n<ul>\n<li>如果比较的两者中有布尔值 <code>Boolean</code>，会把 <code>Boolean</code> 先转换为对应的 <code>Number</code> ，即 <code>0</code> 和 <code>1</code>，然后进行比较。</li>\n<li>如果比较的双方中有一方为 <code>Boolean</code> ，一方为 <code>String</code> 时，则会先将双方转换为数字，然后进行比较。</li>\n<li>如果比较的双方中有一方为 <code>Number</code> ，一方为 <code>String</code> 时，会把 <code>String</code> 通过 <code>Number()</code> 方法转换为数字，然后进行比较。</li>\n<li>如果比较的双方中有一方为 <code>Number</code> ，一方为 <code>Object</code> 时，则会调用 <code>Number</code> 方法将 <code>Object</code> 转换为数字，然后进行比较。</li>\n</ul>\n<p>其实总结来看，尤其是复杂类型的数据，隐式转换可能不止一次，比如下例中的 变量<code>a</code>，<code>a == 1</code> 比较时，<code>a</code>的<code>valueOf</code>返回<code>&#39;1&#39;</code></p>\n<p>此时就相当于 <code>&#39;1&#39; == 1</code> 的比较，<code>&#39;1&#39;</code>要继续转换成数字1与其比较</p>\n<p>给我的感觉就是在不存在<code>string</code>的情况下，一切都在向<code>number</code>转化</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"attr\">a</span>: <span class=\"number\">222</span>&#125;</span><br><span class=\"line\">a == <span class=\"number\">1</span> <span class=\"comment\">//false</span></span><br><span class=\"line\">a.valueOf() <span class=\"comment\">//&#123;a: 222&#125;</span></span><br><span class=\"line\">a.toString() <span class=\"comment\">//\"[object Object]\"</span></span><br><span class=\"line\">a == <span class=\"string\">\"[object Object]\"</span> <span class=\"comment\">//true</span></span><br><span class=\"line\">a.valueOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"string\">'1'</span>&#125;</span><br><span class=\"line\">a == <span class=\"string\">\"[object Object]\"</span> <span class=\"comment\">//false</span></span><br><span class=\"line\">a == <span class=\"number\">1</span> <span class=\"comment\">//true</span></span><br><span class=\"line\">a.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> <span class=\"string\">'2'</span>&#125;</span><br><span class=\"line\">a == <span class=\"number\">1</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"number\">1</span> == a  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"number\">2</span> == a  <span class=\"comment\">//false</span></span><br><span class=\"line\">a == <span class=\"string\">'1'</span> <span class=\"comment\">//true</span></span><br><span class=\"line\">a == <span class=\"string\">'2'</span> <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"comment\">//=================</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"number\">1</span>]</span><br><span class=\"line\">b==<span class=\"number\">1</span> <span class=\"comment\">//true</span></span><br><span class=\"line\">b==<span class=\"string\">'1'</span> <span class=\"comment\">//true</span></span><br><span class=\"line\">b.valueOf() <span class=\"comment\">//[1]</span></span><br><span class=\"line\">b.toString() <span class=\"comment\">//\"1\"</span></span><br><span class=\"line\">b.valueOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"string\">'2'</span>&#125;</span><br><span class=\"line\">b==<span class=\"string\">'1'</span> <span class=\"comment\">//false</span></span><br><span class=\"line\">b==<span class=\"string\">'2'</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">// =========================以上总结Object + string 或 Object + number 是先valueOf在toString</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"四舍五入-amp-取整\"><a href=\"#四舍五入-amp-取整\" class=\"headerlink\" title=\"四舍五入 \b&amp; 取整\"></a>四舍五入 \b&amp; 取整</h2><ul>\n<li>保留小数点后 n 位 （四舍五入）返回字符串<ul>\n<li>num.toFixed(n)</li>\n</ul>\n</li>\n<li>直接取整，不考虑小数点后面的值<ul>\n<li>parseInt(num or string, n)</li>\n<li>n 表示以n进制取整</li>\n</ul>\n</li>\n<li>向上取整 返回数字<ul>\n<li>Math.ceil(num)</li>\n</ul>\n</li>\n<li>向下取整 返回数字<ul>\n<li>Math.floor(num)</li>\n</ul>\n</li>\n<li>四舍五入取整 返回数字<ul>\n<li>Math.round(num)</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>本片文章参考自<a href=\"https://wangdoc.com/javascript/features/conversion.html\" target=\"_blank\" rel=\"noopener\">https://wangdoc.com/javascript/features/conversion.html</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/superdog007/article/details/50800979\" target=\"_blank\" rel=\"noopener\">js取float型小数点后两位数的方法</a></p>\n</blockquote>\n"},{"title":"router和route","date":"2018-08-22T11:48:50.000Z","description":"this.$router与this.$route的区别","_content":"> `this.$router`访问路由器，`this.$route`访问当前路由\n> \n> `this.$router.history.current === this.$route`\n> \n> [参考链接](https://router.vuejs.org/zh/guide/essentials/navigation.html)\n\n### this.$route\n\n```js\n{\n  fullPath: \"/a/b/9567216?c=1#one\",\n  hash: \"#one\",\n  matched: [{…}],\n  meta: {},\n  name: \"a-b-id\",\n  params: {id: \"9567216\"},\n  path: \"/a/b/9567216\",\n  query: {c: \"1\"}\n}\n\n```\n\n### this.$router\n主要应用他的方法导航链接\n\n```\n// 前进 n 个历史记录\nthis.$router.go(n)\n// 接受字符串\nthis.$router.push('/login');\n// 不会产生历史记录\nthis.$router.replace('/login');\n// 或接受一个对象\nthis.$router.push({path: `user/${id}`, query:{name: 'lee'}})\n\n```\n\n注意的是：传入一个对象时，如果存在 `path` 的时候，`param`参数将被忽略，应该将 `param` 部分动态拼接到 `path` 中","source":"_posts/router和route.md","raw":"---\ntitle: router和route\ndate: 2018-08-22 19:48:50\ntags: Vue\ndescription: this.$router与this.$route的区别\ncategories: Vue\n---\n> `this.$router`访问路由器，`this.$route`访问当前路由\n> \n> `this.$router.history.current === this.$route`\n> \n> [参考链接](https://router.vuejs.org/zh/guide/essentials/navigation.html)\n\n### this.$route\n\n```js\n{\n  fullPath: \"/a/b/9567216?c=1#one\",\n  hash: \"#one\",\n  matched: [{…}],\n  meta: {},\n  name: \"a-b-id\",\n  params: {id: \"9567216\"},\n  path: \"/a/b/9567216\",\n  query: {c: \"1\"}\n}\n\n```\n\n### this.$router\n主要应用他的方法导航链接\n\n```\n// 前进 n 个历史记录\nthis.$router.go(n)\n// 接受字符串\nthis.$router.push('/login');\n// 不会产生历史记录\nthis.$router.replace('/login');\n// 或接受一个对象\nthis.$router.push({path: `user/${id}`, query:{name: 'lee'}})\n\n```\n\n注意的是：传入一个对象时，如果存在 `path` 的时候，`param`参数将被忽略，应该将 `param` 部分动态拼接到 `path` 中","slug":"router和route","published":1,"updated":"2018-10-10T06:23:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7kpl02o0019jcs6fbwbteya","content":"<blockquote>\n<p><code>this.$router</code>访问路由器，<code>this.$route</code>访问当前路由</p>\n<p><code>this.$router.history.current === this.$route</code></p>\n<p><a href=\"https://router.vuejs.org/zh/guide/essentials/navigation.html\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n</blockquote>\n<h3 id=\"this-route\"><a href=\"#this-route\" class=\"headerlink\" title=\"this.$route\"></a>this.$route</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  fullPath: <span class=\"string\">\"/a/b/9567216?c=1#one\"</span>,</span><br><span class=\"line\">  hash: <span class=\"string\">\"#one\"</span>,</span><br><span class=\"line\">  matched: [&#123;…&#125;],</span><br><span class=\"line\">  meta: &#123;&#125;,</span><br><span class=\"line\">  name: <span class=\"string\">\"a-b-id\"</span>,</span><br><span class=\"line\">  params: &#123;<span class=\"attr\">id</span>: <span class=\"string\">\"9567216\"</span>&#125;,</span><br><span class=\"line\">  path: <span class=\"string\">\"/a/b/9567216\"</span>,</span><br><span class=\"line\">  query: &#123;<span class=\"attr\">c</span>: <span class=\"string\">\"1\"</span>&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"this-router\"><a href=\"#this-router\" class=\"headerlink\" title=\"this.$router\"></a>this.$router</h3><p>主要应用他的方法导航链接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 前进 n 个历史记录</span><br><span class=\"line\">this.$router.go(n)</span><br><span class=\"line\">// 接受字符串</span><br><span class=\"line\">this.$router.push(&apos;/login&apos;);</span><br><span class=\"line\">// 不会产生历史记录</span><br><span class=\"line\">this.$router.replace(&apos;/login&apos;);</span><br><span class=\"line\">// 或接受一个对象</span><br><span class=\"line\">this.$router.push(&#123;path: `user/$&#123;id&#125;`, query:&#123;name: &apos;lee&apos;&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<p>注意的是：传入一个对象时，如果存在 <code>path</code> 的时候，<code>param</code>参数将被忽略，应该将 <code>param</code> 部分动态拼接到 <code>path</code> 中</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><code>this.$router</code>访问路由器，<code>this.$route</code>访问当前路由</p>\n<p><code>this.$router.history.current === this.$route</code></p>\n<p><a href=\"https://router.vuejs.org/zh/guide/essentials/navigation.html\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n</blockquote>\n<h3 id=\"this-route\"><a href=\"#this-route\" class=\"headerlink\" title=\"this.$route\"></a>this.$route</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  fullPath: <span class=\"string\">\"/a/b/9567216?c=1#one\"</span>,</span><br><span class=\"line\">  hash: <span class=\"string\">\"#one\"</span>,</span><br><span class=\"line\">  matched: [&#123;…&#125;],</span><br><span class=\"line\">  meta: &#123;&#125;,</span><br><span class=\"line\">  name: <span class=\"string\">\"a-b-id\"</span>,</span><br><span class=\"line\">  params: &#123;<span class=\"attr\">id</span>: <span class=\"string\">\"9567216\"</span>&#125;,</span><br><span class=\"line\">  path: <span class=\"string\">\"/a/b/9567216\"</span>,</span><br><span class=\"line\">  query: &#123;<span class=\"attr\">c</span>: <span class=\"string\">\"1\"</span>&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"this-router\"><a href=\"#this-router\" class=\"headerlink\" title=\"this.$router\"></a>this.$router</h3><p>主要应用他的方法导航链接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 前进 n 个历史记录</span><br><span class=\"line\">this.$router.go(n)</span><br><span class=\"line\">// 接受字符串</span><br><span class=\"line\">this.$router.push(&apos;/login&apos;);</span><br><span class=\"line\">// 不会产生历史记录</span><br><span class=\"line\">this.$router.replace(&apos;/login&apos;);</span><br><span class=\"line\">// 或接受一个对象</span><br><span class=\"line\">this.$router.push(&#123;path: `user/$&#123;id&#125;`, query:&#123;name: &apos;lee&apos;&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<p>注意的是：传入一个对象时，如果存在 <code>path</code> 的时候，<code>param</code>参数将被忽略，应该将 <code>param</code> 部分动态拼接到 <code>path</code> 中</p>\n"},{"title":"vue-cli项目部署到gitee Pages","date":"2018-08-14T15:50:33.000Z","description":"通过 vue-cli 搭建的spa项目,可以部署到giteePages","keywords":"vue vue-cli pages spa","_content":"\n> 通过 `vue-cli` 搭建的spa项目,可以部署到giteePages\n\n## 首先 通过 vue-cli 搭建自己的vue项目\n\n确定 `npm run dev`可以正常启动项目\n并将该项目放到 \b码云上\n\n## 更改 `config/index.js` 文件\n\n\n将给文件下 `build` 对象下的 `assetsPublicPath` 修改为 `./`\n\n![](/teresa/images/config_index.js.jpg)\n\n## 执行 \b`npm run build`\n\n会生成一个`dist`文件\n编译后提交推送代码（ps： 记得将dist文件从gitignore中移出）\n\n## 部署gitee Pages\n\n部署的时候指定文件夹为`dist`即可\n\n部署成功后即可按照提示链接访问你的Vue页面\n","source":"_posts/vue-cli.md","raw":"---\ntitle: vue-cli项目部署到gitee Pages\ndate: 2018-08-14 23:50:33\ndescription: 通过 vue-cli 搭建的spa项目,可以部署到giteePages\nkeywords: vue vue-cli pages spa\ntags: [Vue, vue-cli, spa]\ncategories: Vue\n---\n\n> 通过 `vue-cli` 搭建的spa项目,可以部署到giteePages\n\n## 首先 通过 vue-cli 搭建自己的vue项目\n\n确定 `npm run dev`可以正常启动项目\n并将该项目放到 \b码云上\n\n## 更改 `config/index.js` 文件\n\n\n将给文件下 `build` 对象下的 `assetsPublicPath` 修改为 `./`\n\n![](/teresa/images/config_index.js.jpg)\n\n## 执行 \b`npm run build`\n\n会生成一个`dist`文件\n编译后提交推送代码（ps： 记得将dist文件从gitignore中移出）\n\n## 部署gitee Pages\n\n部署的时候指定文件夹为`dist`即可\n\n部署成功后即可按照提示链接访问你的Vue页面\n","slug":"vue-cli","published":1,"updated":"2018-10-10T06:24:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7kpl02q001cjcs63845bver","content":"<blockquote>\n<p>通过 <code>vue-cli</code> 搭建的spa项目,可以部署到giteePages</p>\n</blockquote>\n<h2 id=\"首先-通过-vue-cli-搭建自己的vue项目\"><a href=\"#首先-通过-vue-cli-搭建自己的vue项目\" class=\"headerlink\" title=\"首先 通过 vue-cli 搭建自己的vue项目\"></a>首先 通过 vue-cli 搭建自己的vue项目</h2><p>确定 <code>npm run dev</code>可以正常启动项目<br>并将该项目放到 \b码云上</p>\n<h2 id=\"更改-config-index-js-文件\"><a href=\"#更改-config-index-js-文件\" class=\"headerlink\" title=\"更改 config/index.js 文件\"></a>更改 <code>config/index.js</code> 文件</h2><p>将给文件下 <code>build</code> 对象下的 <code>assetsPublicPath</code> 修改为 <code>./</code></p>\n<p><img src=\"/teresa/images/config_index.js.jpg\" alt=\"\"></p>\n<h2 id=\"执行-npm-run-build\"><a href=\"#执行-npm-run-build\" class=\"headerlink\" title=\"执行 \bnpm run build\"></a>执行 \b<code>npm run build</code></h2><p>会生成一个<code>dist</code>文件<br>编译后提交推送代码（ps： 记得将dist文件从gitignore中移出）</p>\n<h2 id=\"部署gitee-Pages\"><a href=\"#部署gitee-Pages\" class=\"headerlink\" title=\"部署gitee Pages\"></a>部署gitee Pages</h2><p>部署的时候指定文件夹为<code>dist</code>即可</p>\n<p>部署成功后即可按照提示链接访问你的Vue页面</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>通过 <code>vue-cli</code> 搭建的spa项目,可以部署到giteePages</p>\n</blockquote>\n<h2 id=\"首先-通过-vue-cli-搭建自己的vue项目\"><a href=\"#首先-通过-vue-cli-搭建自己的vue项目\" class=\"headerlink\" title=\"首先 通过 vue-cli 搭建自己的vue项目\"></a>首先 通过 vue-cli 搭建自己的vue项目</h2><p>确定 <code>npm run dev</code>可以正常启动项目<br>并将该项目放到 \b码云上</p>\n<h2 id=\"更改-config-index-js-文件\"><a href=\"#更改-config-index-js-文件\" class=\"headerlink\" title=\"更改 config/index.js 文件\"></a>更改 <code>config/index.js</code> 文件</h2><p>将给文件下 <code>build</code> 对象下的 <code>assetsPublicPath</code> 修改为 <code>./</code></p>\n<p><img src=\"/teresa/images/config_index.js.jpg\" alt=\"\"></p>\n<h2 id=\"执行-npm-run-build\"><a href=\"#执行-npm-run-build\" class=\"headerlink\" title=\"执行 \bnpm run build\"></a>执行 \b<code>npm run build</code></h2><p>会生成一个<code>dist</code>文件<br>编译后提交推送代码（ps： 记得将dist文件从gitignore中移出）</p>\n<h2 id=\"部署gitee-Pages\"><a href=\"#部署gitee-Pages\" class=\"headerlink\" title=\"部署gitee Pages\"></a>部署gitee Pages</h2><p>部署的时候指定文件夹为<code>dist</code>即可</p>\n<p>部署成功后即可按照提示链接访问你的Vue页面</p>\n"},{"title":"testOnepage","date":"2018-08-13T16:24:46.000Z","description":"how to make a blog","_content":"\nthis is my first page\n","source":"_posts/testOnepage.md","raw":"---\ntitle: testOnepage\ndate: 2018-08-14 00:24:46\ndescription: how to make a blog\n---\n\nthis is my first page\n","slug":"testOnepage","published":1,"updated":"2018-08-14T15:04:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7kpl02s001hjcs62rek77jx","content":"<p>this is my first page</p>\n","site":{"data":{}},"excerpt":"","more":"<p>this is my first page</p>\n"},{"title":"最佳实践","date":"2018-09-09T14:22:35.000Z","description":"JavaScript DOM编程艺术的最佳实践章节整理","keywords":"JavaScript DOM编程艺术的最佳实践章节整理","_content":"## 读JavaScript DOM编程艺术 笔记\n### 平稳退化\n> 所谓平稳退化就是说：虽然某些方法不可用，但是最基本的操作仍能顺利完成\n>\n> 比如在网页不支持JavaScript的情况下也能正常工作\n### 渐进增强\n> 所谓“渐进增强”就是用一些额外的信息，去包裹原始数据。\n> \n> 按照渐进增强的原则创造出来的页面都符合平稳退化的原则\n\n### 向后兼容\n> 比如当浏览器不支持JavaScript的部分语法的时候，我们可以使用对象检测方法，避免因浏览器不支持而出现问题；从而，让网页支持一些“老”浏览器的正常运行\n\n### 性能考虑\n> 脚本对web应用整体性能的影响\n\n- 尽量少访问DOM和尽量减少标记\n- 合并和放置脚本\n  - 一般来说，根据http规范，浏览器每次从同一个域名中最多能同时加载2个文件（但是，现在已经发展到可最多请求6个）；\n- 下载脚本\b期间，也不会下载其他文件，所有其他文件要在等待脚本下载完毕后下载；（现在有async异步加载属性）\n- 压缩脚本\n  - 所谓压缩脚本，就是将不必要的字节比如空格注释统统删除。","source":"_posts/最佳实践.md","raw":"---\ntitle: 最佳实践\ndate: 2018-09-09 22:22:35\ntags: 前端\ndescription: JavaScript DOM编程艺术的最佳实践章节整理\ncategories: 性能优化\nkeywords: JavaScript DOM编程艺术的最佳实践章节整理\n---\n## 读JavaScript DOM编程艺术 笔记\n### 平稳退化\n> 所谓平稳退化就是说：虽然某些方法不可用，但是最基本的操作仍能顺利完成\n>\n> 比如在网页不支持JavaScript的情况下也能正常工作\n### 渐进增强\n> 所谓“渐进增强”就是用一些额外的信息，去包裹原始数据。\n> \n> 按照渐进增强的原则创造出来的页面都符合平稳退化的原则\n\n### 向后兼容\n> 比如当浏览器不支持JavaScript的部分语法的时候，我们可以使用对象检测方法，避免因浏览器不支持而出现问题；从而，让网页支持一些“老”浏览器的正常运行\n\n### 性能考虑\n> 脚本对web应用整体性能的影响\n\n- 尽量少访问DOM和尽量减少标记\n- 合并和放置脚本\n  - 一般来说，根据http规范，浏览器每次从同一个域名中最多能同时加载2个文件（但是，现在已经发展到可最多请求6个）；\n- 下载脚本\b期间，也不会下载其他文件，所有其他文件要在等待脚本下载完毕后下载；（现在有async异步加载属性）\n- 压缩脚本\n  - 所谓压缩脚本，就是将不必要的字节比如空格注释统统删除。","slug":"最佳实践","published":1,"updated":"2018-09-10T06:10:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7kpl02t001kjcs6wx7218y8","content":"<h2 id=\"读JavaScript-DOM编程艺术-笔记\"><a href=\"#读JavaScript-DOM编程艺术-笔记\" class=\"headerlink\" title=\"读JavaScript DOM编程艺术 笔记\"></a>读JavaScript DOM编程艺术 笔记</h2><h3 id=\"平稳退化\"><a href=\"#平稳退化\" class=\"headerlink\" title=\"平稳退化\"></a>平稳退化</h3><blockquote>\n<p>所谓平稳退化就是说：虽然某些方法不可用，但是最基本的操作仍能顺利完成</p>\n<p>比如在网页不支持JavaScript的情况下也能正常工作</p>\n</blockquote>\n<h3 id=\"渐进增强\"><a href=\"#渐进增强\" class=\"headerlink\" title=\"渐进增强\"></a>渐进增强</h3><blockquote>\n<p>所谓“渐进增强”就是用一些额外的信息，去包裹原始数据。</p>\n<p>按照渐进增强的原则创造出来的页面都符合平稳退化的原则</p>\n</blockquote>\n<h3 id=\"向后兼容\"><a href=\"#向后兼容\" class=\"headerlink\" title=\"向后兼容\"></a>向后兼容</h3><blockquote>\n<p>比如当浏览器不支持JavaScript的部分语法的时候，我们可以使用对象检测方法，避免因浏览器不支持而出现问题；从而，让网页支持一些“老”浏览器的正常运行</p>\n</blockquote>\n<h3 id=\"性能考虑\"><a href=\"#性能考虑\" class=\"headerlink\" title=\"性能考虑\"></a>性能考虑</h3><blockquote>\n<p>脚本对web应用整体性能的影响</p>\n</blockquote>\n<ul>\n<li>尽量少访问DOM和尽量减少标记</li>\n<li>合并和放置脚本<ul>\n<li>一般来说，根据http规范，浏览器每次从同一个域名中最多能同时加载2个文件（但是，现在已经发展到可最多请求6个）；</li>\n</ul>\n</li>\n<li>下载脚本\b期间，也不会下载其他文件，所有其他文件要在等待脚本下载完毕后下载；（现在有async异步加载属性）</li>\n<li>压缩脚本<ul>\n<li>所谓压缩脚本，就是将不必要的字节比如空格注释统统删除。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"读JavaScript-DOM编程艺术-笔记\"><a href=\"#读JavaScript-DOM编程艺术-笔记\" class=\"headerlink\" title=\"读JavaScript DOM编程艺术 笔记\"></a>读JavaScript DOM编程艺术 笔记</h2><h3 id=\"平稳退化\"><a href=\"#平稳退化\" class=\"headerlink\" title=\"平稳退化\"></a>平稳退化</h3><blockquote>\n<p>所谓平稳退化就是说：虽然某些方法不可用，但是最基本的操作仍能顺利完成</p>\n<p>比如在网页不支持JavaScript的情况下也能正常工作</p>\n</blockquote>\n<h3 id=\"渐进增强\"><a href=\"#渐进增强\" class=\"headerlink\" title=\"渐进增强\"></a>渐进增强</h3><blockquote>\n<p>所谓“渐进增强”就是用一些额外的信息，去包裹原始数据。</p>\n<p>按照渐进增强的原则创造出来的页面都符合平稳退化的原则</p>\n</blockquote>\n<h3 id=\"向后兼容\"><a href=\"#向后兼容\" class=\"headerlink\" title=\"向后兼容\"></a>向后兼容</h3><blockquote>\n<p>比如当浏览器不支持JavaScript的部分语法的时候，我们可以使用对象检测方法，避免因浏览器不支持而出现问题；从而，让网页支持一些“老”浏览器的正常运行</p>\n</blockquote>\n<h3 id=\"性能考虑\"><a href=\"#性能考虑\" class=\"headerlink\" title=\"性能考虑\"></a>性能考虑</h3><blockquote>\n<p>脚本对web应用整体性能的影响</p>\n</blockquote>\n<ul>\n<li>尽量少访问DOM和尽量减少标记</li>\n<li>合并和放置脚本<ul>\n<li>一般来说，根据http规范，浏览器每次从同一个域名中最多能同时加载2个文件（但是，现在已经发展到可最多请求6个）；</li>\n</ul>\n</li>\n<li>下载脚本\b期间，也不会下载其他文件，所有其他文件要在等待脚本下载完毕后下载；（现在有async异步加载属性）</li>\n<li>压缩脚本<ul>\n<li>所谓压缩脚本，就是将不必要的字节比如空格注释统统删除。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"浏览器工作原理","date":"2018-08-28T08:38:05.000Z","description":"简记浏览器工作原理","keywords":"touch 移动端","_content":"\n## 300ms延迟\n点击移动端设备时，触发事件顺序：`touchstart` =》 `touchmove` =》 `touchend` =》 `click`\n在 `touchend` 事件后有 300 ms  延时（因为要确认是否进行双击）后再触发 `click` 事件\n\nTips：\n- 当触发了 `touchmove` 事件后，将不会触发 `click` 事件\n- 触发 `click` 事件前提是 `touchstart` `touchend` 事件可以正常触发；\n- 如果在 `touchstart` 事件处理程序里添加 `e.preventDefault()` 则浏览器误以为 `touchstart` 事件没有正常触发，由此会不触发 `click` 事件\n- `touchend` 事件 在 pc 端有延迟（约700ms），即不能再 `touchmove` 事件结束后立即触发 `touchend` 事件 在移动端没有延迟\n- `safari` 的橡皮筋效果 可以在 touchmove 事件处理程序后 添加 `e.preventDefault()` 阻止\n","source":"_posts/移动端touch事件.md","raw":"---\ntitle: 浏览器工作原理\ndate: 2018-08-28 16:38:05\ntags: 浏览器\ndescription: 简记浏览器工作原理\ncategories: 移动端\nkeywords: touch 移动端\n---\n\n## 300ms延迟\n点击移动端设备时，触发事件顺序：`touchstart` =》 `touchmove` =》 `touchend` =》 `click`\n在 `touchend` 事件后有 300 ms  延时（因为要确认是否进行双击）后再触发 `click` 事件\n\nTips：\n- 当触发了 `touchmove` 事件后，将不会触发 `click` 事件\n- 触发 `click` 事件前提是 `touchstart` `touchend` 事件可以正常触发；\n- 如果在 `touchstart` 事件处理程序里添加 `e.preventDefault()` 则浏览器误以为 `touchstart` 事件没有正常触发，由此会不触发 `click` 事件\n- `touchend` 事件 在 pc 端有延迟（约700ms），即不能再 `touchmove` 事件结束后立即触发 `touchend` 事件 在移动端没有延迟\n- `safari` 的橡皮筋效果 可以在 touchmove 事件处理程序后 添加 `e.preventDefault()` 阻止\n","slug":"移动端touch事件","published":1,"updated":"2018-12-20T09:40:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7kpl02u001njcs6dbspq1m9","content":"<h2 id=\"300ms延迟\"><a href=\"#300ms延迟\" class=\"headerlink\" title=\"300ms延迟\"></a>300ms延迟</h2><p>点击移动端设备时，触发事件顺序：<code>touchstart</code> =》 <code>touchmove</code> =》 <code>touchend</code> =》 <code>click</code><br>在 <code>touchend</code> 事件后有 300 ms  延时（因为要确认是否进行双击）后再触发 <code>click</code> 事件</p>\n<p>Tips：</p>\n<ul>\n<li>当触发了 <code>touchmove</code> 事件后，将不会触发 <code>click</code> 事件</li>\n<li>触发 <code>click</code> 事件前提是 <code>touchstart</code> <code>touchend</code> 事件可以正常触发；</li>\n<li>如果在 <code>touchstart</code> 事件处理程序里添加 <code>e.preventDefault()</code> 则浏览器误以为 <code>touchstart</code> 事件没有正常触发，由此会不触发 <code>click</code> 事件</li>\n<li><code>touchend</code> 事件 在 pc 端有延迟（约700ms），即不能再 <code>touchmove</code> 事件结束后立即触发 <code>touchend</code> 事件 在移动端没有延迟</li>\n<li><code>safari</code> 的橡皮筋效果 可以在 touchmove 事件处理程序后 添加 <code>e.preventDefault()</code> 阻止</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"300ms延迟\"><a href=\"#300ms延迟\" class=\"headerlink\" title=\"300ms延迟\"></a>300ms延迟</h2><p>点击移动端设备时，触发事件顺序：<code>touchstart</code> =》 <code>touchmove</code> =》 <code>touchend</code> =》 <code>click</code><br>在 <code>touchend</code> 事件后有 300 ms  延时（因为要确认是否进行双击）后再触发 <code>click</code> 事件</p>\n<p>Tips：</p>\n<ul>\n<li>当触发了 <code>touchmove</code> 事件后，将不会触发 <code>click</code> 事件</li>\n<li>触发 <code>click</code> 事件前提是 <code>touchstart</code> <code>touchend</code> 事件可以正常触发；</li>\n<li>如果在 <code>touchstart</code> 事件处理程序里添加 <code>e.preventDefault()</code> 则浏览器误以为 <code>touchstart</code> 事件没有正常触发，由此会不触发 <code>click</code> 事件</li>\n<li><code>touchend</code> 事件 在 pc 端有延迟（约700ms），即不能再 <code>touchmove</code> 事件结束后立即触发 <code>touchend</code> 事件 在移动端没有延迟</li>\n<li><code>safari</code> 的橡皮筋效果 可以在 touchmove 事件处理程序后 添加 <code>e.preventDefault()</code> 阻止</li>\n</ul>\n"},{"title":"浏览器工作原理","date":"2018-08-28T08:38:05.000Z","description":"简记浏览器工作原理","keywords":"浏览器的工作原理","_content":"> 本文主要参考 [浏览器的工作原理：新式网络浏览器幕后揭秘](https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The_browser_main_functionality)\n>\n> 此文做学习记录\n\n## 浏览器的高层结构\n浏览器的主要组件：\n- 用户界面 地址栏、前进后退、刷新按钮等（除了显示的页面外都是用户界面）\n- \b呈现引擎（负责显示页面）\n- 浏览器引擎（在用户界面与呈现引擎间传达指令）\n- 网络（用于网络调用，比如HTTP请求）\n- 用户界面后端（用于绘制基本的窗口小部件，比如组合框和窗口）\n- JavaScript解释器（解析、执行JavaScript）\n- 存储（这是持久层，浏览器在硬盘存储数据，比如cookie等）\n\n## 呈现引擎（渲染引擎）\n> 默认情况，呈现引擎可以显示HTML、XML和图片，通过插件也可以显示其他类型的内容，比如PDF；\n- Firefox使用的是Gecko\n- Safari和Chrome使用的是WebKit\n\n### 主流程\n主流程可以参考 [重绘重排](https://littlefaye.gitee.io/teresa/2018/08/28/重绘重排/)\n\n### 解析-综述\n> `解析` 是 `呈现引擎` 中的一个重要环节。\n> \n> `解析文档` 是指将文档转换成为有意义的结构。解析得到的结果\b通常是代表了文档结构的节点树，称作 `语法树` 或 `解析树` 。解析是以文档所遵循的语法规则为基础的。\n#### 解析器和词法分析器的组合\n解析的过程可以分为两个子过程： `词法分析` 和 `语法分析`\n\n- 词法分析：将输入内容分割成大量标记的过程\n- 语法分析：是应用语言的语法规则的过程\n\n解析器通常将解析工作分给以下两个组件来处理：\n- 词法分析器（标记生成器）：负责将内容分割成一个个的有效标记（词法分析器知道如何将无关字符比如空格、换行符分离出来）\n- 解析器：负责根据语言语法规则分析文档结构，从而构建解析树\n\n解析是一个迭代的\b过程。解析器想词法分析器请求一个新标记，并尝试将其与某条语法规则进行匹配。如果发现了匹配规则，解析器会将一个对应于该标记的节点添加到解析树，然后继续请求下一个标记。\n\n如果没有规则可以匹配，解析器就会将标记存储到内部，并继续请求标记，直至找到所有内部存储的标记匹配的规则。如果找不到任何匹配规则。解析器就会引发一个异常。意味着文档无效，包含语法错误。\n<div align=\"center\">\n  <img src=\"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/image011.png\" alt=\"源文档到解析树\">\n</div>\n\n#### 翻译\n很多时候，解析树不是最终产品。翻译是指将输入文档转换成另一种格式。编译就是一个例子。编译器可以将源代码编译成机器代码。\n<div align=\"center\">\n  <img src=\"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/image013.png\" alt=\"编译流程\">\n</div>","source":"_posts/浏览器工作原理.md","raw":"---\ntitle: 浏览器工作原理\ndate: 2018-08-28 16:38:05\ntags: 浏览器\ndescription: 简记浏览器工作原理\ncategories: 性能优化\nkeywords: 浏览器的工作原理\n---\n> 本文主要参考 [浏览器的工作原理：新式网络浏览器幕后揭秘](https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The_browser_main_functionality)\n>\n> 此文做学习记录\n\n## 浏览器的高层结构\n浏览器的主要组件：\n- 用户界面 地址栏、前进后退、刷新按钮等（除了显示的页面外都是用户界面）\n- \b呈现引擎（负责显示页面）\n- 浏览器引擎（在用户界面与呈现引擎间传达指令）\n- 网络（用于网络调用，比如HTTP请求）\n- 用户界面后端（用于绘制基本的窗口小部件，比如组合框和窗口）\n- JavaScript解释器（解析、执行JavaScript）\n- 存储（这是持久层，浏览器在硬盘存储数据，比如cookie等）\n\n## 呈现引擎（渲染引擎）\n> 默认情况，呈现引擎可以显示HTML、XML和图片，通过插件也可以显示其他类型的内容，比如PDF；\n- Firefox使用的是Gecko\n- Safari和Chrome使用的是WebKit\n\n### 主流程\n主流程可以参考 [重绘重排](https://littlefaye.gitee.io/teresa/2018/08/28/重绘重排/)\n\n### 解析-综述\n> `解析` 是 `呈现引擎` 中的一个重要环节。\n> \n> `解析文档` 是指将文档转换成为有意义的结构。解析得到的结果\b通常是代表了文档结构的节点树，称作 `语法树` 或 `解析树` 。解析是以文档所遵循的语法规则为基础的。\n#### 解析器和词法分析器的组合\n解析的过程可以分为两个子过程： `词法分析` 和 `语法分析`\n\n- 词法分析：将输入内容分割成大量标记的过程\n- 语法分析：是应用语言的语法规则的过程\n\n解析器通常将解析工作分给以下两个组件来处理：\n- 词法分析器（标记生成器）：负责将内容分割成一个个的有效标记（词法分析器知道如何将无关字符比如空格、换行符分离出来）\n- 解析器：负责根据语言语法规则分析文档结构，从而构建解析树\n\n解析是一个迭代的\b过程。解析器想词法分析器请求一个新标记，并尝试将其与某条语法规则进行匹配。如果发现了匹配规则，解析器会将一个对应于该标记的节点添加到解析树，然后继续请求下一个标记。\n\n如果没有规则可以匹配，解析器就会将标记存储到内部，并继续请求标记，直至找到所有内部存储的标记匹配的规则。如果找不到任何匹配规则。解析器就会引发一个异常。意味着文档无效，包含语法错误。\n<div align=\"center\">\n  <img src=\"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/image011.png\" alt=\"源文档到解析树\">\n</div>\n\n#### 翻译\n很多时候，解析树不是最终产品。翻译是指将输入文档转换成另一种格式。编译就是一个例子。编译器可以将源代码编译成机器代码。\n<div align=\"center\">\n  <img src=\"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/image013.png\" alt=\"编译流程\">\n</div>","slug":"浏览器工作原理","published":1,"updated":"2018-08-29T10:03:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7kpl02w001sjcs6jvic6hp2","content":"<blockquote>\n<p>本文主要参考 <a href=\"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The_browser_main_functionality\" target=\"_blank\" rel=\"noopener\">浏览器的工作原理：新式网络浏览器幕后揭秘</a></p>\n<p>此文做学习记录</p>\n</blockquote>\n<h2 id=\"浏览器的高层结构\"><a href=\"#浏览器的高层结构\" class=\"headerlink\" title=\"浏览器的高层结构\"></a>浏览器的高层结构</h2><p>浏览器的主要组件：</p>\n<ul>\n<li>用户界面 地址栏、前进后退、刷新按钮等（除了显示的页面外都是用户界面）</li>\n<li>\b呈现引擎（负责显示页面）</li>\n<li>浏览器引擎（在用户界面与呈现引擎间传达指令）</li>\n<li>网络（用于网络调用，比如HTTP请求）</li>\n<li>用户界面后端（用于绘制基本的窗口小部件，比如组合框和窗口）</li>\n<li>JavaScript解释器（解析、执行JavaScript）</li>\n<li>存储（这是持久层，浏览器在硬盘存储数据，比如cookie等）</li>\n</ul>\n<h2 id=\"呈现引擎（渲染引擎）\"><a href=\"#呈现引擎（渲染引擎）\" class=\"headerlink\" title=\"呈现引擎（渲染引擎）\"></a>呈现引擎（渲染引擎）</h2><blockquote>\n<p>默认情况，呈现引擎可以显示HTML、XML和图片，通过插件也可以显示其他类型的内容，比如PDF；</p>\n<ul>\n<li>Firefox使用的是Gecko</li>\n<li>Safari和Chrome使用的是WebKit</li>\n</ul>\n</blockquote>\n<h3 id=\"主流程\"><a href=\"#主流程\" class=\"headerlink\" title=\"主流程\"></a>主流程</h3><p>主流程可以参考 <a href=\"https://littlefaye.gitee.io/teresa/2018/08/28/重绘重排/\">重绘重排</a></p>\n<h3 id=\"解析-综述\"><a href=\"#解析-综述\" class=\"headerlink\" title=\"解析-综述\"></a>解析-综述</h3><blockquote>\n<p><code>解析</code> 是 <code>呈现引擎</code> 中的一个重要环节。</p>\n<p><code>解析文档</code> 是指将文档转换成为有意义的结构。解析得到的结果\b通常是代表了文档结构的节点树，称作 <code>语法树</code> 或 <code>解析树</code> 。解析是以文档所遵循的语法规则为基础的。</p>\n</blockquote>\n<h4 id=\"解析器和词法分析器的组合\"><a href=\"#解析器和词法分析器的组合\" class=\"headerlink\" title=\"解析器和词法分析器的组合\"></a>解析器和词法分析器的组合</h4><p>解析的过程可以分为两个子过程： <code>词法分析</code> 和 <code>语法分析</code></p>\n<ul>\n<li>词法分析：将输入内容分割成大量标记的过程</li>\n<li>语法分析：是应用语言的语法规则的过程</li>\n</ul>\n<p>解析器通常将解析工作分给以下两个组件来处理：</p>\n<ul>\n<li>词法分析器（标记生成器）：负责将内容分割成一个个的有效标记（词法分析器知道如何将无关字符比如空格、换行符分离出来）</li>\n<li>解析器：负责根据语言语法规则分析文档结构，从而构建解析树</li>\n</ul>\n<p>解析是一个迭代的\b过程。解析器想词法分析器请求一个新标记，并尝试将其与某条语法规则进行匹配。如果发现了匹配规则，解析器会将一个对应于该标记的节点添加到解析树，然后继续请求下一个标记。</p>\n<p>如果没有规则可以匹配，解析器就会将标记存储到内部，并继续请求标记，直至找到所有内部存储的标记匹配的规则。如果找不到任何匹配规则。解析器就会引发一个异常。意味着文档无效，包含语法错误。</p>\n<div align=\"center\"><br>  <img src=\"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/image011.png\" alt=\"源文档到解析树\"><br></div>\n\n<h4 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h4><p>很多时候，解析树不是最终产品。翻译是指将输入文档转换成另一种格式。编译就是一个例子。编译器可以将源代码编译成机器代码。</p>\n<div align=\"center\"><br>  <img src=\"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/image013.png\" alt=\"编译流程\"><br></div>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本文主要参考 <a href=\"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The_browser_main_functionality\" target=\"_blank\" rel=\"noopener\">浏览器的工作原理：新式网络浏览器幕后揭秘</a></p>\n<p>此文做学习记录</p>\n</blockquote>\n<h2 id=\"浏览器的高层结构\"><a href=\"#浏览器的高层结构\" class=\"headerlink\" title=\"浏览器的高层结构\"></a>浏览器的高层结构</h2><p>浏览器的主要组件：</p>\n<ul>\n<li>用户界面 地址栏、前进后退、刷新按钮等（除了显示的页面外都是用户界面）</li>\n<li>\b呈现引擎（负责显示页面）</li>\n<li>浏览器引擎（在用户界面与呈现引擎间传达指令）</li>\n<li>网络（用于网络调用，比如HTTP请求）</li>\n<li>用户界面后端（用于绘制基本的窗口小部件，比如组合框和窗口）</li>\n<li>JavaScript解释器（解析、执行JavaScript）</li>\n<li>存储（这是持久层，浏览器在硬盘存储数据，比如cookie等）</li>\n</ul>\n<h2 id=\"呈现引擎（渲染引擎）\"><a href=\"#呈现引擎（渲染引擎）\" class=\"headerlink\" title=\"呈现引擎（渲染引擎）\"></a>呈现引擎（渲染引擎）</h2><blockquote>\n<p>默认情况，呈现引擎可以显示HTML、XML和图片，通过插件也可以显示其他类型的内容，比如PDF；</p>\n<ul>\n<li>Firefox使用的是Gecko</li>\n<li>Safari和Chrome使用的是WebKit</li>\n</ul>\n</blockquote>\n<h3 id=\"主流程\"><a href=\"#主流程\" class=\"headerlink\" title=\"主流程\"></a>主流程</h3><p>主流程可以参考 <a href=\"https://littlefaye.gitee.io/teresa/2018/08/28/重绘重排/\">重绘重排</a></p>\n<h3 id=\"解析-综述\"><a href=\"#解析-综述\" class=\"headerlink\" title=\"解析-综述\"></a>解析-综述</h3><blockquote>\n<p><code>解析</code> 是 <code>呈现引擎</code> 中的一个重要环节。</p>\n<p><code>解析文档</code> 是指将文档转换成为有意义的结构。解析得到的结果\b通常是代表了文档结构的节点树，称作 <code>语法树</code> 或 <code>解析树</code> 。解析是以文档所遵循的语法规则为基础的。</p>\n</blockquote>\n<h4 id=\"解析器和词法分析器的组合\"><a href=\"#解析器和词法分析器的组合\" class=\"headerlink\" title=\"解析器和词法分析器的组合\"></a>解析器和词法分析器的组合</h4><p>解析的过程可以分为两个子过程： <code>词法分析</code> 和 <code>语法分析</code></p>\n<ul>\n<li>词法分析：将输入内容分割成大量标记的过程</li>\n<li>语法分析：是应用语言的语法规则的过程</li>\n</ul>\n<p>解析器通常将解析工作分给以下两个组件来处理：</p>\n<ul>\n<li>词法分析器（标记生成器）：负责将内容分割成一个个的有效标记（词法分析器知道如何将无关字符比如空格、换行符分离出来）</li>\n<li>解析器：负责根据语言语法规则分析文档结构，从而构建解析树</li>\n</ul>\n<p>解析是一个迭代的\b过程。解析器想词法分析器请求一个新标记，并尝试将其与某条语法规则进行匹配。如果发现了匹配规则，解析器会将一个对应于该标记的节点添加到解析树，然后继续请求下一个标记。</p>\n<p>如果没有规则可以匹配，解析器就会将标记存储到内部，并继续请求标记，直至找到所有内部存储的标记匹配的规则。如果找不到任何匹配规则。解析器就会引发一个异常。意味着文档无效，包含语法错误。</p>\n<div align=\"center\"><br>  <img src=\"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/image011.png\" alt=\"源文档到解析树\"><br></div>\n\n<h4 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h4><p>很多时候，解析树不是最终产品。翻译是指将输入文档转换成另一种格式。编译就是一个例子。编译器可以将源代码编译成机器代码。</p>\n<div align=\"center\"><br>  <img src=\"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/image013.png\" alt=\"编译流程\"><br></div>"},{"title":"你不知道的JSON.stringify","date":"2018-10-17T03:37:21.000Z","description":"转：你不知道的JSON.stringify","keywords":"JSON","_content":"\n> 本文转自 [你不知道的JSON.stringify](https://blog.fundebug.com/2017/08/17/what-you-didnt-know%20about-json-stringify/)\n\nJSON已经逐渐替代XML被全世界的开发者广泛使用。本文深入讲解JavaScript中使用JSON.stringify的一些细节问题。首先简单回顾一下JSON和JavaScript：\n\n不是所有的合法的JSON都是有效的JavaScript；\nJSON只是一个文本格式；\nJSON中的数字是十进制。\n# JSON.stringify\n```js\nlet foo = { a: 2, b: function() {} };\nJSON.stringify(foo);\n// \"{ \"a\": 2 }\"\n```\nJSON.stringify函数将一个JavaScript对象转换成文本化的JSON。不能被文本化的属性会被忽略。foo中属性b的值是函数定义，没有被转换而丢失。\n\n# 还有哪些属性也不能转换？\n## 循环引用\n如果一个对象的属性值通过某种间接的方式指回该对象本身，那么就是一个循环引用。比如：\n```js\nvar bar = {\n  a: {\n     c: foo\n  }\n};\nvar foo = {\n  b: bar\n};\n```\n属性c指向自己，如果层层解析，将会进入一个无限循环。我们尝试将其打印出来看看：\n```js\nlet fooStringified = JSON.stringify(foo);\nconsole.log(fooStringified); // {\"b\":{\"a\":{}}}\n```\nc的属性指向foo对象，foo对象中的b属性又指向bar对象而无法处理，整个被忽略而返回空对象。\n\n如下定义(原文中的例子)是无法通过编译的：\n```js\nlet foo = {b : foo};\n```\n错误信息：\n```js\nReferenceError: foo is not defined\n    at repl:1:14\n```\n在函数式语言Haskell中，因为有Lazy Evaluation技术，可以使用类似的定义方法。\n\n备注：原文中的例子不正确，感谢SegmentFault用户xueshen1106指出，现在将他的评论贴在下方，供大家学习。\n![error](https://blog.fundebug.com/2017/08/17/what-you-didnt-know%20about-json-stringify/segmentfault-user-comment-1.png)\n\n## Symbol和undefined\n```js\nlet foo = { b: undefined };\nJSON.stringify(foo);\n// {}\n// Symbols\nfoo.b = Symbol();\nJSON.stringify(foo);\n// {}\n```\n例外情况\n在数组中，不可被stringify的元素用null填充。\n```js\nlet foo = [Symbol(), undefined, function() {}, 'works']\nJSON.stringify(foo);\n// \"[null,null,null,'works']\"\n```\n这样可以保持数组本身的“形状”，也就是每一个元素原本的索引。\n\n为什么有些属性无法被stringify呢？\n因为JSON是一个通用的文本格式，和语言无关。设想如果将函数定义也stringify的话，如何判断是哪种语言，并且通过合适的方式将其呈现出来将会变得特别复杂。特别是和语言相关的一些特性，比如JavaScript中的Symbol。\n\nECMASCript官方也特意强调了这一点：\n\n> It does not attempt to impose ECMAScript’s internal data representations on other programming languages. Instead, it shares a small subset of ECMAScript’s textual representations with all other programming languages.\n\n# 重写对象toJSON函数\n一个绕过对象某些属性无法 `stringify` 的方法就是实现对象的 `toJSON` 方法来自定义被 `stringify` 的对象。因为几乎每一个`AJAX`调用都会使用 `JSON.stringify`，掌握该技巧将会对处理服务器交互有很大帮助。\n\n和`toString`允许你将对象中的元素以字符串(string)的形式返回类似，`toJSON`提供了一种可以将对象中不能stringify的属性转换的方法，使得接下来调用的`JSON.stringify`可以将其转换成JSON格式。\n```js\nfunction Person (first, last) {\n    this.firstName = first;\n    this.last = last;\n}\n\nPerson.prototype.process = function () {\n   return this.firstName + ' ' +\n          this.lastName;\n};\n\nlet ade = new Person('Ade', 'P');\nJSON.stringify(ade);\n// \"{\"firstName\":\"Ade\",\"last\":\"P\"}\"\n```\nPerson实例ade的process函数没有被stringify。假想如果服务器只想要ade的全称，而不是分别获取姓和名，我们可以直接定义toJSON来达到目的：\n```js\nPerson.prototype.toJSON = function () {\n    return { fullName: this.process(); };\n};\n\nlet ade = new Person('Ade', 'P');\nJSON.stringify(ade);\n// \"{\"fullName\":\"Ade P\"}\"\n```\n定义toJSON的优点是复用性和稳定性，你可以将ade配合任何库使用，传输的数据都将是你通过toJSON定义而返回的fullName。\n```js\n// jQuery\n$.post('endpoint', ade);\n\n// Angular 2\nthis.httpService.post('endpoint', ade)\n```\n## 可选参数\nJSON.stringify完整的定义如下：\n```js\nJSON.stringify(value, replacer?, space?)\n```\nreplacer和space都是可选参数，接下来我们来分别讲解。\n\n### Replacer\nreplacer是一个过滤函数或则一个数组包含要被stringify的属性名。如果没有定义，默认所有属性都被stringify。\n\n- 数组\n只有在数组中的属性被stringify：\n```js\nlet foo = {\n  a : 1,\n  b : \"string\",\n  c : false\n};\nJSON.stringify(foo, ['a', 'b']);\n//\"{\"a\":1,\"b\":\"string\"}\"\n```\n嵌套属性也同样会被过滤：\n```js\nlet bar = {\n  a : 1,\n  b : { c : 2 }\n};\nJSON.stringify(bar, ['a', 'b']);\n//\"{\"a\":1,\"b\":{}}\"\n\nJSON.stringify(bar, ['a', 'b', 'c']);\n//\"{\"a\":1,\"b\":{\"c\":2}}\"\n```\n定义过滤数组有时候并不能满足需求，那么可以自定义过滤函数。\n\n-  函数\n过滤函数以对象中的每一个属性和值作为输入，返回值有以下几种情况：\n\n返回undefined表示忽略该属性；\n返回字符串，布尔值或则数字将会被stringify；\n返回对象将会触发递归调用知道遇到基本类型的属性；\n返回无法stringify的值将会被忽略；\n```js\nlet baz = {\n  a : 1,\n  b : { c : 2 }\n};\n\n// 返回大于1的值\nlet replacer = function (key, value) {\n    if(typeof === 'number') {\n        return value > 1 ? value: undefined;\n    }\n    return value;\n};\n\nJSON.stringify(baz, replacer);\n// \"{\"b\":{\"c\":2}}\"\n```\n通过改写上面的函数加入适当的输出，可以看到具体的执行步骤：\n```js\nlet obj = {\n  a : 1,\n  b : { c : 2 }\n};\n\nlet tracer = function (key, value){\n  console.log('Key: ', key);\n  console.log('Value: ', value);\n  return value;\n};\n\nJSON.stringify(obj, tracer);\n// Key:\n// Value: Object {a: 1, b: Object}\n// Key: a\n// Value: 1\n// Key: b\n// Value: Object {c: 2}\n// Key: c\n// Value: 2\n```\n### space\n你是否意识到调用默认的JSON.stringify返回的值只要一行，而且完全没有空格？如果想要更加美观的打印出来，那么就需要使用space这个参数了。\n\n我告诉你一个非常简单的方法：通过tab(‘\\t’)来分割即可。\n```js\nlet space = {\n  a : 1,\n  b : { c : 2 }\n};\n\n// 使用制表符\nJSON.stringify(space, undefined, '\\t');\n// \"{\n//  \"a\": 1,\n//  \"b\": {\n//   \"c\": 2\n//  }\n// }\"\n\nJSON.stringify(space, undefined, '');\n// {\"a\":1,\"b\":{\"c\":2}}\n\n// 自定义分隔符\nJSON.stringify(space, undefined, 'a');\n// \"{\n//  a\"a\": 1,\n//  a\"b\": {\n//   aa\"c\": 2\n//  a}\n// }\"\n```\n一道三颗星的思考题：为什么打印结果的倒数第三行有两个a呢？\n\n结论\n本文介绍了一些使用toJSON的技巧：\n\n无法stringify的几种类型\n使用toJSON来自定义JSON.stringify的属性\n可选参数replacer的两种定义方法来过滤属性\n可选参数space用来格式化输出结果\n数组和对象中如果包含无法stringify的元素的时候的区别\n\n","source":"_posts/你不知道的JSON-stringify.md","raw":"---\ntitle: 你不知道的JSON.stringify\ndate: 2018-10-17 11:37:21\ntags: JSON\ndescription: 转：你不知道的JSON.stringify\nkeywords: JSON\ncategories: JSON\n---\n\n> 本文转自 [你不知道的JSON.stringify](https://blog.fundebug.com/2017/08/17/what-you-didnt-know%20about-json-stringify/)\n\nJSON已经逐渐替代XML被全世界的开发者广泛使用。本文深入讲解JavaScript中使用JSON.stringify的一些细节问题。首先简单回顾一下JSON和JavaScript：\n\n不是所有的合法的JSON都是有效的JavaScript；\nJSON只是一个文本格式；\nJSON中的数字是十进制。\n# JSON.stringify\n```js\nlet foo = { a: 2, b: function() {} };\nJSON.stringify(foo);\n// \"{ \"a\": 2 }\"\n```\nJSON.stringify函数将一个JavaScript对象转换成文本化的JSON。不能被文本化的属性会被忽略。foo中属性b的值是函数定义，没有被转换而丢失。\n\n# 还有哪些属性也不能转换？\n## 循环引用\n如果一个对象的属性值通过某种间接的方式指回该对象本身，那么就是一个循环引用。比如：\n```js\nvar bar = {\n  a: {\n     c: foo\n  }\n};\nvar foo = {\n  b: bar\n};\n```\n属性c指向自己，如果层层解析，将会进入一个无限循环。我们尝试将其打印出来看看：\n```js\nlet fooStringified = JSON.stringify(foo);\nconsole.log(fooStringified); // {\"b\":{\"a\":{}}}\n```\nc的属性指向foo对象，foo对象中的b属性又指向bar对象而无法处理，整个被忽略而返回空对象。\n\n如下定义(原文中的例子)是无法通过编译的：\n```js\nlet foo = {b : foo};\n```\n错误信息：\n```js\nReferenceError: foo is not defined\n    at repl:1:14\n```\n在函数式语言Haskell中，因为有Lazy Evaluation技术，可以使用类似的定义方法。\n\n备注：原文中的例子不正确，感谢SegmentFault用户xueshen1106指出，现在将他的评论贴在下方，供大家学习。\n![error](https://blog.fundebug.com/2017/08/17/what-you-didnt-know%20about-json-stringify/segmentfault-user-comment-1.png)\n\n## Symbol和undefined\n```js\nlet foo = { b: undefined };\nJSON.stringify(foo);\n// {}\n// Symbols\nfoo.b = Symbol();\nJSON.stringify(foo);\n// {}\n```\n例外情况\n在数组中，不可被stringify的元素用null填充。\n```js\nlet foo = [Symbol(), undefined, function() {}, 'works']\nJSON.stringify(foo);\n// \"[null,null,null,'works']\"\n```\n这样可以保持数组本身的“形状”，也就是每一个元素原本的索引。\n\n为什么有些属性无法被stringify呢？\n因为JSON是一个通用的文本格式，和语言无关。设想如果将函数定义也stringify的话，如何判断是哪种语言，并且通过合适的方式将其呈现出来将会变得特别复杂。特别是和语言相关的一些特性，比如JavaScript中的Symbol。\n\nECMASCript官方也特意强调了这一点：\n\n> It does not attempt to impose ECMAScript’s internal data representations on other programming languages. Instead, it shares a small subset of ECMAScript’s textual representations with all other programming languages.\n\n# 重写对象toJSON函数\n一个绕过对象某些属性无法 `stringify` 的方法就是实现对象的 `toJSON` 方法来自定义被 `stringify` 的对象。因为几乎每一个`AJAX`调用都会使用 `JSON.stringify`，掌握该技巧将会对处理服务器交互有很大帮助。\n\n和`toString`允许你将对象中的元素以字符串(string)的形式返回类似，`toJSON`提供了一种可以将对象中不能stringify的属性转换的方法，使得接下来调用的`JSON.stringify`可以将其转换成JSON格式。\n```js\nfunction Person (first, last) {\n    this.firstName = first;\n    this.last = last;\n}\n\nPerson.prototype.process = function () {\n   return this.firstName + ' ' +\n          this.lastName;\n};\n\nlet ade = new Person('Ade', 'P');\nJSON.stringify(ade);\n// \"{\"firstName\":\"Ade\",\"last\":\"P\"}\"\n```\nPerson实例ade的process函数没有被stringify。假想如果服务器只想要ade的全称，而不是分别获取姓和名，我们可以直接定义toJSON来达到目的：\n```js\nPerson.prototype.toJSON = function () {\n    return { fullName: this.process(); };\n};\n\nlet ade = new Person('Ade', 'P');\nJSON.stringify(ade);\n// \"{\"fullName\":\"Ade P\"}\"\n```\n定义toJSON的优点是复用性和稳定性，你可以将ade配合任何库使用，传输的数据都将是你通过toJSON定义而返回的fullName。\n```js\n// jQuery\n$.post('endpoint', ade);\n\n// Angular 2\nthis.httpService.post('endpoint', ade)\n```\n## 可选参数\nJSON.stringify完整的定义如下：\n```js\nJSON.stringify(value, replacer?, space?)\n```\nreplacer和space都是可选参数，接下来我们来分别讲解。\n\n### Replacer\nreplacer是一个过滤函数或则一个数组包含要被stringify的属性名。如果没有定义，默认所有属性都被stringify。\n\n- 数组\n只有在数组中的属性被stringify：\n```js\nlet foo = {\n  a : 1,\n  b : \"string\",\n  c : false\n};\nJSON.stringify(foo, ['a', 'b']);\n//\"{\"a\":1,\"b\":\"string\"}\"\n```\n嵌套属性也同样会被过滤：\n```js\nlet bar = {\n  a : 1,\n  b : { c : 2 }\n};\nJSON.stringify(bar, ['a', 'b']);\n//\"{\"a\":1,\"b\":{}}\"\n\nJSON.stringify(bar, ['a', 'b', 'c']);\n//\"{\"a\":1,\"b\":{\"c\":2}}\"\n```\n定义过滤数组有时候并不能满足需求，那么可以自定义过滤函数。\n\n-  函数\n过滤函数以对象中的每一个属性和值作为输入，返回值有以下几种情况：\n\n返回undefined表示忽略该属性；\n返回字符串，布尔值或则数字将会被stringify；\n返回对象将会触发递归调用知道遇到基本类型的属性；\n返回无法stringify的值将会被忽略；\n```js\nlet baz = {\n  a : 1,\n  b : { c : 2 }\n};\n\n// 返回大于1的值\nlet replacer = function (key, value) {\n    if(typeof === 'number') {\n        return value > 1 ? value: undefined;\n    }\n    return value;\n};\n\nJSON.stringify(baz, replacer);\n// \"{\"b\":{\"c\":2}}\"\n```\n通过改写上面的函数加入适当的输出，可以看到具体的执行步骤：\n```js\nlet obj = {\n  a : 1,\n  b : { c : 2 }\n};\n\nlet tracer = function (key, value){\n  console.log('Key: ', key);\n  console.log('Value: ', value);\n  return value;\n};\n\nJSON.stringify(obj, tracer);\n// Key:\n// Value: Object {a: 1, b: Object}\n// Key: a\n// Value: 1\n// Key: b\n// Value: Object {c: 2}\n// Key: c\n// Value: 2\n```\n### space\n你是否意识到调用默认的JSON.stringify返回的值只要一行，而且完全没有空格？如果想要更加美观的打印出来，那么就需要使用space这个参数了。\n\n我告诉你一个非常简单的方法：通过tab(‘\\t’)来分割即可。\n```js\nlet space = {\n  a : 1,\n  b : { c : 2 }\n};\n\n// 使用制表符\nJSON.stringify(space, undefined, '\\t');\n// \"{\n//  \"a\": 1,\n//  \"b\": {\n//   \"c\": 2\n//  }\n// }\"\n\nJSON.stringify(space, undefined, '');\n// {\"a\":1,\"b\":{\"c\":2}}\n\n// 自定义分隔符\nJSON.stringify(space, undefined, 'a');\n// \"{\n//  a\"a\": 1,\n//  a\"b\": {\n//   aa\"c\": 2\n//  a}\n// }\"\n```\n一道三颗星的思考题：为什么打印结果的倒数第三行有两个a呢？\n\n结论\n本文介绍了一些使用toJSON的技巧：\n\n无法stringify的几种类型\n使用toJSON来自定义JSON.stringify的属性\n可选参数replacer的两种定义方法来过滤属性\n可选参数space用来格式化输出结果\n数组和对象中如果包含无法stringify的元素的时候的区别\n\n","slug":"你不知道的JSON-stringify","published":1,"updated":"2018-10-17T06:30:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7kpl02x001vjcs60e6w6tr5","content":"<blockquote>\n<p>本文转自 <a href=\"https://blog.fundebug.com/2017/08/17/what-you-didnt-know%20about-json-stringify/\" target=\"_blank\" rel=\"noopener\">你不知道的JSON.stringify</a></p>\n</blockquote>\n<p>JSON已经逐渐替代XML被全世界的开发者广泛使用。本文深入讲解JavaScript中使用JSON.stringify的一些细节问题。首先简单回顾一下JSON和JavaScript：</p>\n<p>不是所有的合法的JSON都是有效的JavaScript；<br>JSON只是一个文本格式；<br>JSON中的数字是十进制。</p>\n<h1 id=\"JSON-stringify\"><a href=\"#JSON-stringify\" class=\"headerlink\" title=\"JSON.stringify\"></a>JSON.stringify</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = &#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span>, <span class=\"attr\">b</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125; &#125;;</span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(foo);</span><br><span class=\"line\"><span class=\"comment\">// \"&#123; \"a\": 2 &#125;\"</span></span><br></pre></td></tr></table></figure>\n<p>JSON.stringify函数将一个JavaScript对象转换成文本化的JSON。不能被文本化的属性会被忽略。foo中属性b的值是函数定义，没有被转换而丢失。</p>\n<h1 id=\"还有哪些属性也不能转换？\"><a href=\"#还有哪些属性也不能转换？\" class=\"headerlink\" title=\"还有哪些属性也不能转换？\"></a>还有哪些属性也不能转换？</h1><h2 id=\"循环引用\"><a href=\"#循环引用\" class=\"headerlink\" title=\"循环引用\"></a>循环引用</h2><p>如果一个对象的属性值通过某种间接的方式指回该对象本身，那么就是一个循环引用。比如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  a: &#123;</span><br><span class=\"line\">     c: foo</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">  b: bar</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>属性c指向自己，如果层层解析，将会进入一个无限循环。我们尝试将其打印出来看看：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fooStringified = <span class=\"built_in\">JSON</span>.stringify(foo);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fooStringified); <span class=\"comment\">// &#123;\"b\":&#123;\"a\":&#123;&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>c的属性指向foo对象，foo对象中的b属性又指向bar对象而无法处理，整个被忽略而返回空对象。</p>\n<p>如下定义(原文中的例子)是无法通过编译的：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = &#123;<span class=\"attr\">b</span> : foo&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>错误信息：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ReferenceError</span>: foo is not defined</span><br><span class=\"line\">    at repl:<span class=\"number\">1</span>:<span class=\"number\">14</span></span><br></pre></td></tr></table></figure></p>\n<p>在函数式语言Haskell中，因为有Lazy Evaluation技术，可以使用类似的定义方法。</p>\n<p>备注：原文中的例子不正确，感谢SegmentFault用户xueshen1106指出，现在将他的评论贴在下方，供大家学习。<br><img src=\"https://blog.fundebug.com/2017/08/17/what-you-didnt-know%20about-json-stringify/segmentfault-user-comment-1.png\" alt=\"error\"></p>\n<h2 id=\"Symbol和undefined\"><a href=\"#Symbol和undefined\" class=\"headerlink\" title=\"Symbol和undefined\"></a>Symbol和undefined</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = &#123; <span class=\"attr\">b</span>: <span class=\"literal\">undefined</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(foo);</span><br><span class=\"line\"><span class=\"comment\">// &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// Symbols</span></span><br><span class=\"line\">foo.b = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(foo);</span><br><span class=\"line\"><span class=\"comment\">// &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>例外情况<br>在数组中，不可被stringify的元素用null填充。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = [<span class=\"built_in\">Symbol</span>(), <span class=\"literal\">undefined</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;, <span class=\"string\">'works'</span>]</span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(foo);</span><br><span class=\"line\"><span class=\"comment\">// \"[null,null,null,'works']\"</span></span><br></pre></td></tr></table></figure></p>\n<p>这样可以保持数组本身的“形状”，也就是每一个元素原本的索引。</p>\n<p>为什么有些属性无法被stringify呢？<br>因为JSON是一个通用的文本格式，和语言无关。设想如果将函数定义也stringify的话，如何判断是哪种语言，并且通过合适的方式将其呈现出来将会变得特别复杂。特别是和语言相关的一些特性，比如JavaScript中的Symbol。</p>\n<p>ECMASCript官方也特意强调了这一点：</p>\n<blockquote>\n<p>It does not attempt to impose ECMAScript’s internal data representations on other programming languages. Instead, it shares a small subset of ECMAScript’s textual representations with all other programming languages.</p>\n</blockquote>\n<h1 id=\"重写对象toJSON函数\"><a href=\"#重写对象toJSON函数\" class=\"headerlink\" title=\"重写对象toJSON函数\"></a>重写对象toJSON函数</h1><p>一个绕过对象某些属性无法 <code>stringify</code> 的方法就是实现对象的 <code>toJSON</code> 方法来自定义被 <code>stringify</code> 的对象。因为几乎每一个<code>AJAX</code>调用都会使用 <code>JSON.stringify</code>，掌握该技巧将会对处理服务器交互有很大帮助。</p>\n<p>和<code>toString</code>允许你将对象中的元素以字符串(string)的形式返回类似，<code>toJSON</code>提供了一种可以将对象中不能stringify的属性转换的方法，使得接下来调用的<code>JSON.stringify</code>可以将其转换成JSON格式。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">first, last</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.firstName = first;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.last = last;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.process = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> +</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.lastName;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ade = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Ade'</span>, <span class=\"string\">'P'</span>);</span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(ade);</span><br><span class=\"line\"><span class=\"comment\">// \"&#123;\"firstName\":\"Ade\",\"last\":\"P\"&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p>Person实例ade的process函数没有被stringify。假想如果服务器只想要ade的全称，而不是分别获取姓和名，我们可以直接定义toJSON来达到目的：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.prototype.toJSON = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">fullName</span>: <span class=\"keyword\">this</span>.process(); &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ade = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Ade'</span>, <span class=\"string\">'P'</span>);</span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(ade);</span><br><span class=\"line\"><span class=\"comment\">// \"&#123;\"fullName\":\"Ade P\"&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p>定义toJSON的优点是复用性和稳定性，你可以将ade配合任何库使用，传输的数据都将是你通过toJSON定义而返回的fullName。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// jQuery</span></span><br><span class=\"line\">$.post(<span class=\"string\">'endpoint'</span>, ade);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Angular 2</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.httpService.post(<span class=\"string\">'endpoint'</span>, ade)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h2><p>JSON.stringify完整的定义如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(value, replacer?, space?)</span><br></pre></td></tr></table></figure></p>\n<p>replacer和space都是可选参数，接下来我们来分别讲解。</p>\n<h3 id=\"Replacer\"><a href=\"#Replacer\" class=\"headerlink\" title=\"Replacer\"></a>Replacer</h3><p>replacer是一个过滤函数或则一个数组包含要被stringify的属性名。如果没有定义，默认所有属性都被stringify。</p>\n<ul>\n<li>数组<br>只有在数组中的属性被stringify：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = &#123;</span><br><span class=\"line\">  a : <span class=\"number\">1</span>,</span><br><span class=\"line\">  b : <span class=\"string\">\"string\"</span>,</span><br><span class=\"line\">  c : <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(foo, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]);</span><br><span class=\"line\"><span class=\"comment\">//\"&#123;\"a\":1,\"b\":\"string\"&#125;\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>嵌套属性也同样会被过滤：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bar = &#123;</span><br><span class=\"line\">  a : <span class=\"number\">1</span>,</span><br><span class=\"line\">  b : &#123; <span class=\"attr\">c</span> : <span class=\"number\">2</span> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(bar, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]);</span><br><span class=\"line\"><span class=\"comment\">//\"&#123;\"a\":1,\"b\":&#123;&#125;&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(bar, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]);</span><br><span class=\"line\"><span class=\"comment\">//\"&#123;\"a\":1,\"b\":&#123;\"c\":2&#125;&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p>定义过滤数组有时候并不能满足需求，那么可以自定义过滤函数。</p>\n<ul>\n<li>函数<br>过滤函数以对象中的每一个属性和值作为输入，返回值有以下几种情况：</li>\n</ul>\n<p>返回undefined表示忽略该属性；<br>返回字符串，布尔值或则数字将会被stringify；<br>返回对象将会触发递归调用知道遇到基本类型的属性；<br>返回无法stringify的值将会被忽略；<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> baz = &#123;</span><br><span class=\"line\">  a : <span class=\"number\">1</span>,</span><br><span class=\"line\">  b : &#123; <span class=\"attr\">c</span> : <span class=\"number\">2</span> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回大于1的值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> replacer = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> === <span class=\"string\">'number'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value &gt; <span class=\"number\">1</span> ? value: <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(baz, replacer);</span><br><span class=\"line\"><span class=\"comment\">// \"&#123;\"b\":&#123;\"c\":2&#125;&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p>通过改写上面的函数加入适当的输出，可以看到具体的执行步骤：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  a : <span class=\"number\">1</span>,</span><br><span class=\"line\">  b : &#123; <span class=\"attr\">c</span> : <span class=\"number\">2</span> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tracer = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key, value</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Key: '</span>, key);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Value: '</span>, value);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(obj, tracer);</span><br><span class=\"line\"><span class=\"comment\">// Key:</span></span><br><span class=\"line\"><span class=\"comment\">// Value: Object &#123;a: 1, b: Object&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// Key: a</span></span><br><span class=\"line\"><span class=\"comment\">// Value: 1</span></span><br><span class=\"line\"><span class=\"comment\">// Key: b</span></span><br><span class=\"line\"><span class=\"comment\">// Value: Object &#123;c: 2&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// Key: c</span></span><br><span class=\"line\"><span class=\"comment\">// Value: 2</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"space\"><a href=\"#space\" class=\"headerlink\" title=\"space\"></a>space</h3><p>你是否意识到调用默认的JSON.stringify返回的值只要一行，而且完全没有空格？如果想要更加美观的打印出来，那么就需要使用space这个参数了。</p>\n<p>我告诉你一个非常简单的方法：通过tab(‘\\t’)来分割即可。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> space = &#123;</span><br><span class=\"line\">  a : <span class=\"number\">1</span>,</span><br><span class=\"line\">  b : &#123; <span class=\"attr\">c</span> : <span class=\"number\">2</span> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用制表符</span></span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(space, <span class=\"literal\">undefined</span>, <span class=\"string\">'\\t'</span>);</span><br><span class=\"line\"><span class=\"comment\">// \"&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//  \"a\": 1,</span></span><br><span class=\"line\"><span class=\"comment\">//  \"b\": &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   \"c\": 2</span></span><br><span class=\"line\"><span class=\"comment\">//  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(space, <span class=\"literal\">undefined</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\"><span class=\"comment\">// &#123;\"a\":1,\"b\":&#123;\"c\":2&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义分隔符</span></span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(space, <span class=\"literal\">undefined</span>, <span class=\"string\">'a'</span>);</span><br><span class=\"line\"><span class=\"comment\">// \"&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//  a\"a\": 1,</span></span><br><span class=\"line\"><span class=\"comment\">//  a\"b\": &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   aa\"c\": 2</span></span><br><span class=\"line\"><span class=\"comment\">//  a&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p>一道三颗星的思考题：为什么打印结果的倒数第三行有两个a呢？</p>\n<p>结论<br>本文介绍了一些使用toJSON的技巧：</p>\n<p>无法stringify的几种类型<br>使用toJSON来自定义JSON.stringify的属性<br>可选参数replacer的两种定义方法来过滤属性<br>可选参数space用来格式化输出结果<br>数组和对象中如果包含无法stringify的元素的时候的区别</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本文转自 <a href=\"https://blog.fundebug.com/2017/08/17/what-you-didnt-know%20about-json-stringify/\" target=\"_blank\" rel=\"noopener\">你不知道的JSON.stringify</a></p>\n</blockquote>\n<p>JSON已经逐渐替代XML被全世界的开发者广泛使用。本文深入讲解JavaScript中使用JSON.stringify的一些细节问题。首先简单回顾一下JSON和JavaScript：</p>\n<p>不是所有的合法的JSON都是有效的JavaScript；<br>JSON只是一个文本格式；<br>JSON中的数字是十进制。</p>\n<h1 id=\"JSON-stringify\"><a href=\"#JSON-stringify\" class=\"headerlink\" title=\"JSON.stringify\"></a>JSON.stringify</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = &#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span>, <span class=\"attr\">b</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125; &#125;;</span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(foo);</span><br><span class=\"line\"><span class=\"comment\">// \"&#123; \"a\": 2 &#125;\"</span></span><br></pre></td></tr></table></figure>\n<p>JSON.stringify函数将一个JavaScript对象转换成文本化的JSON。不能被文本化的属性会被忽略。foo中属性b的值是函数定义，没有被转换而丢失。</p>\n<h1 id=\"还有哪些属性也不能转换？\"><a href=\"#还有哪些属性也不能转换？\" class=\"headerlink\" title=\"还有哪些属性也不能转换？\"></a>还有哪些属性也不能转换？</h1><h2 id=\"循环引用\"><a href=\"#循环引用\" class=\"headerlink\" title=\"循环引用\"></a>循环引用</h2><p>如果一个对象的属性值通过某种间接的方式指回该对象本身，那么就是一个循环引用。比如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  a: &#123;</span><br><span class=\"line\">     c: foo</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">  b: bar</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>属性c指向自己，如果层层解析，将会进入一个无限循环。我们尝试将其打印出来看看：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fooStringified = <span class=\"built_in\">JSON</span>.stringify(foo);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fooStringified); <span class=\"comment\">// &#123;\"b\":&#123;\"a\":&#123;&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>c的属性指向foo对象，foo对象中的b属性又指向bar对象而无法处理，整个被忽略而返回空对象。</p>\n<p>如下定义(原文中的例子)是无法通过编译的：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = &#123;<span class=\"attr\">b</span> : foo&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>错误信息：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ReferenceError</span>: foo is not defined</span><br><span class=\"line\">    at repl:<span class=\"number\">1</span>:<span class=\"number\">14</span></span><br></pre></td></tr></table></figure></p>\n<p>在函数式语言Haskell中，因为有Lazy Evaluation技术，可以使用类似的定义方法。</p>\n<p>备注：原文中的例子不正确，感谢SegmentFault用户xueshen1106指出，现在将他的评论贴在下方，供大家学习。<br><img src=\"https://blog.fundebug.com/2017/08/17/what-you-didnt-know%20about-json-stringify/segmentfault-user-comment-1.png\" alt=\"error\"></p>\n<h2 id=\"Symbol和undefined\"><a href=\"#Symbol和undefined\" class=\"headerlink\" title=\"Symbol和undefined\"></a>Symbol和undefined</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = &#123; <span class=\"attr\">b</span>: <span class=\"literal\">undefined</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(foo);</span><br><span class=\"line\"><span class=\"comment\">// &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// Symbols</span></span><br><span class=\"line\">foo.b = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(foo);</span><br><span class=\"line\"><span class=\"comment\">// &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>例外情况<br>在数组中，不可被stringify的元素用null填充。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = [<span class=\"built_in\">Symbol</span>(), <span class=\"literal\">undefined</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;, <span class=\"string\">'works'</span>]</span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(foo);</span><br><span class=\"line\"><span class=\"comment\">// \"[null,null,null,'works']\"</span></span><br></pre></td></tr></table></figure></p>\n<p>这样可以保持数组本身的“形状”，也就是每一个元素原本的索引。</p>\n<p>为什么有些属性无法被stringify呢？<br>因为JSON是一个通用的文本格式，和语言无关。设想如果将函数定义也stringify的话，如何判断是哪种语言，并且通过合适的方式将其呈现出来将会变得特别复杂。特别是和语言相关的一些特性，比如JavaScript中的Symbol。</p>\n<p>ECMASCript官方也特意强调了这一点：</p>\n<blockquote>\n<p>It does not attempt to impose ECMAScript’s internal data representations on other programming languages. Instead, it shares a small subset of ECMAScript’s textual representations with all other programming languages.</p>\n</blockquote>\n<h1 id=\"重写对象toJSON函数\"><a href=\"#重写对象toJSON函数\" class=\"headerlink\" title=\"重写对象toJSON函数\"></a>重写对象toJSON函数</h1><p>一个绕过对象某些属性无法 <code>stringify</code> 的方法就是实现对象的 <code>toJSON</code> 方法来自定义被 <code>stringify</code> 的对象。因为几乎每一个<code>AJAX</code>调用都会使用 <code>JSON.stringify</code>，掌握该技巧将会对处理服务器交互有很大帮助。</p>\n<p>和<code>toString</code>允许你将对象中的元素以字符串(string)的形式返回类似，<code>toJSON</code>提供了一种可以将对象中不能stringify的属性转换的方法，使得接下来调用的<code>JSON.stringify</code>可以将其转换成JSON格式。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">first, last</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.firstName = first;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.last = last;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.process = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> +</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.lastName;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ade = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Ade'</span>, <span class=\"string\">'P'</span>);</span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(ade);</span><br><span class=\"line\"><span class=\"comment\">// \"&#123;\"firstName\":\"Ade\",\"last\":\"P\"&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p>Person实例ade的process函数没有被stringify。假想如果服务器只想要ade的全称，而不是分别获取姓和名，我们可以直接定义toJSON来达到目的：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.prototype.toJSON = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">fullName</span>: <span class=\"keyword\">this</span>.process(); &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ade = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Ade'</span>, <span class=\"string\">'P'</span>);</span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(ade);</span><br><span class=\"line\"><span class=\"comment\">// \"&#123;\"fullName\":\"Ade P\"&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p>定义toJSON的优点是复用性和稳定性，你可以将ade配合任何库使用，传输的数据都将是你通过toJSON定义而返回的fullName。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// jQuery</span></span><br><span class=\"line\">$.post(<span class=\"string\">'endpoint'</span>, ade);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Angular 2</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.httpService.post(<span class=\"string\">'endpoint'</span>, ade)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h2><p>JSON.stringify完整的定义如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(value, replacer?, space?)</span><br></pre></td></tr></table></figure></p>\n<p>replacer和space都是可选参数，接下来我们来分别讲解。</p>\n<h3 id=\"Replacer\"><a href=\"#Replacer\" class=\"headerlink\" title=\"Replacer\"></a>Replacer</h3><p>replacer是一个过滤函数或则一个数组包含要被stringify的属性名。如果没有定义，默认所有属性都被stringify。</p>\n<ul>\n<li>数组<br>只有在数组中的属性被stringify：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = &#123;</span><br><span class=\"line\">  a : <span class=\"number\">1</span>,</span><br><span class=\"line\">  b : <span class=\"string\">\"string\"</span>,</span><br><span class=\"line\">  c : <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(foo, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]);</span><br><span class=\"line\"><span class=\"comment\">//\"&#123;\"a\":1,\"b\":\"string\"&#125;\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>嵌套属性也同样会被过滤：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bar = &#123;</span><br><span class=\"line\">  a : <span class=\"number\">1</span>,</span><br><span class=\"line\">  b : &#123; <span class=\"attr\">c</span> : <span class=\"number\">2</span> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(bar, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]);</span><br><span class=\"line\"><span class=\"comment\">//\"&#123;\"a\":1,\"b\":&#123;&#125;&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(bar, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]);</span><br><span class=\"line\"><span class=\"comment\">//\"&#123;\"a\":1,\"b\":&#123;\"c\":2&#125;&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p>定义过滤数组有时候并不能满足需求，那么可以自定义过滤函数。</p>\n<ul>\n<li>函数<br>过滤函数以对象中的每一个属性和值作为输入，返回值有以下几种情况：</li>\n</ul>\n<p>返回undefined表示忽略该属性；<br>返回字符串，布尔值或则数字将会被stringify；<br>返回对象将会触发递归调用知道遇到基本类型的属性；<br>返回无法stringify的值将会被忽略；<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> baz = &#123;</span><br><span class=\"line\">  a : <span class=\"number\">1</span>,</span><br><span class=\"line\">  b : &#123; <span class=\"attr\">c</span> : <span class=\"number\">2</span> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回大于1的值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> replacer = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> === <span class=\"string\">'number'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value &gt; <span class=\"number\">1</span> ? value: <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(baz, replacer);</span><br><span class=\"line\"><span class=\"comment\">// \"&#123;\"b\":&#123;\"c\":2&#125;&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p>通过改写上面的函数加入适当的输出，可以看到具体的执行步骤：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  a : <span class=\"number\">1</span>,</span><br><span class=\"line\">  b : &#123; <span class=\"attr\">c</span> : <span class=\"number\">2</span> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tracer = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key, value</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Key: '</span>, key);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Value: '</span>, value);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(obj, tracer);</span><br><span class=\"line\"><span class=\"comment\">// Key:</span></span><br><span class=\"line\"><span class=\"comment\">// Value: Object &#123;a: 1, b: Object&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// Key: a</span></span><br><span class=\"line\"><span class=\"comment\">// Value: 1</span></span><br><span class=\"line\"><span class=\"comment\">// Key: b</span></span><br><span class=\"line\"><span class=\"comment\">// Value: Object &#123;c: 2&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// Key: c</span></span><br><span class=\"line\"><span class=\"comment\">// Value: 2</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"space\"><a href=\"#space\" class=\"headerlink\" title=\"space\"></a>space</h3><p>你是否意识到调用默认的JSON.stringify返回的值只要一行，而且完全没有空格？如果想要更加美观的打印出来，那么就需要使用space这个参数了。</p>\n<p>我告诉你一个非常简单的方法：通过tab(‘\\t’)来分割即可。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> space = &#123;</span><br><span class=\"line\">  a : <span class=\"number\">1</span>,</span><br><span class=\"line\">  b : &#123; <span class=\"attr\">c</span> : <span class=\"number\">2</span> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用制表符</span></span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(space, <span class=\"literal\">undefined</span>, <span class=\"string\">'\\t'</span>);</span><br><span class=\"line\"><span class=\"comment\">// \"&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//  \"a\": 1,</span></span><br><span class=\"line\"><span class=\"comment\">//  \"b\": &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   \"c\": 2</span></span><br><span class=\"line\"><span class=\"comment\">//  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(space, <span class=\"literal\">undefined</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\"><span class=\"comment\">// &#123;\"a\":1,\"b\":&#123;\"c\":2&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义分隔符</span></span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(space, <span class=\"literal\">undefined</span>, <span class=\"string\">'a'</span>);</span><br><span class=\"line\"><span class=\"comment\">// \"&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//  a\"a\": 1,</span></span><br><span class=\"line\"><span class=\"comment\">//  a\"b\": &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   aa\"c\": 2</span></span><br><span class=\"line\"><span class=\"comment\">//  a&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p>一道三颗星的思考题：为什么打印结果的倒数第三行有两个a呢？</p>\n<p>结论<br>本文介绍了一些使用toJSON的技巧：</p>\n<p>无法stringify的几种类型<br>使用toJSON来自定义JSON.stringify的属性<br>可选参数replacer的两种定义方法来过滤属性<br>可选参数space用来格式化输出结果<br>数组和对象中如果包含无法stringify的元素的时候的区别</p>\n"},{"title":"字符串方法","date":"2018-10-22T07:34:45.000Z","description":"记录字符串的所有方法","keywords":"字符串的方法","_content":"\n## indexOf(string) \n- 返回包含 字符串 string 的索引位置（第一次匹配的位置）\n- 不包含则返回-1\n\n```js\n'this is a string'.indexOf('is'); // 2\n```\n\n## charAt(index)\n- 返回index 处的字符\n- index 超出字符长度范围，返回空字符串\n\n```js\n'this is a string'.charAt(1); // \"h\"\n```\n\n## charCodeAt(index)\n- 返回index 处字符的code值 字符编码\n- index 超出字符长度范围 则返回 NaN\n\n```js\n'this is a string'.charCodeAt(1); // 104(h的code码：字符编码)\n```\n## concat() 拼接字符串\n- 返回一个新字符串，不改变原字符串\n- 可以有任意多个参数\n- 数组也有一个这个方法\n\n```js\n'this is a string'.concat(' ahhh', ' jjjj'); // \"this is a string ahhh jjjj\"\n```\n\n## slice(index, n) \n- 返回新字符串，不改变源字符串\n- 截取 [index, n) 范围内的字符串\n- 当参数为负值时，会与字符串长度相加\n\n```js\n'this is a string'.slice(1, 3); // \"hi\"\n'this is a string'.slice(-5, -3); // \"tr\" length = 16\n'this is a string'.slice(11, 13); // \"tr\"\n```\n## substring(index, n)\n- 返回新字符串，不改变源字符串\n- 截取 [index, n) 范围内的字符串\n- 当参数为负值时，自动转换为 0 \n- 该方法，默认将 两参数中较小的值，作为开始值（即 substring(5,3) == substring(3,5)\n\n```js\n'this is a string'.substring(1, 3); // \"hi\"\n'this is a string'.substring(5, -3); // \"this \" length = 16\n'this is a string'.substring(5, 0); // \"this \"\n'this is a string'.substring(0, 5); // \"this \"\n```\n\n## substr(index, n)\n- 返回新字符串，不改变源字符串\n- 截取 [index, n + index) 范围内的字符串(即，从 index 开始 截取 n 位 字符串)\n- 当第一个参数为负值时，会与字符串长度相加\n- 当第二个参数为负值时，自动转换为0\n\n```js\n'this is a string'.substr(1, 3); // \"his\"\n'this is a string'.substr(-5, -3); // \"\" length = 16\n'this is a string'.substr(11, 0); // \"tr\"\n```\n\n## trim() 去除首尾空格\n- 返回新字符串 不改变源字符串\n\n## 字符串大小写转换\n\n- toLocalUpperCase()\n- toUpperCase()\n- toLowerCase()\n- toLocalLowerCase()\n\n## search(regexp)\n\n```js\n/*\n * 接收参数为正则表达式，不支持全局g \n * 若传入参数不是正则表达式 则首先会通过RegExp构造函数转换为正则\n * 返回首次匹配处的索引值 若不存在返回-1  \n */\n-------------------------------------------------------------------\nstring.search(/^\\d$/i); // ===>search() \n'thIs is a string'.search(/is/g);      //  ===>5\n'thIs is a string'.search(/is/i);    //  ===>2\n```\n\n## replace(regexp, 要替换成的string)\n\n```js\n/*\n * 接收参数 第一个为正则表达式，第二个为要替换成的字符串 也可以是函数，计算返回动态的字符串 支持全局g\n * 若第一个参数不是正则表达式 是字符串，与search不同，而是直接匹配这个字符串\n * 返回首次匹配处的索引值 若不存在返回-1  \n */\n\nstring.replace(/javascript/gi,'javaScript')  //===> 将全局不区分大小写的JavaScript字符串替换成 javaScript\n```\n\n## match(regexp)非全局匹配时与正则对象方法的exec返回结果很像\n\n```js\n/*\n * 最常用的string正则方法\n * 接收参数 为正则表达式\n * 返回匹配结果组成的数组  \n * 如果正则没有g匹配符，则返回数组第一个为完整匹配元素，其他存放用圆括号括起来的与字符串相匹配的子串\n */\n\n'this is a number 1 or 123 or 98 0 9 is 67'.match(/\\d+/g)\n// ====> [\"1\", \"123\", \"98\", \"0\", \"9\", \"67\"]\n'this is a number 1 or 123 or 98 0 9 is 67'.match(/\\d+/)\n// ====> [\"1\", index: 17, input: \"this is a number 1 or 123 or 98 0 9 is 67\"]\n'this is a number 1 or 123 or 98 0 9 is 67'.match(/(\\ )\\d+/)\n// ====> [\" 1\", \" \", index: 16, input: \"this is a number 1 or 123 or 98 0 9 is 67\"]\n'this is a number 1 or 123 or 98 0 9 is 67'.match(/(\\ )\\d+/g)\n// ====> [\" 1\", \" 123\", \" 98\", \" 0\", \" 9\", \" 67\"]\n```\n\n## split(regexp)\n\n```js\n/*\n * split()可以接受一个正则参数\n */\n'this is a number 1 or 123 or 98 0 9 is 67'.split(/\\s|i/)\n// ===> [\"th\", \"s\", \"\", \"s\", \"a\", \"number\", \"1\", \"or\", \"123\", \"or\", \"98\", \"0\", \"9\", \"\", \"s\", \"67\"]\n'this is a number 1 or 123 or 98 0 9 is 67'.split(/\\s/)\n// ====> [\"this\", \"is\", \"a\", \"number\", \"1\", \"or\", \"123\", \"or\", \"98\", \"0\", \"9\", \"is\", \"67\"]\n```\n\n","source":"_posts/字符串方法.md","raw":"---\ntitle: 字符串方法\ndate: 2018-10-22 15:34:45\ntags: JavaScript\ndescription: 记录字符串的所有方法\ncategories: JavaScript\nkeywords: 字符串的方法\n---\n\n## indexOf(string) \n- 返回包含 字符串 string 的索引位置（第一次匹配的位置）\n- 不包含则返回-1\n\n```js\n'this is a string'.indexOf('is'); // 2\n```\n\n## charAt(index)\n- 返回index 处的字符\n- index 超出字符长度范围，返回空字符串\n\n```js\n'this is a string'.charAt(1); // \"h\"\n```\n\n## charCodeAt(index)\n- 返回index 处字符的code值 字符编码\n- index 超出字符长度范围 则返回 NaN\n\n```js\n'this is a string'.charCodeAt(1); // 104(h的code码：字符编码)\n```\n## concat() 拼接字符串\n- 返回一个新字符串，不改变原字符串\n- 可以有任意多个参数\n- 数组也有一个这个方法\n\n```js\n'this is a string'.concat(' ahhh', ' jjjj'); // \"this is a string ahhh jjjj\"\n```\n\n## slice(index, n) \n- 返回新字符串，不改变源字符串\n- 截取 [index, n) 范围内的字符串\n- 当参数为负值时，会与字符串长度相加\n\n```js\n'this is a string'.slice(1, 3); // \"hi\"\n'this is a string'.slice(-5, -3); // \"tr\" length = 16\n'this is a string'.slice(11, 13); // \"tr\"\n```\n## substring(index, n)\n- 返回新字符串，不改变源字符串\n- 截取 [index, n) 范围内的字符串\n- 当参数为负值时，自动转换为 0 \n- 该方法，默认将 两参数中较小的值，作为开始值（即 substring(5,3) == substring(3,5)\n\n```js\n'this is a string'.substring(1, 3); // \"hi\"\n'this is a string'.substring(5, -3); // \"this \" length = 16\n'this is a string'.substring(5, 0); // \"this \"\n'this is a string'.substring(0, 5); // \"this \"\n```\n\n## substr(index, n)\n- 返回新字符串，不改变源字符串\n- 截取 [index, n + index) 范围内的字符串(即，从 index 开始 截取 n 位 字符串)\n- 当第一个参数为负值时，会与字符串长度相加\n- 当第二个参数为负值时，自动转换为0\n\n```js\n'this is a string'.substr(1, 3); // \"his\"\n'this is a string'.substr(-5, -3); // \"\" length = 16\n'this is a string'.substr(11, 0); // \"tr\"\n```\n\n## trim() 去除首尾空格\n- 返回新字符串 不改变源字符串\n\n## 字符串大小写转换\n\n- toLocalUpperCase()\n- toUpperCase()\n- toLowerCase()\n- toLocalLowerCase()\n\n## search(regexp)\n\n```js\n/*\n * 接收参数为正则表达式，不支持全局g \n * 若传入参数不是正则表达式 则首先会通过RegExp构造函数转换为正则\n * 返回首次匹配处的索引值 若不存在返回-1  \n */\n-------------------------------------------------------------------\nstring.search(/^\\d$/i); // ===>search() \n'thIs is a string'.search(/is/g);      //  ===>5\n'thIs is a string'.search(/is/i);    //  ===>2\n```\n\n## replace(regexp, 要替换成的string)\n\n```js\n/*\n * 接收参数 第一个为正则表达式，第二个为要替换成的字符串 也可以是函数，计算返回动态的字符串 支持全局g\n * 若第一个参数不是正则表达式 是字符串，与search不同，而是直接匹配这个字符串\n * 返回首次匹配处的索引值 若不存在返回-1  \n */\n\nstring.replace(/javascript/gi,'javaScript')  //===> 将全局不区分大小写的JavaScript字符串替换成 javaScript\n```\n\n## match(regexp)非全局匹配时与正则对象方法的exec返回结果很像\n\n```js\n/*\n * 最常用的string正则方法\n * 接收参数 为正则表达式\n * 返回匹配结果组成的数组  \n * 如果正则没有g匹配符，则返回数组第一个为完整匹配元素，其他存放用圆括号括起来的与字符串相匹配的子串\n */\n\n'this is a number 1 or 123 or 98 0 9 is 67'.match(/\\d+/g)\n// ====> [\"1\", \"123\", \"98\", \"0\", \"9\", \"67\"]\n'this is a number 1 or 123 or 98 0 9 is 67'.match(/\\d+/)\n// ====> [\"1\", index: 17, input: \"this is a number 1 or 123 or 98 0 9 is 67\"]\n'this is a number 1 or 123 or 98 0 9 is 67'.match(/(\\ )\\d+/)\n// ====> [\" 1\", \" \", index: 16, input: \"this is a number 1 or 123 or 98 0 9 is 67\"]\n'this is a number 1 or 123 or 98 0 9 is 67'.match(/(\\ )\\d+/g)\n// ====> [\" 1\", \" 123\", \" 98\", \" 0\", \" 9\", \" 67\"]\n```\n\n## split(regexp)\n\n```js\n/*\n * split()可以接受一个正则参数\n */\n'this is a number 1 or 123 or 98 0 9 is 67'.split(/\\s|i/)\n// ===> [\"th\", \"s\", \"\", \"s\", \"a\", \"number\", \"1\", \"or\", \"123\", \"or\", \"98\", \"0\", \"9\", \"\", \"s\", \"67\"]\n'this is a number 1 or 123 or 98 0 9 is 67'.split(/\\s/)\n// ====> [\"this\", \"is\", \"a\", \"number\", \"1\", \"or\", \"123\", \"or\", \"98\", \"0\", \"9\", \"is\", \"67\"]\n```\n\n","slug":"字符串方法","published":1,"updated":"2018-11-08T05:16:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7kpl030001zjcs65hnohlpl","content":"<h2 id=\"indexOf-string\"><a href=\"#indexOf-string\" class=\"headerlink\" title=\"indexOf(string)\"></a>indexOf(string)</h2><ul>\n<li>返回包含 字符串 string 的索引位置（第一次匹配的位置）</li>\n<li>不包含则返回-1</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'this is a string'</span>.indexOf(<span class=\"string\">'is'</span>); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"charAt-index\"><a href=\"#charAt-index\" class=\"headerlink\" title=\"charAt(index)\"></a>charAt(index)</h2><ul>\n<li>返回index 处的字符</li>\n<li>index 超出字符长度范围，返回空字符串</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'this is a string'</span>.charAt(<span class=\"number\">1</span>); <span class=\"comment\">// \"h\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"charCodeAt-index\"><a href=\"#charCodeAt-index\" class=\"headerlink\" title=\"charCodeAt(index)\"></a>charCodeAt(index)</h2><ul>\n<li>返回index 处字符的code值 字符编码</li>\n<li>index 超出字符长度范围 则返回 NaN</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'this is a string'</span>.charCodeAt(<span class=\"number\">1</span>); <span class=\"comment\">// 104(h的code码：字符编码)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"concat-拼接字符串\"><a href=\"#concat-拼接字符串\" class=\"headerlink\" title=\"concat() 拼接字符串\"></a>concat() 拼接字符串</h2><ul>\n<li>返回一个新字符串，不改变原字符串</li>\n<li>可以有任意多个参数</li>\n<li>数组也有一个这个方法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'this is a string'</span>.concat(<span class=\"string\">' ahhh'</span>, <span class=\"string\">' jjjj'</span>); <span class=\"comment\">// \"this is a string ahhh jjjj\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"slice-index-n\"><a href=\"#slice-index-n\" class=\"headerlink\" title=\"slice(index, n)\"></a>slice(index, n)</h2><ul>\n<li>返回新字符串，不改变源字符串</li>\n<li>截取 [index, n) 范围内的字符串</li>\n<li>当参数为负值时，会与字符串长度相加</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'this is a string'</span>.slice(<span class=\"number\">1</span>, <span class=\"number\">3</span>); <span class=\"comment\">// \"hi\"</span></span><br><span class=\"line\"><span class=\"string\">'this is a string'</span>.slice(<span class=\"number\">-5</span>, <span class=\"number\">-3</span>); <span class=\"comment\">// \"tr\" length = 16</span></span><br><span class=\"line\"><span class=\"string\">'this is a string'</span>.slice(<span class=\"number\">11</span>, <span class=\"number\">13</span>); <span class=\"comment\">// \"tr\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"substring-index-n\"><a href=\"#substring-index-n\" class=\"headerlink\" title=\"substring(index, n)\"></a>substring(index, n)</h2><ul>\n<li>返回新字符串，不改变源字符串</li>\n<li>截取 [index, n) 范围内的字符串</li>\n<li>当参数为负值时，自动转换为 0 </li>\n<li>该方法，默认将 两参数中较小的值，作为开始值（即 substring(5,3) == substring(3,5)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'this is a string'</span>.substring(<span class=\"number\">1</span>, <span class=\"number\">3</span>); <span class=\"comment\">// \"hi\"</span></span><br><span class=\"line\"><span class=\"string\">'this is a string'</span>.substring(<span class=\"number\">5</span>, <span class=\"number\">-3</span>); <span class=\"comment\">// \"this \" length = 16</span></span><br><span class=\"line\"><span class=\"string\">'this is a string'</span>.substring(<span class=\"number\">5</span>, <span class=\"number\">0</span>); <span class=\"comment\">// \"this \"</span></span><br><span class=\"line\"><span class=\"string\">'this is a string'</span>.substring(<span class=\"number\">0</span>, <span class=\"number\">5</span>); <span class=\"comment\">// \"this \"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"substr-index-n\"><a href=\"#substr-index-n\" class=\"headerlink\" title=\"substr(index, n)\"></a>substr(index, n)</h2><ul>\n<li>返回新字符串，不改变源字符串</li>\n<li>截取 [index, n + index) 范围内的字符串(即，从 index 开始 截取 n 位 字符串)</li>\n<li>当第一个参数为负值时，会与字符串长度相加</li>\n<li>当第二个参数为负值时，自动转换为0</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'this is a string'</span>.substr(<span class=\"number\">1</span>, <span class=\"number\">3</span>); <span class=\"comment\">// \"his\"</span></span><br><span class=\"line\"><span class=\"string\">'this is a string'</span>.substr(<span class=\"number\">-5</span>, <span class=\"number\">-3</span>); <span class=\"comment\">// \"\" length = 16</span></span><br><span class=\"line\"><span class=\"string\">'this is a string'</span>.substr(<span class=\"number\">11</span>, <span class=\"number\">0</span>); <span class=\"comment\">// \"tr\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"trim-去除首尾空格\"><a href=\"#trim-去除首尾空格\" class=\"headerlink\" title=\"trim() 去除首尾空格\"></a>trim() 去除首尾空格</h2><ul>\n<li>返回新字符串 不改变源字符串</li>\n</ul>\n<h2 id=\"字符串大小写转换\"><a href=\"#字符串大小写转换\" class=\"headerlink\" title=\"字符串大小写转换\"></a>字符串大小写转换</h2><ul>\n<li>toLocalUpperCase()</li>\n<li>toUpperCase()</li>\n<li>toLowerCase()</li>\n<li>toLocalLowerCase()</li>\n</ul>\n<h2 id=\"search-regexp\"><a href=\"#search-regexp\" class=\"headerlink\" title=\"search(regexp)\"></a>search(regexp)</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 接收参数为正则表达式，不支持全局g </span></span><br><span class=\"line\"><span class=\"comment\"> * 若传入参数不是正则表达式 则首先会通过RegExp构造函数转换为正则</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回首次匹配处的索引值 若不存在返回-1  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">-------------------------------------------------------------------</span><br><span class=\"line\">string.search(<span class=\"regexp\">/^\\d$/i</span>); <span class=\"comment\">// ===&gt;search() </span></span><br><span class=\"line\"><span class=\"string\">'thIs is a string'</span>.search(<span class=\"regexp\">/is/g</span>);      <span class=\"comment\">//  ===&gt;5</span></span><br><span class=\"line\"><span class=\"string\">'thIs is a string'</span>.search(<span class=\"regexp\">/is/i</span>);    <span class=\"comment\">//  ===&gt;2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"replace-regexp-要替换成的string\"><a href=\"#replace-regexp-要替换成的string\" class=\"headerlink\" title=\"replace(regexp, 要替换成的string)\"></a>replace(regexp, 要替换成的string)</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 接收参数 第一个为正则表达式，第二个为要替换成的字符串 也可以是函数，计算返回动态的字符串 支持全局g</span></span><br><span class=\"line\"><span class=\"comment\"> * 若第一个参数不是正则表达式 是字符串，与search不同，而是直接匹配这个字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回首次匹配处的索引值 若不存在返回-1  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">string.replace(<span class=\"regexp\">/javascript/gi</span>,<span class=\"string\">'javaScript'</span>)  <span class=\"comment\">//===&gt; 将全局不区分大小写的JavaScript字符串替换成 javaScript</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"match-regexp-非全局匹配时与正则对象方法的exec返回结果很像\"><a href=\"#match-regexp-非全局匹配时与正则对象方法的exec返回结果很像\" class=\"headerlink\" title=\"match(regexp)非全局匹配时与正则对象方法的exec返回结果很像\"></a>match(regexp)非全局匹配时与正则对象方法的exec返回结果很像</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 最常用的string正则方法</span></span><br><span class=\"line\"><span class=\"comment\"> * 接收参数 为正则表达式</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回匹配结果组成的数组  </span></span><br><span class=\"line\"><span class=\"comment\"> * 如果正则没有g匹配符，则返回数组第一个为完整匹配元素，其他存放用圆括号括起来的与字符串相匹配的子串</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'this is a number 1 or 123 or 98 0 9 is 67'</span>.match(<span class=\"regexp\">/\\d+/g</span>)</span><br><span class=\"line\"><span class=\"comment\">// ====&gt; [\"1\", \"123\", \"98\", \"0\", \"9\", \"67\"]</span></span><br><span class=\"line\"><span class=\"string\">'this is a number 1 or 123 or 98 0 9 is 67'</span>.match(<span class=\"regexp\">/\\d+/</span>)</span><br><span class=\"line\"><span class=\"comment\">// ====&gt; [\"1\", index: 17, input: \"this is a number 1 or 123 or 98 0 9 is 67\"]</span></span><br><span class=\"line\"><span class=\"string\">'this is a number 1 or 123 or 98 0 9 is 67'</span>.match(<span class=\"regexp\">/(\\ )\\d+/</span>)</span><br><span class=\"line\"><span class=\"comment\">// ====&gt; [\" 1\", \" \", index: 16, input: \"this is a number 1 or 123 or 98 0 9 is 67\"]</span></span><br><span class=\"line\"><span class=\"string\">'this is a number 1 or 123 or 98 0 9 is 67'</span>.match(<span class=\"regexp\">/(\\ )\\d+/g</span>)</span><br><span class=\"line\"><span class=\"comment\">// ====&gt; [\" 1\", \" 123\", \" 98\", \" 0\", \" 9\", \" 67\"]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"split-regexp\"><a href=\"#split-regexp\" class=\"headerlink\" title=\"split(regexp)\"></a>split(regexp)</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * split()可以接受一个正则参数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"string\">'this is a number 1 or 123 or 98 0 9 is 67'</span>.split(<span class=\"regexp\">/\\s|i/</span>)</span><br><span class=\"line\"><span class=\"comment\">// ===&gt; [\"th\", \"s\", \"\", \"s\", \"a\", \"number\", \"1\", \"or\", \"123\", \"or\", \"98\", \"0\", \"9\", \"\", \"s\", \"67\"]</span></span><br><span class=\"line\"><span class=\"string\">'this is a number 1 or 123 or 98 0 9 is 67'</span>.split(<span class=\"regexp\">/\\s/</span>)</span><br><span class=\"line\"><span class=\"comment\">// ====&gt; [\"this\", \"is\", \"a\", \"number\", \"1\", \"or\", \"123\", \"or\", \"98\", \"0\", \"9\", \"is\", \"67\"]</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"indexOf-string\"><a href=\"#indexOf-string\" class=\"headerlink\" title=\"indexOf(string)\"></a>indexOf(string)</h2><ul>\n<li>返回包含 字符串 string 的索引位置（第一次匹配的位置）</li>\n<li>不包含则返回-1</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'this is a string'</span>.indexOf(<span class=\"string\">'is'</span>); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"charAt-index\"><a href=\"#charAt-index\" class=\"headerlink\" title=\"charAt(index)\"></a>charAt(index)</h2><ul>\n<li>返回index 处的字符</li>\n<li>index 超出字符长度范围，返回空字符串</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'this is a string'</span>.charAt(<span class=\"number\">1</span>); <span class=\"comment\">// \"h\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"charCodeAt-index\"><a href=\"#charCodeAt-index\" class=\"headerlink\" title=\"charCodeAt(index)\"></a>charCodeAt(index)</h2><ul>\n<li>返回index 处字符的code值 字符编码</li>\n<li>index 超出字符长度范围 则返回 NaN</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'this is a string'</span>.charCodeAt(<span class=\"number\">1</span>); <span class=\"comment\">// 104(h的code码：字符编码)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"concat-拼接字符串\"><a href=\"#concat-拼接字符串\" class=\"headerlink\" title=\"concat() 拼接字符串\"></a>concat() 拼接字符串</h2><ul>\n<li>返回一个新字符串，不改变原字符串</li>\n<li>可以有任意多个参数</li>\n<li>数组也有一个这个方法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'this is a string'</span>.concat(<span class=\"string\">' ahhh'</span>, <span class=\"string\">' jjjj'</span>); <span class=\"comment\">// \"this is a string ahhh jjjj\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"slice-index-n\"><a href=\"#slice-index-n\" class=\"headerlink\" title=\"slice(index, n)\"></a>slice(index, n)</h2><ul>\n<li>返回新字符串，不改变源字符串</li>\n<li>截取 [index, n) 范围内的字符串</li>\n<li>当参数为负值时，会与字符串长度相加</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'this is a string'</span>.slice(<span class=\"number\">1</span>, <span class=\"number\">3</span>); <span class=\"comment\">// \"hi\"</span></span><br><span class=\"line\"><span class=\"string\">'this is a string'</span>.slice(<span class=\"number\">-5</span>, <span class=\"number\">-3</span>); <span class=\"comment\">// \"tr\" length = 16</span></span><br><span class=\"line\"><span class=\"string\">'this is a string'</span>.slice(<span class=\"number\">11</span>, <span class=\"number\">13</span>); <span class=\"comment\">// \"tr\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"substring-index-n\"><a href=\"#substring-index-n\" class=\"headerlink\" title=\"substring(index, n)\"></a>substring(index, n)</h2><ul>\n<li>返回新字符串，不改变源字符串</li>\n<li>截取 [index, n) 范围内的字符串</li>\n<li>当参数为负值时，自动转换为 0 </li>\n<li>该方法，默认将 两参数中较小的值，作为开始值（即 substring(5,3) == substring(3,5)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'this is a string'</span>.substring(<span class=\"number\">1</span>, <span class=\"number\">3</span>); <span class=\"comment\">// \"hi\"</span></span><br><span class=\"line\"><span class=\"string\">'this is a string'</span>.substring(<span class=\"number\">5</span>, <span class=\"number\">-3</span>); <span class=\"comment\">// \"this \" length = 16</span></span><br><span class=\"line\"><span class=\"string\">'this is a string'</span>.substring(<span class=\"number\">5</span>, <span class=\"number\">0</span>); <span class=\"comment\">// \"this \"</span></span><br><span class=\"line\"><span class=\"string\">'this is a string'</span>.substring(<span class=\"number\">0</span>, <span class=\"number\">5</span>); <span class=\"comment\">// \"this \"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"substr-index-n\"><a href=\"#substr-index-n\" class=\"headerlink\" title=\"substr(index, n)\"></a>substr(index, n)</h2><ul>\n<li>返回新字符串，不改变源字符串</li>\n<li>截取 [index, n + index) 范围内的字符串(即，从 index 开始 截取 n 位 字符串)</li>\n<li>当第一个参数为负值时，会与字符串长度相加</li>\n<li>当第二个参数为负值时，自动转换为0</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'this is a string'</span>.substr(<span class=\"number\">1</span>, <span class=\"number\">3</span>); <span class=\"comment\">// \"his\"</span></span><br><span class=\"line\"><span class=\"string\">'this is a string'</span>.substr(<span class=\"number\">-5</span>, <span class=\"number\">-3</span>); <span class=\"comment\">// \"\" length = 16</span></span><br><span class=\"line\"><span class=\"string\">'this is a string'</span>.substr(<span class=\"number\">11</span>, <span class=\"number\">0</span>); <span class=\"comment\">// \"tr\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"trim-去除首尾空格\"><a href=\"#trim-去除首尾空格\" class=\"headerlink\" title=\"trim() 去除首尾空格\"></a>trim() 去除首尾空格</h2><ul>\n<li>返回新字符串 不改变源字符串</li>\n</ul>\n<h2 id=\"字符串大小写转换\"><a href=\"#字符串大小写转换\" class=\"headerlink\" title=\"字符串大小写转换\"></a>字符串大小写转换</h2><ul>\n<li>toLocalUpperCase()</li>\n<li>toUpperCase()</li>\n<li>toLowerCase()</li>\n<li>toLocalLowerCase()</li>\n</ul>\n<h2 id=\"search-regexp\"><a href=\"#search-regexp\" class=\"headerlink\" title=\"search(regexp)\"></a>search(regexp)</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 接收参数为正则表达式，不支持全局g </span></span><br><span class=\"line\"><span class=\"comment\"> * 若传入参数不是正则表达式 则首先会通过RegExp构造函数转换为正则</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回首次匹配处的索引值 若不存在返回-1  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">-------------------------------------------------------------------</span><br><span class=\"line\">string.search(<span class=\"regexp\">/^\\d$/i</span>); <span class=\"comment\">// ===&gt;search() </span></span><br><span class=\"line\"><span class=\"string\">'thIs is a string'</span>.search(<span class=\"regexp\">/is/g</span>);      <span class=\"comment\">//  ===&gt;5</span></span><br><span class=\"line\"><span class=\"string\">'thIs is a string'</span>.search(<span class=\"regexp\">/is/i</span>);    <span class=\"comment\">//  ===&gt;2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"replace-regexp-要替换成的string\"><a href=\"#replace-regexp-要替换成的string\" class=\"headerlink\" title=\"replace(regexp, 要替换成的string)\"></a>replace(regexp, 要替换成的string)</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 接收参数 第一个为正则表达式，第二个为要替换成的字符串 也可以是函数，计算返回动态的字符串 支持全局g</span></span><br><span class=\"line\"><span class=\"comment\"> * 若第一个参数不是正则表达式 是字符串，与search不同，而是直接匹配这个字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回首次匹配处的索引值 若不存在返回-1  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">string.replace(<span class=\"regexp\">/javascript/gi</span>,<span class=\"string\">'javaScript'</span>)  <span class=\"comment\">//===&gt; 将全局不区分大小写的JavaScript字符串替换成 javaScript</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"match-regexp-非全局匹配时与正则对象方法的exec返回结果很像\"><a href=\"#match-regexp-非全局匹配时与正则对象方法的exec返回结果很像\" class=\"headerlink\" title=\"match(regexp)非全局匹配时与正则对象方法的exec返回结果很像\"></a>match(regexp)非全局匹配时与正则对象方法的exec返回结果很像</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 最常用的string正则方法</span></span><br><span class=\"line\"><span class=\"comment\"> * 接收参数 为正则表达式</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回匹配结果组成的数组  </span></span><br><span class=\"line\"><span class=\"comment\"> * 如果正则没有g匹配符，则返回数组第一个为完整匹配元素，其他存放用圆括号括起来的与字符串相匹配的子串</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'this is a number 1 or 123 or 98 0 9 is 67'</span>.match(<span class=\"regexp\">/\\d+/g</span>)</span><br><span class=\"line\"><span class=\"comment\">// ====&gt; [\"1\", \"123\", \"98\", \"0\", \"9\", \"67\"]</span></span><br><span class=\"line\"><span class=\"string\">'this is a number 1 or 123 or 98 0 9 is 67'</span>.match(<span class=\"regexp\">/\\d+/</span>)</span><br><span class=\"line\"><span class=\"comment\">// ====&gt; [\"1\", index: 17, input: \"this is a number 1 or 123 or 98 0 9 is 67\"]</span></span><br><span class=\"line\"><span class=\"string\">'this is a number 1 or 123 or 98 0 9 is 67'</span>.match(<span class=\"regexp\">/(\\ )\\d+/</span>)</span><br><span class=\"line\"><span class=\"comment\">// ====&gt; [\" 1\", \" \", index: 16, input: \"this is a number 1 or 123 or 98 0 9 is 67\"]</span></span><br><span class=\"line\"><span class=\"string\">'this is a number 1 or 123 or 98 0 9 is 67'</span>.match(<span class=\"regexp\">/(\\ )\\d+/g</span>)</span><br><span class=\"line\"><span class=\"comment\">// ====&gt; [\" 1\", \" 123\", \" 98\", \" 0\", \" 9\", \" 67\"]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"split-regexp\"><a href=\"#split-regexp\" class=\"headerlink\" title=\"split(regexp)\"></a>split(regexp)</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * split()可以接受一个正则参数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"string\">'this is a number 1 or 123 or 98 0 9 is 67'</span>.split(<span class=\"regexp\">/\\s|i/</span>)</span><br><span class=\"line\"><span class=\"comment\">// ===&gt; [\"th\", \"s\", \"\", \"s\", \"a\", \"number\", \"1\", \"or\", \"123\", \"or\", \"98\", \"0\", \"9\", \"\", \"s\", \"67\"]</span></span><br><span class=\"line\"><span class=\"string\">'this is a number 1 or 123 or 98 0 9 is 67'</span>.split(<span class=\"regexp\">/\\s/</span>)</span><br><span class=\"line\"><span class=\"comment\">// ====&gt; [\"this\", \"is\", \"a\", \"number\", \"1\", \"or\", \"123\", \"or\", \"98\", \"0\", \"9\", \"is\", \"67\"]</span></span><br></pre></td></tr></table></figure>\n"},{"title":"重绘重排","date":"2018-08-28T01:44:35.000Z","description":"梳理渲染树构建、布局绘制以及重绘重排","keywords":"重绘重排、渲染树构建布局和绘制","_content":"\n> 了解重绘重排前，\b应当先了解浏览器绘制页面的过程\n\n## 渲染过程\n> - 解析HTML文件，生成DOM树\n> - 解析CSS文件，生成CSSOM\n> - 结合DOM和CSSOM，生成渲染树(包含页面所有可见节点及其计算样式)\n> - 根据渲染树生成布局（layout）(将渲染树的所有节点进行平面合成，各个节点在设备视口的确切位置及大小，即获得每个节点的几何信息)\n> - 绘制(将布局（各个节点）绘制在屏幕上)\n<div align=\"center\">\n  <img src=\"/teresa/images/render.png\" alt=\"渲染过程\">\n</div>\n\n### 生成渲染树过程：\n\n> - 从DOM树的根节点进行遍历每个可见的节点\n>   - 某些节点不可见（例如脚本标记、元标记等），因为它们不会体现在渲染输出中，所以会被忽略。\n>   - 某些节点通过 CSS 隐藏，因此在渲染树中也会被忽略，例如，节点上设置了“display: none”属性。\n> - 为每个节点找到他适配的CSSOM，并应用\n> - 发射该节点及其内容和计算样式\n\n### 布局（自动重排\b）\n> - 浏览器从渲染树的根节点开始进行遍历\n> - 布局流程的输出是一个“盒模型”，它会精确地捕获每个元素在视口内的确切位置和尺寸：所有相对测量值都转换为屏幕上的绝对像素\n\n\n### 绘制或栅格化\n\n我们知道了哪些节点可见、它们的计算样式以及几何信息，我们终于可以将这些信息传递给最后一个阶段：将渲染树中的每个节点转换成屏幕上的实际像素，这一步就是绘制。\n\n执行渲染树构建、布局和绘制所需的时间将取决于文档大小、应用的样式，以及运行文档的设备：文档越大，浏览器需要完成的工作就越多；样式越复杂，绘制需要的时间就越长（例如，单色的绘制开销“较小”，而阴影的计算和渲染开销则要“大得多”）。\n\n## 重绘重排\n当改变DOM和CSS时将会引起重绘重排；\n- 当影响了页面的布局，元素的几何属性的时候会引起重排（比如字体大小改变，元素位置的改变）\n- 除了上面以外的（比如颜色的变话）会引起重绘\n\n重排一定会重绘，而重绘不一定会重排\n\n### 减少重绘（repaint）重排（reflow）\n\n- 应尽量减少更改DOM和CSS的次数，通过更改class来改变样式\n- 将需要修改DOM脱离文档流\n  - 隐藏元素，修改，重新显示。\n  - 使用文档片断（document fragment），在当前DOM外构建一个子树，再把它插入文档中。\n  - 把原始元素拷贝到脱离文档的节点中，修改后在把原始元素替换掉。\n- `transform`和`opacity`不会触发重绘,应多使用这两个属性，减少`position`的使用\n- [https://csstriggers.com/](https://csstriggers.com/) 这里统计了各个css属性是否会触发重绘重排\n\n> 参考链接：[网页性能管理详解](http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html)\n> \n> 参考链接：[渲染树构建、布局及绘制](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn)","source":"_posts/重绘重排.md","raw":"---\ntitle: 重绘重排\ndate: 2018-08-28 09:44:35\ntags: 性能优化\ndescription: 梳理渲染树构建、布局绘制以及重绘重排\ncategories: 性能优化\nkeywords: 重绘重排、渲染树构建布局和绘制\n---\n\n> 了解重绘重排前，\b应当先了解浏览器绘制页面的过程\n\n## 渲染过程\n> - 解析HTML文件，生成DOM树\n> - 解析CSS文件，生成CSSOM\n> - 结合DOM和CSSOM，生成渲染树(包含页面所有可见节点及其计算样式)\n> - 根据渲染树生成布局（layout）(将渲染树的所有节点进行平面合成，各个节点在设备视口的确切位置及大小，即获得每个节点的几何信息)\n> - 绘制(将布局（各个节点）绘制在屏幕上)\n<div align=\"center\">\n  <img src=\"/teresa/images/render.png\" alt=\"渲染过程\">\n</div>\n\n### 生成渲染树过程：\n\n> - 从DOM树的根节点进行遍历每个可见的节点\n>   - 某些节点不可见（例如脚本标记、元标记等），因为它们不会体现在渲染输出中，所以会被忽略。\n>   - 某些节点通过 CSS 隐藏，因此在渲染树中也会被忽略，例如，节点上设置了“display: none”属性。\n> - 为每个节点找到他适配的CSSOM，并应用\n> - 发射该节点及其内容和计算样式\n\n### 布局（自动重排\b）\n> - 浏览器从渲染树的根节点开始进行遍历\n> - 布局流程的输出是一个“盒模型”，它会精确地捕获每个元素在视口内的确切位置和尺寸：所有相对测量值都转换为屏幕上的绝对像素\n\n\n### 绘制或栅格化\n\n我们知道了哪些节点可见、它们的计算样式以及几何信息，我们终于可以将这些信息传递给最后一个阶段：将渲染树中的每个节点转换成屏幕上的实际像素，这一步就是绘制。\n\n执行渲染树构建、布局和绘制所需的时间将取决于文档大小、应用的样式，以及运行文档的设备：文档越大，浏览器需要完成的工作就越多；样式越复杂，绘制需要的时间就越长（例如，单色的绘制开销“较小”，而阴影的计算和渲染开销则要“大得多”）。\n\n## 重绘重排\n当改变DOM和CSS时将会引起重绘重排；\n- 当影响了页面的布局，元素的几何属性的时候会引起重排（比如字体大小改变，元素位置的改变）\n- 除了上面以外的（比如颜色的变话）会引起重绘\n\n重排一定会重绘，而重绘不一定会重排\n\n### 减少重绘（repaint）重排（reflow）\n\n- 应尽量减少更改DOM和CSS的次数，通过更改class来改变样式\n- 将需要修改DOM脱离文档流\n  - 隐藏元素，修改，重新显示。\n  - 使用文档片断（document fragment），在当前DOM外构建一个子树，再把它插入文档中。\n  - 把原始元素拷贝到脱离文档的节点中，修改后在把原始元素替换掉。\n- `transform`和`opacity`不会触发重绘,应多使用这两个属性，减少`position`的使用\n- [https://csstriggers.com/](https://csstriggers.com/) 这里统计了各个css属性是否会触发重绘重排\n\n> 参考链接：[网页性能管理详解](http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html)\n> \n> 参考链接：[渲染树构建、布局及绘制](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn)","slug":"重绘重排","published":1,"updated":"2018-08-29T09:32:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7kpl0310022jcs6vcp44aw1","content":"<blockquote>\n<p>了解重绘重排前，\b应当先了解浏览器绘制页面的过程</p>\n</blockquote>\n<h2 id=\"渲染过程\"><a href=\"#渲染过程\" class=\"headerlink\" title=\"渲染过程\"></a>渲染过程</h2><blockquote>\n<ul>\n<li>解析HTML文件，生成DOM树</li>\n<li>解析CSS文件，生成CSSOM</li>\n<li>结合DOM和CSSOM，生成渲染树(包含页面所有可见节点及其计算样式)</li>\n<li>根据渲染树生成布局（layout）(将渲染树的所有节点进行平面合成，各个节点在设备视口的确切位置及大小，即获得每个节点的几何信息)</li>\n<li>绘制(将布局（各个节点）绘制在屏幕上)</li>\n</ul>\n</blockquote>\n<div align=\"center\"><br>  <img src=\"/teresa/images/render.png\" alt=\"渲染过程\"><br></div>\n\n<h3 id=\"生成渲染树过程：\"><a href=\"#生成渲染树过程：\" class=\"headerlink\" title=\"生成渲染树过程：\"></a>生成渲染树过程：</h3><blockquote>\n<ul>\n<li>从DOM树的根节点进行遍历每个可见的节点<ul>\n<li>某些节点不可见（例如脚本标记、元标记等），因为它们不会体现在渲染输出中，所以会被忽略。</li>\n<li>某些节点通过 CSS 隐藏，因此在渲染树中也会被忽略，例如，节点上设置了“display: none”属性。</li>\n</ul>\n</li>\n<li>为每个节点找到他适配的CSSOM，并应用</li>\n<li>发射该节点及其内容和计算样式</li>\n</ul>\n</blockquote>\n<h3 id=\"布局（自动重排）\"><a href=\"#布局（自动重排）\" class=\"headerlink\" title=\"布局（自动重排\b）\"></a>布局（自动重排\b）</h3><blockquote>\n<ul>\n<li>浏览器从渲染树的根节点开始进行遍历</li>\n<li>布局流程的输出是一个“盒模型”，它会精确地捕获每个元素在视口内的确切位置和尺寸：所有相对测量值都转换为屏幕上的绝对像素</li>\n</ul>\n</blockquote>\n<h3 id=\"绘制或栅格化\"><a href=\"#绘制或栅格化\" class=\"headerlink\" title=\"绘制或栅格化\"></a>绘制或栅格化</h3><p>我们知道了哪些节点可见、它们的计算样式以及几何信息，我们终于可以将这些信息传递给最后一个阶段：将渲染树中的每个节点转换成屏幕上的实际像素，这一步就是绘制。</p>\n<p>执行渲染树构建、布局和绘制所需的时间将取决于文档大小、应用的样式，以及运行文档的设备：文档越大，浏览器需要完成的工作就越多；样式越复杂，绘制需要的时间就越长（例如，单色的绘制开销“较小”，而阴影的计算和渲染开销则要“大得多”）。</p>\n<h2 id=\"重绘重排\"><a href=\"#重绘重排\" class=\"headerlink\" title=\"重绘重排\"></a>重绘重排</h2><p>当改变DOM和CSS时将会引起重绘重排；</p>\n<ul>\n<li>当影响了页面的布局，元素的几何属性的时候会引起重排（比如字体大小改变，元素位置的改变）</li>\n<li>除了上面以外的（比如颜色的变话）会引起重绘</li>\n</ul>\n<p>重排一定会重绘，而重绘不一定会重排</p>\n<h3 id=\"减少重绘（repaint）重排（reflow）\"><a href=\"#减少重绘（repaint）重排（reflow）\" class=\"headerlink\" title=\"减少重绘（repaint）重排（reflow）\"></a>减少重绘（repaint）重排（reflow）</h3><ul>\n<li>应尽量减少更改DOM和CSS的次数，通过更改class来改变样式</li>\n<li>将需要修改DOM脱离文档流<ul>\n<li>隐藏元素，修改，重新显示。</li>\n<li>使用文档片断（document fragment），在当前DOM外构建一个子树，再把它插入文档中。</li>\n<li>把原始元素拷贝到脱离文档的节点中，修改后在把原始元素替换掉。</li>\n</ul>\n</li>\n<li><code>transform</code>和<code>opacity</code>不会触发重绘,应多使用这两个属性，减少<code>position</code>的使用</li>\n<li><a href=\"https://csstriggers.com/\" target=\"_blank\" rel=\"noopener\">https://csstriggers.com/</a> 这里统计了各个css属性是否会触发重绘重排</li>\n</ul>\n<blockquote>\n<p>参考链接：<a href=\"http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html\" target=\"_blank\" rel=\"noopener\">网页性能管理详解</a></p>\n<p>参考链接：<a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">渲染树构建、布局及绘制</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>了解重绘重排前，\b应当先了解浏览器绘制页面的过程</p>\n</blockquote>\n<h2 id=\"渲染过程\"><a href=\"#渲染过程\" class=\"headerlink\" title=\"渲染过程\"></a>渲染过程</h2><blockquote>\n<ul>\n<li>解析HTML文件，生成DOM树</li>\n<li>解析CSS文件，生成CSSOM</li>\n<li>结合DOM和CSSOM，生成渲染树(包含页面所有可见节点及其计算样式)</li>\n<li>根据渲染树生成布局（layout）(将渲染树的所有节点进行平面合成，各个节点在设备视口的确切位置及大小，即获得每个节点的几何信息)</li>\n<li>绘制(将布局（各个节点）绘制在屏幕上)</li>\n</ul>\n</blockquote>\n<div align=\"center\"><br>  <img src=\"/teresa/images/render.png\" alt=\"渲染过程\"><br></div>\n\n<h3 id=\"生成渲染树过程：\"><a href=\"#生成渲染树过程：\" class=\"headerlink\" title=\"生成渲染树过程：\"></a>生成渲染树过程：</h3><blockquote>\n<ul>\n<li>从DOM树的根节点进行遍历每个可见的节点<ul>\n<li>某些节点不可见（例如脚本标记、元标记等），因为它们不会体现在渲染输出中，所以会被忽略。</li>\n<li>某些节点通过 CSS 隐藏，因此在渲染树中也会被忽略，例如，节点上设置了“display: none”属性。</li>\n</ul>\n</li>\n<li>为每个节点找到他适配的CSSOM，并应用</li>\n<li>发射该节点及其内容和计算样式</li>\n</ul>\n</blockquote>\n<h3 id=\"布局（自动重排）\"><a href=\"#布局（自动重排）\" class=\"headerlink\" title=\"布局（自动重排\b）\"></a>布局（自动重排\b）</h3><blockquote>\n<ul>\n<li>浏览器从渲染树的根节点开始进行遍历</li>\n<li>布局流程的输出是一个“盒模型”，它会精确地捕获每个元素在视口内的确切位置和尺寸：所有相对测量值都转换为屏幕上的绝对像素</li>\n</ul>\n</blockquote>\n<h3 id=\"绘制或栅格化\"><a href=\"#绘制或栅格化\" class=\"headerlink\" title=\"绘制或栅格化\"></a>绘制或栅格化</h3><p>我们知道了哪些节点可见、它们的计算样式以及几何信息，我们终于可以将这些信息传递给最后一个阶段：将渲染树中的每个节点转换成屏幕上的实际像素，这一步就是绘制。</p>\n<p>执行渲染树构建、布局和绘制所需的时间将取决于文档大小、应用的样式，以及运行文档的设备：文档越大，浏览器需要完成的工作就越多；样式越复杂，绘制需要的时间就越长（例如，单色的绘制开销“较小”，而阴影的计算和渲染开销则要“大得多”）。</p>\n<h2 id=\"重绘重排\"><a href=\"#重绘重排\" class=\"headerlink\" title=\"重绘重排\"></a>重绘重排</h2><p>当改变DOM和CSS时将会引起重绘重排；</p>\n<ul>\n<li>当影响了页面的布局，元素的几何属性的时候会引起重排（比如字体大小改变，元素位置的改变）</li>\n<li>除了上面以外的（比如颜色的变话）会引起重绘</li>\n</ul>\n<p>重排一定会重绘，而重绘不一定会重排</p>\n<h3 id=\"减少重绘（repaint）重排（reflow）\"><a href=\"#减少重绘（repaint）重排（reflow）\" class=\"headerlink\" title=\"减少重绘（repaint）重排（reflow）\"></a>减少重绘（repaint）重排（reflow）</h3><ul>\n<li>应尽量减少更改DOM和CSS的次数，通过更改class来改变样式</li>\n<li>将需要修改DOM脱离文档流<ul>\n<li>隐藏元素，修改，重新显示。</li>\n<li>使用文档片断（document fragment），在当前DOM外构建一个子树，再把它插入文档中。</li>\n<li>把原始元素拷贝到脱离文档的节点中，修改后在把原始元素替换掉。</li>\n</ul>\n</li>\n<li><code>transform</code>和<code>opacity</code>不会触发重绘,应多使用这两个属性，减少<code>position</code>的使用</li>\n<li><a href=\"https://csstriggers.com/\" target=\"_blank\" rel=\"noopener\">https://csstriggers.com/</a> 这里统计了各个css属性是否会触发重绘重排</li>\n</ul>\n<blockquote>\n<p>参考链接：<a href=\"http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html\" target=\"_blank\" rel=\"noopener\">网页性能管理详解</a></p>\n<p>参考链接：<a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">渲染树构建、布局及绘制</a></p>\n</blockquote>\n"},{"title":"数组方法","date":"2018-10-22T07:34:39.000Z","description":"记录数组的所有方法","keywords":"数组方法","_content":"## 1、堆栈进出\n\n```\n\n ===> unshift() |                               |    ===> pop()\n                |          [1,2,3,4]            |    \n <=== shift()   |                               |    <=== push()\n                |                               |\n  // 方法均改变原数组，若有弹出则返回弹出的值  \n                    若是添加则返回添加后的数组长度   \n```\n\n## 2、join(\"分隔符\") 将数组转换为字符串（不影响原数组的值）\n\n```js\nvar arry = [1,2,3,4];\narry.join() // ===> \"1,2,3,4\"   // 默认分隔符为 ','\n```\n\n## 3、reserve() 将数组元素逆向排序（ 影响原来的数组 ）\n\n```js\narry.reverse();\narry              //  ===>均返回 [4,3,2,1]\n```\n\n## 4、sort() 将数组升序排序 （ 影响原来的数组 默认字母表顺序排序 ）\n\n```js\narry.sort();\n//  ===> 均返回[1,2,3,4]\narry.sort(function( a, b ){\n return a - b\n})\n```\n\n## 5、concat() 拼接数组（ 返回新数组，不用影响原来数组 ）\n\n```js\n[1,2].concat(3,4)        // ===> [1,2,3,4]\n[1,2].concat([3,4])      // ===> [1,2,3,4]\n[1,2].concat([3,[4,5]],6)  // ===> [1,2,3,[4,5],6]\n```\n\n## 6、slice(startIndex， endIndex)  返回截取数组的片段 （不用影响原来数组）\n\n```js\n// 返回数组 [startIndex,endIndex)\narry.slice(0,1)  // ===> [1]\narry             // ===> [1, 2, 3, 4]\n```\n\n## 7、splice(开始删除元素的索引（删除包含该值），删除个数，此处开始是要插入的元素)（影响原来的数组）\n\n```js\n// 插入或删除数组元素 （影响原来的数组 并返回删除的元素数组）\n\narry = [1,2,3,4];\narry.splice(2,2)       // ===> [3, 4]\narry                   // ===> [1, 2]\narry.splice(2,0,3,4,5) // ===> []\narry                   // ===> [1, 2, 3, 4, 5]\n```\n\n## 8、 toString()  将数组转换为字符串\n\n```js\nvar ary2 = [1,2,[3,4]];\nary2.toString() //  ===> \"1,2,3,4\"   等效于 join()\n```\n\n##  9、forEach( ) 遍历循环 传参为函数\n\n```js\nforEach(function( 数组元素，元素索引，当前数组 ){\n  // 函数主体\n})\nvar data = [1,2,3];\ndata.forEach(function( v, i, a){\n  a[i] = v + 1;\n})\n// data  ===> [2,3,4]\n```\n\n## 10、map()  循环遍历 传参为函数\n\n```js\n// map必须有一个返回值 所有的返回值组成一个新数组\nmap(function(数组元素，元素引号，当前数组){\n  return xxxx;\n})\nvar data = [1,2,3];\nvar mapData = data.map(function( v, i, a){\n  a[i] = v + 10;\nreturn i*i\n})\n// data       ===> [11, 12, 13]\n// mapData    ===> [0, 1, 4]\n```\n\n## 11、 filter() 过滤函数 传参为一个判断函数，若为true则返回\n\n```js\nvar a = [1,2,3,4,5];\nvar b = a.filter(function(x){\n  return x > 3;\n})\n//    b ===> [4,5]\n//    a ===> [1,2,3,4,5]\n```\n\n## 12、every() 和 some() 传参为函数  逻辑判断方法 返回true或false\n\n```js\n// every : 当所有元素满足 传参函数 返回值为true时 every返回true\n// some : 当存在一个返回值为true时，即返回true\nvar a = [1,2,3,4,5];\nvar b = a.every(function(x){\n  return x > 3;\n})\nvar c = a.some(function(x){\n  return x > 3;\n})\n// b ===> false\n// c ===> true\n```\n\n## 13 、 reduce() 和 reduceRight()  数组元素组合 生成单值 【例 6-2】\n\n```js\n// reduce() 传参为函数，[起始值]\n// reduceRight() 数组执行函数 从右至左\n// 例子中 x为 函数上次的反参\nvar a = [1,2,3,4];\nvar sum = a.reduce(function(x, y){\n  return x + y;\n})\n//===> 10\nvar a = [1,2,3,4];\nvar sum = a.reduce(function(x, y){\n  return x + y;\n}, 10)\n// ===> 20\n```\n\n## 14、 indexOf() 和 lastIndexOf() 检索数组是否包含指定值 \n\n```js\n// 传参为 数组是否包含的值，[ 开始检索的数组索引 默认从头开始 ]\n// lastIndexOf() 为反向检索\n// 若存在 返回索引值；否则返回 -1\nvar a = [3,5,7];\na.indexOf(5);   //  ===> 1\na.indexOf(6);   //  ===> -1\n```","source":"_posts/数组方法.md","raw":"---\ntitle: 数组方法\ndate: 2018-10-22 15:34:39\ntags: JavaScript\ndescription: 记录数组的所有方法\ncategories: JavaScript\nkeywords: 数组方法\n---\n## 1、堆栈进出\n\n```\n\n ===> unshift() |                               |    ===> pop()\n                |          [1,2,3,4]            |    \n <=== shift()   |                               |    <=== push()\n                |                               |\n  // 方法均改变原数组，若有弹出则返回弹出的值  \n                    若是添加则返回添加后的数组长度   \n```\n\n## 2、join(\"分隔符\") 将数组转换为字符串（不影响原数组的值）\n\n```js\nvar arry = [1,2,3,4];\narry.join() // ===> \"1,2,3,4\"   // 默认分隔符为 ','\n```\n\n## 3、reserve() 将数组元素逆向排序（ 影响原来的数组 ）\n\n```js\narry.reverse();\narry              //  ===>均返回 [4,3,2,1]\n```\n\n## 4、sort() 将数组升序排序 （ 影响原来的数组 默认字母表顺序排序 ）\n\n```js\narry.sort();\n//  ===> 均返回[1,2,3,4]\narry.sort(function( a, b ){\n return a - b\n})\n```\n\n## 5、concat() 拼接数组（ 返回新数组，不用影响原来数组 ）\n\n```js\n[1,2].concat(3,4)        // ===> [1,2,3,4]\n[1,2].concat([3,4])      // ===> [1,2,3,4]\n[1,2].concat([3,[4,5]],6)  // ===> [1,2,3,[4,5],6]\n```\n\n## 6、slice(startIndex， endIndex)  返回截取数组的片段 （不用影响原来数组）\n\n```js\n// 返回数组 [startIndex,endIndex)\narry.slice(0,1)  // ===> [1]\narry             // ===> [1, 2, 3, 4]\n```\n\n## 7、splice(开始删除元素的索引（删除包含该值），删除个数，此处开始是要插入的元素)（影响原来的数组）\n\n```js\n// 插入或删除数组元素 （影响原来的数组 并返回删除的元素数组）\n\narry = [1,2,3,4];\narry.splice(2,2)       // ===> [3, 4]\narry                   // ===> [1, 2]\narry.splice(2,0,3,4,5) // ===> []\narry                   // ===> [1, 2, 3, 4, 5]\n```\n\n## 8、 toString()  将数组转换为字符串\n\n```js\nvar ary2 = [1,2,[3,4]];\nary2.toString() //  ===> \"1,2,3,4\"   等效于 join()\n```\n\n##  9、forEach( ) 遍历循环 传参为函数\n\n```js\nforEach(function( 数组元素，元素索引，当前数组 ){\n  // 函数主体\n})\nvar data = [1,2,3];\ndata.forEach(function( v, i, a){\n  a[i] = v + 1;\n})\n// data  ===> [2,3,4]\n```\n\n## 10、map()  循环遍历 传参为函数\n\n```js\n// map必须有一个返回值 所有的返回值组成一个新数组\nmap(function(数组元素，元素引号，当前数组){\n  return xxxx;\n})\nvar data = [1,2,3];\nvar mapData = data.map(function( v, i, a){\n  a[i] = v + 10;\nreturn i*i\n})\n// data       ===> [11, 12, 13]\n// mapData    ===> [0, 1, 4]\n```\n\n## 11、 filter() 过滤函数 传参为一个判断函数，若为true则返回\n\n```js\nvar a = [1,2,3,4,5];\nvar b = a.filter(function(x){\n  return x > 3;\n})\n//    b ===> [4,5]\n//    a ===> [1,2,3,4,5]\n```\n\n## 12、every() 和 some() 传参为函数  逻辑判断方法 返回true或false\n\n```js\n// every : 当所有元素满足 传参函数 返回值为true时 every返回true\n// some : 当存在一个返回值为true时，即返回true\nvar a = [1,2,3,4,5];\nvar b = a.every(function(x){\n  return x > 3;\n})\nvar c = a.some(function(x){\n  return x > 3;\n})\n// b ===> false\n// c ===> true\n```\n\n## 13 、 reduce() 和 reduceRight()  数组元素组合 生成单值 【例 6-2】\n\n```js\n// reduce() 传参为函数，[起始值]\n// reduceRight() 数组执行函数 从右至左\n// 例子中 x为 函数上次的反参\nvar a = [1,2,3,4];\nvar sum = a.reduce(function(x, y){\n  return x + y;\n})\n//===> 10\nvar a = [1,2,3,4];\nvar sum = a.reduce(function(x, y){\n  return x + y;\n}, 10)\n// ===> 20\n```\n\n## 14、 indexOf() 和 lastIndexOf() 检索数组是否包含指定值 \n\n```js\n// 传参为 数组是否包含的值，[ 开始检索的数组索引 默认从头开始 ]\n// lastIndexOf() 为反向检索\n// 若存在 返回索引值；否则返回 -1\nvar a = [3,5,7];\na.indexOf(5);   //  ===> 1\na.indexOf(6);   //  ===> -1\n```","slug":"数组方法","published":1,"updated":"2018-10-22T11:21:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7kpl0330027jcs68hcnaqnu","content":"<h2 id=\"1、堆栈进出\"><a href=\"#1、堆栈进出\" class=\"headerlink\" title=\"1、堆栈进出\"></a>1、堆栈进出</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> ===&gt; unshift() |                               |    ===&gt; pop()</span><br><span class=\"line\">                |          [1,2,3,4]            |    </span><br><span class=\"line\"> &lt;=== shift()   |                               |    &lt;=== push()</span><br><span class=\"line\">                |                               |</span><br><span class=\"line\">  // 方法均改变原数组，若有弹出则返回弹出的值  </span><br><span class=\"line\">                    若是添加则返回添加后的数组长度</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、join-“分隔符”-将数组转换为字符串（不影响原数组的值）\"><a href=\"#2、join-“分隔符”-将数组转换为字符串（不影响原数组的值）\" class=\"headerlink\" title=\"2、join(“分隔符”) 将数组转换为字符串（不影响原数组的值）\"></a>2、join(“分隔符”) 将数组转换为字符串（不影响原数组的值）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\">arry.join() <span class=\"comment\">// ===&gt; \"1,2,3,4\"   // 默认分隔符为 ','</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3、reserve-将数组元素逆向排序（-影响原来的数组-）\"><a href=\"#3、reserve-将数组元素逆向排序（-影响原来的数组-）\" class=\"headerlink\" title=\"3、reserve() 将数组元素逆向排序（ 影响原来的数组 ）\"></a>3、reserve() 将数组元素逆向排序（ 影响原来的数组 ）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arry.reverse();</span><br><span class=\"line\">arry              <span class=\"comment\">//  ===&gt;均返回 [4,3,2,1]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4、sort-将数组升序排序-（-影响原来的数组-默认字母表顺序排序-）\"><a href=\"#4、sort-将数组升序排序-（-影响原来的数组-默认字母表顺序排序-）\" class=\"headerlink\" title=\"4、sort() 将数组升序排序 （ 影响原来的数组 默认字母表顺序排序 ）\"></a>4、sort() 将数组升序排序 （ 影响原来的数组 默认字母表顺序排序 ）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arry.sort();</span><br><span class=\"line\"><span class=\"comment\">//  ===&gt; 均返回[1,2,3,4]</span></span><br><span class=\"line\">arry.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> a, b </span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> a - b</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"5、concat-拼接数组（-返回新数组，不用影响原来数组-）\"><a href=\"#5、concat-拼接数组（-返回新数组，不用影响原来数组-）\" class=\"headerlink\" title=\"5、concat() 拼接数组（ 返回新数组，不用影响原来数组 ）\"></a>5、concat() 拼接数组（ 返回新数组，不用影响原来数组 ）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>].concat(<span class=\"number\">3</span>,<span class=\"number\">4</span>)        <span class=\"comment\">// ===&gt; [1,2,3,4]</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>].concat([<span class=\"number\">3</span>,<span class=\"number\">4</span>])      <span class=\"comment\">// ===&gt; [1,2,3,4]</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>].concat([<span class=\"number\">3</span>,[<span class=\"number\">4</span>,<span class=\"number\">5</span>]],<span class=\"number\">6</span>)  <span class=\"comment\">// ===&gt; [1,2,3,[4,5],6]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"6、slice-startIndex，-endIndex-返回截取数组的片段-（不用影响原来数组）\"><a href=\"#6、slice-startIndex，-endIndex-返回截取数组的片段-（不用影响原来数组）\" class=\"headerlink\" title=\"6、slice(startIndex， endIndex)  返回截取数组的片段 （不用影响原来数组）\"></a>6、slice(startIndex， endIndex)  返回截取数组的片段 （不用影响原来数组）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回数组 [startIndex,endIndex)</span></span><br><span class=\"line\">arry.slice(<span class=\"number\">0</span>,<span class=\"number\">1</span>)  <span class=\"comment\">// ===&gt; [1]</span></span><br><span class=\"line\">arry             <span class=\"comment\">// ===&gt; [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"7、splice-开始删除元素的索引（删除包含该值），删除个数，此处开始是要插入的元素-（影响原来的数组）\"><a href=\"#7、splice-开始删除元素的索引（删除包含该值），删除个数，此处开始是要插入的元素-（影响原来的数组）\" class=\"headerlink\" title=\"7、splice(开始删除元素的索引（删除包含该值），删除个数，此处开始是要插入的元素)（影响原来的数组）\"></a>7、splice(开始删除元素的索引（删除包含该值），删除个数，此处开始是要插入的元素)（影响原来的数组）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 插入或删除数组元素 （影响原来的数组 并返回删除的元素数组）</span></span><br><span class=\"line\"></span><br><span class=\"line\">arry = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\">arry.splice(<span class=\"number\">2</span>,<span class=\"number\">2</span>)       <span class=\"comment\">// ===&gt; [3, 4]</span></span><br><span class=\"line\">arry                   <span class=\"comment\">// ===&gt; [1, 2]</span></span><br><span class=\"line\">arry.splice(<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>) <span class=\"comment\">// ===&gt; []</span></span><br><span class=\"line\">arry                   <span class=\"comment\">// ===&gt; [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"8、-toString-将数组转换为字符串\"><a href=\"#8、-toString-将数组转换为字符串\" class=\"headerlink\" title=\"8、 toString()  将数组转换为字符串\"></a>8、 toString()  将数组转换为字符串</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ary2 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,[<span class=\"number\">3</span>,<span class=\"number\">4</span>]];</span><br><span class=\"line\">ary2.toString() <span class=\"comment\">//  ===&gt; \"1,2,3,4\"   等效于 join()</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"9、forEach-遍历循环-传参为函数\"><a href=\"#9、forEach-遍历循环-传参为函数\" class=\"headerlink\" title=\"9、forEach( ) 遍历循环 传参为函数\"></a>9、forEach( ) 遍历循环 传参为函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> 数组元素，元素索引，当前数组 </span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 函数主体</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">data.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> v, i, a</span>)</span>&#123;</span><br><span class=\"line\">  a[i] = v + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// data  ===&gt; [2,3,4]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"10、map-循环遍历-传参为函数\"><a href=\"#10、map-循环遍历-传参为函数\" class=\"headerlink\" title=\"10、map()  循环遍历 传参为函数\"></a>10、map()  循环遍历 传参为函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// map必须有一个返回值 所有的返回值组成一个新数组</span></span><br><span class=\"line\">map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">数组元素，元素引号，当前数组</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> xxxx;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> mapData = data.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> v, i, a</span>)</span>&#123;</span><br><span class=\"line\">  a[i] = v + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">return</span> i*i</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// data       ===&gt; [11, 12, 13]</span></span><br><span class=\"line\"><span class=\"comment\">// mapData    ===&gt; [0, 1, 4]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"11、-filter-过滤函数-传参为一个判断函数，若为true则返回\"><a href=\"#11、-filter-过滤函数-传参为一个判断函数，若为true则返回\" class=\"headerlink\" title=\"11、 filter() 过滤函数 传参为一个判断函数，若为true则返回\"></a>11、 filter() 过滤函数 传参为一个判断函数，若为true则返回</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &gt; <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//    b ===&gt; [4,5]</span></span><br><span class=\"line\"><span class=\"comment\">//    a ===&gt; [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"12、every-和-some-传参为函数-逻辑判断方法-返回true或false\"><a href=\"#12、every-和-some-传参为函数-逻辑判断方法-返回true或false\" class=\"headerlink\" title=\"12、every() 和 some() 传参为函数  逻辑判断方法 返回true或false\"></a>12、every() 和 some() 传参为函数  逻辑判断方法 返回true或false</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// every : 当所有元素满足 传参函数 返回值为true时 every返回true</span></span><br><span class=\"line\"><span class=\"comment\">// some : 当存在一个返回值为true时，即返回true</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &gt; <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = a.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &gt; <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// b ===&gt; false</span></span><br><span class=\"line\"><span class=\"comment\">// c ===&gt; true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"13-、-reduce-和-reduceRight-数组元素组合-生成单值-【例-6-2】\"><a href=\"#13-、-reduce-和-reduceRight-数组元素组合-生成单值-【例-6-2】\" class=\"headerlink\" title=\"13 、 reduce() 和 reduceRight()  数组元素组合 生成单值 【例 6-2】\"></a>13 、 reduce() 和 reduceRight()  数组元素组合 生成单值 【例 6-2】</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// reduce() 传参为函数，[起始值]</span></span><br><span class=\"line\"><span class=\"comment\">// reduceRight() 数组执行函数 从右至左</span></span><br><span class=\"line\"><span class=\"comment\">// 例子中 x为 函数上次的反参</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = a.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//===&gt; 10</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = a.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">// ===&gt; 20</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"14、-indexOf-和-lastIndexOf-检索数组是否包含指定值\"><a href=\"#14、-indexOf-和-lastIndexOf-检索数组是否包含指定值\" class=\"headerlink\" title=\"14、 indexOf() 和 lastIndexOf() 检索数组是否包含指定值\"></a>14、 indexOf() 和 lastIndexOf() 检索数组是否包含指定值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传参为 数组是否包含的值，[ 开始检索的数组索引 默认从头开始 ]</span></span><br><span class=\"line\"><span class=\"comment\">// lastIndexOf() 为反向检索</span></span><br><span class=\"line\"><span class=\"comment\">// 若存在 返回索引值；否则返回 -1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>];</span><br><span class=\"line\">a.indexOf(<span class=\"number\">5</span>);   <span class=\"comment\">//  ===&gt; 1</span></span><br><span class=\"line\">a.indexOf(<span class=\"number\">6</span>);   <span class=\"comment\">//  ===&gt; -1</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1、堆栈进出\"><a href=\"#1、堆栈进出\" class=\"headerlink\" title=\"1、堆栈进出\"></a>1、堆栈进出</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> ===&gt; unshift() |                               |    ===&gt; pop()</span><br><span class=\"line\">                |          [1,2,3,4]            |    </span><br><span class=\"line\"> &lt;=== shift()   |                               |    &lt;=== push()</span><br><span class=\"line\">                |                               |</span><br><span class=\"line\">  // 方法均改变原数组，若有弹出则返回弹出的值  </span><br><span class=\"line\">                    若是添加则返回添加后的数组长度</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、join-“分隔符”-将数组转换为字符串（不影响原数组的值）\"><a href=\"#2、join-“分隔符”-将数组转换为字符串（不影响原数组的值）\" class=\"headerlink\" title=\"2、join(“分隔符”) 将数组转换为字符串（不影响原数组的值）\"></a>2、join(“分隔符”) 将数组转换为字符串（不影响原数组的值）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\">arry.join() <span class=\"comment\">// ===&gt; \"1,2,3,4\"   // 默认分隔符为 ','</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3、reserve-将数组元素逆向排序（-影响原来的数组-）\"><a href=\"#3、reserve-将数组元素逆向排序（-影响原来的数组-）\" class=\"headerlink\" title=\"3、reserve() 将数组元素逆向排序（ 影响原来的数组 ）\"></a>3、reserve() 将数组元素逆向排序（ 影响原来的数组 ）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arry.reverse();</span><br><span class=\"line\">arry              <span class=\"comment\">//  ===&gt;均返回 [4,3,2,1]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4、sort-将数组升序排序-（-影响原来的数组-默认字母表顺序排序-）\"><a href=\"#4、sort-将数组升序排序-（-影响原来的数组-默认字母表顺序排序-）\" class=\"headerlink\" title=\"4、sort() 将数组升序排序 （ 影响原来的数组 默认字母表顺序排序 ）\"></a>4、sort() 将数组升序排序 （ 影响原来的数组 默认字母表顺序排序 ）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arry.sort();</span><br><span class=\"line\"><span class=\"comment\">//  ===&gt; 均返回[1,2,3,4]</span></span><br><span class=\"line\">arry.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> a, b </span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> a - b</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"5、concat-拼接数组（-返回新数组，不用影响原来数组-）\"><a href=\"#5、concat-拼接数组（-返回新数组，不用影响原来数组-）\" class=\"headerlink\" title=\"5、concat() 拼接数组（ 返回新数组，不用影响原来数组 ）\"></a>5、concat() 拼接数组（ 返回新数组，不用影响原来数组 ）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>].concat(<span class=\"number\">3</span>,<span class=\"number\">4</span>)        <span class=\"comment\">// ===&gt; [1,2,3,4]</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>].concat([<span class=\"number\">3</span>,<span class=\"number\">4</span>])      <span class=\"comment\">// ===&gt; [1,2,3,4]</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>].concat([<span class=\"number\">3</span>,[<span class=\"number\">4</span>,<span class=\"number\">5</span>]],<span class=\"number\">6</span>)  <span class=\"comment\">// ===&gt; [1,2,3,[4,5],6]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"6、slice-startIndex，-endIndex-返回截取数组的片段-（不用影响原来数组）\"><a href=\"#6、slice-startIndex，-endIndex-返回截取数组的片段-（不用影响原来数组）\" class=\"headerlink\" title=\"6、slice(startIndex， endIndex)  返回截取数组的片段 （不用影响原来数组）\"></a>6、slice(startIndex， endIndex)  返回截取数组的片段 （不用影响原来数组）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回数组 [startIndex,endIndex)</span></span><br><span class=\"line\">arry.slice(<span class=\"number\">0</span>,<span class=\"number\">1</span>)  <span class=\"comment\">// ===&gt; [1]</span></span><br><span class=\"line\">arry             <span class=\"comment\">// ===&gt; [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"7、splice-开始删除元素的索引（删除包含该值），删除个数，此处开始是要插入的元素-（影响原来的数组）\"><a href=\"#7、splice-开始删除元素的索引（删除包含该值），删除个数，此处开始是要插入的元素-（影响原来的数组）\" class=\"headerlink\" title=\"7、splice(开始删除元素的索引（删除包含该值），删除个数，此处开始是要插入的元素)（影响原来的数组）\"></a>7、splice(开始删除元素的索引（删除包含该值），删除个数，此处开始是要插入的元素)（影响原来的数组）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 插入或删除数组元素 （影响原来的数组 并返回删除的元素数组）</span></span><br><span class=\"line\"></span><br><span class=\"line\">arry = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\">arry.splice(<span class=\"number\">2</span>,<span class=\"number\">2</span>)       <span class=\"comment\">// ===&gt; [3, 4]</span></span><br><span class=\"line\">arry                   <span class=\"comment\">// ===&gt; [1, 2]</span></span><br><span class=\"line\">arry.splice(<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>) <span class=\"comment\">// ===&gt; []</span></span><br><span class=\"line\">arry                   <span class=\"comment\">// ===&gt; [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"8、-toString-将数组转换为字符串\"><a href=\"#8、-toString-将数组转换为字符串\" class=\"headerlink\" title=\"8、 toString()  将数组转换为字符串\"></a>8、 toString()  将数组转换为字符串</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ary2 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,[<span class=\"number\">3</span>,<span class=\"number\">4</span>]];</span><br><span class=\"line\">ary2.toString() <span class=\"comment\">//  ===&gt; \"1,2,3,4\"   等效于 join()</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"9、forEach-遍历循环-传参为函数\"><a href=\"#9、forEach-遍历循环-传参为函数\" class=\"headerlink\" title=\"9、forEach( ) 遍历循环 传参为函数\"></a>9、forEach( ) 遍历循环 传参为函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> 数组元素，元素索引，当前数组 </span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 函数主体</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">data.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> v, i, a</span>)</span>&#123;</span><br><span class=\"line\">  a[i] = v + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// data  ===&gt; [2,3,4]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"10、map-循环遍历-传参为函数\"><a href=\"#10、map-循环遍历-传参为函数\" class=\"headerlink\" title=\"10、map()  循环遍历 传参为函数\"></a>10、map()  循环遍历 传参为函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// map必须有一个返回值 所有的返回值组成一个新数组</span></span><br><span class=\"line\">map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">数组元素，元素引号，当前数组</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> xxxx;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> mapData = data.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> v, i, a</span>)</span>&#123;</span><br><span class=\"line\">  a[i] = v + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">return</span> i*i</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// data       ===&gt; [11, 12, 13]</span></span><br><span class=\"line\"><span class=\"comment\">// mapData    ===&gt; [0, 1, 4]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"11、-filter-过滤函数-传参为一个判断函数，若为true则返回\"><a href=\"#11、-filter-过滤函数-传参为一个判断函数，若为true则返回\" class=\"headerlink\" title=\"11、 filter() 过滤函数 传参为一个判断函数，若为true则返回\"></a>11、 filter() 过滤函数 传参为一个判断函数，若为true则返回</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &gt; <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//    b ===&gt; [4,5]</span></span><br><span class=\"line\"><span class=\"comment\">//    a ===&gt; [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"12、every-和-some-传参为函数-逻辑判断方法-返回true或false\"><a href=\"#12、every-和-some-传参为函数-逻辑判断方法-返回true或false\" class=\"headerlink\" title=\"12、every() 和 some() 传参为函数  逻辑判断方法 返回true或false\"></a>12、every() 和 some() 传参为函数  逻辑判断方法 返回true或false</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// every : 当所有元素满足 传参函数 返回值为true时 every返回true</span></span><br><span class=\"line\"><span class=\"comment\">// some : 当存在一个返回值为true时，即返回true</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &gt; <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = a.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &gt; <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// b ===&gt; false</span></span><br><span class=\"line\"><span class=\"comment\">// c ===&gt; true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"13-、-reduce-和-reduceRight-数组元素组合-生成单值-【例-6-2】\"><a href=\"#13-、-reduce-和-reduceRight-数组元素组合-生成单值-【例-6-2】\" class=\"headerlink\" title=\"13 、 reduce() 和 reduceRight()  数组元素组合 生成单值 【例 6-2】\"></a>13 、 reduce() 和 reduceRight()  数组元素组合 生成单值 【例 6-2】</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// reduce() 传参为函数，[起始值]</span></span><br><span class=\"line\"><span class=\"comment\">// reduceRight() 数组执行函数 从右至左</span></span><br><span class=\"line\"><span class=\"comment\">// 例子中 x为 函数上次的反参</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = a.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//===&gt; 10</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = a.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">// ===&gt; 20</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"14、-indexOf-和-lastIndexOf-检索数组是否包含指定值\"><a href=\"#14、-indexOf-和-lastIndexOf-检索数组是否包含指定值\" class=\"headerlink\" title=\"14、 indexOf() 和 lastIndexOf() 检索数组是否包含指定值\"></a>14、 indexOf() 和 lastIndexOf() 检索数组是否包含指定值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传参为 数组是否包含的值，[ 开始检索的数组索引 默认从头开始 ]</span></span><br><span class=\"line\"><span class=\"comment\">// lastIndexOf() 为反向检索</span></span><br><span class=\"line\"><span class=\"comment\">// 若存在 返回索引值；否则返回 -1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>];</span><br><span class=\"line\">a.indexOf(<span class=\"number\">5</span>);   <span class=\"comment\">//  ===&gt; 1</span></span><br><span class=\"line\">a.indexOf(<span class=\"number\">6</span>);   <span class=\"comment\">//  ===&gt; -1</span></span><br></pre></td></tr></table></figure>"},{"title":"HTTP协议","date":"2018-09-11T05:47:24.000Z","description":"读图解HTTP笔记","keywords":"读图解HTTP笔记","_content":"## web及网络基础\n### 网路基础 `TCP/IP`\n> 通常使用的网络是在 `TCP/IP` 协议族的基础上运作的。而 `HTTP` 属于他内部的一个子集\n\n#### `TCP/IP` 协议族\n> `TCP/IP` 是互联网相关的各类协议族的总称\n\n#### `TCP/IP` 的分层管理\n`TCP/IP` 协议族按层次分以下4层：\n- 应用层\n  - 应用层·应用层决定论向用户提供应用服务时通信的活动。\n  - HTTP协议也处于该层\n- 传输层\n  - 提供处于网络连接中的两台计算机之间的数据传输\n  - 传输层有两个性质不同的协议 `TCP` 和 \b`UDP`（用户数据报协议）\n- 网络层\n  - 用来处理在网络上流动的数据包。（数据包是网络传输的最小数据单位）\n  - 该层规定了通过怎样的路径（所谓的传输路线）到达对方计算机，并把数据包传送给对方\n- 数据链路层\n  - 用来处理网络链接的硬件部分（物理可见部分）\n  - 硬件上的范畴均在链路层的作用范围之内\n\n#### `TCP/IP` 通信传输流\n利用 `TCP/IP` 协议族进行网络通信时，会通过分层顺序与对方进行通信。发送端从应用层往下走，接收端从链路层网上走。\n\n发送端在层与层之间传输数据时，没经过一层时必定会被打上一个该层所属的首部信息\n\n反之，接收端在层与层传输数据时，每经过一层会把对应的首部消去\n\n### `TCP` 、`IP`、`DNS`\n#### 负责传输的 `IP` 协议\n\n- IP网络协议位于网络层。作用是把各种数据包传递给对方(IP 与 IP地址 不是一回事)\n- 若要保证确实传递给地方需要\b满足各类条件，其中两个重要的条件是 `IP地址` 和 `MAC地址`\n  - IP地址 指明了节点被分配到的地址；IP地址 可变换；IP间的通信依赖MAC地址\n  - MAC地址 是指网卡所属的固定地址；MAC地址 基本不会变换\n  - ARP协议（address resolution protocol）是一种用以解析地址的协议，根据通信方的IP地址 就可以反查出对应 MAC地址；ARP协议凭借MAC地址进行通信\n\n#### 确保可靠性的 `TCP协议`\n\n- 按层次分，TCP位于传输层，提供可靠的字节流服务\n  - 字节流服务：为了方便传输，将大块数据分割成以报文段为单位的数据包进行管理\n  - 可靠的传输服务：能够把数据准确可靠的传给对方\n- 为了准确无误将数据送至目标，\bTCP协议 采用了`三次握手策略`\n- 握手过程使用了 TCP的标志 SYN（synchronize同步） 和 ACK（acknowledgement确认）\n  - 发送端先发送一个带有 SYN 标志的数据包给接收端\n  - 接收端收到后，回传一个带有 SYN/ACK 标志灯数据包以示传达确认信息\n  - 发送端再回传一个带有 ACK 标志的数据包代表握手结束\n\n### 负责域名解析的 DNS 服务\n- DNS（domain name system）服务和HTTP协议一样位于应用层的协议；他提供域名到IP地址之间的解析服务\n\n### 各种协议已HTTP协议的关系\n![http](/teresa/images/HTTP.jpg)\n\n### URI 和 URL\n- URI 统一资源标识符；用字符串标识某一互联网资源\n- URL 表示资源的地点；是URI的子集\n\n## 简单的HTTP协议\n### 请求和响应\n- 请求报文（报文首部+报文主体）\n  - 请求方法\n  - 请求URI\n  - 协议版本\n  - 可选的请求首部字段（请求首部字段、通用首部字段、实体首部字段）\n  - 内容实体\n\n- 响应报文\n  - 协议版本\n  - 状态码\n  - 解释状态码的短语\n  - 可选的响应首部字段\n  - 实体主体\n\n### HTTP是不保存状态的协议\n\n> HTTP协议是一种不保存状态，即无状态协议。HTTP协议自身不对请求和响应之间的通信状态进行保存。也就是说，在HTTP这个级别，协议对已发送过的请求或响应都不做持久化处理。\n>\n> 也是说，无法根据之前的状态进行本次的请求处理\n\n### 告知服务器意图的 HTTP 方法\n- GET 获取资源\n- POST 传输实体主体\n- PUT 传输文件\n- HEAD 获得报文首部\n- DELETE 删除文件（和 PUT 一样不带验证机制，所以一般的web网站不使用 delete 方法）\n- OPTIONS 徐文支持的方法（查询URI指定资源支持的方法）\n- CONNECT 要求用隧道协议链接代理\n- TRACE 追踪路径\n\n### 持久链接节省通信量\n> HTTP 协议的初始版本汇总，每进行一次HTTP通信就要断开一次 TCP 链接。对于早时候的小容量文本传输这没有多大问题，但现在比如包含大量图片的网站，每次请求都会造成无谓的TCP链接建立和断开，增加通信量的开销。\n\n为解决上述问题，HTTP/1.1 和 部分 HTTP/1.0 提出持久链接的 方法。\n\n持久连接的特点是，只要任意一端没有明确提出断开连接，则保持 TCP 链接状态。旨在建立 1 次TCP链接后进行多次请求和响应的交互；\n\n在 HTTP/1.1 中，所有的链接默认都是持久链接\n> 管线化：持久连接使得多数请求以管线化方式发送成为可能。管线化技术出现，不用等待响应亦可直接发送下一个请求，实现并行发送多个请求\n\n### 使用cookie的状态管理\n## HTTP报文内的HTTP信息\n### HTTP报文\n> 用于HTTP协议交互的信息为 HTTP 报文；HTTP报文是有多行数据构成的字符串文本\n\n## 返回结果的 HTTP 状态码\n### 状态码类别\n- 1xx （信息型状态码） 接受的请求正在处理\n- 2xx （成功状态码）请求正常处理完毕\n- 3xx （重定向状态码）需要进行附加操作以完成请求\n- 4xx （客户端状态码）服务器无法处理请求\n- 5xx （服务器错误状态码）服务器处理请求出错\n\n### 2xx 成功\n- 200 OK 请求成功\n- 204 No Content 请求成功没有资源可返回\n- 206 Partial Content\n\n### 3xx 重定向\n- 301 Moved Permanently 永久性重定向\n- 302 Found 临时性重定向\n- 303 See Other 表示请求的对应资源存在着另一个URL，应使用get方法定向获取资源\n- 304 Not Modified 表示客户端发送附带条件的请求时，请求成功，但是不存在满足条件的资源时（改状态码和重定向没有关系）\n- 307 Temporary Redirect 临时重定向，与302相同，但该状态严格按照标准不准post请求变成get\n\n### 4xx 客户端错误\n- 400 Bad Request 表示请求报文中存在语法错误\n- 401 Unauthorized 表示发送的请求需要通过HTTP认证\n- 403 Forbidden 表示对请求资源的访问被服务器拒绝了\n- 404 Not Found 表明服务器无法找到请求资源\n\n### 5xx 服务器错误\n- 500 服务器端在执行请求时发送了错误\n- 503 Server Unavailable 服务器处在超负荷或正在进行停机维护，无法处理请求\n\n## 与 HTTP 协作的web服务器\n### 用单台虚拟主机实现多个域名\n即使物理层面只有一台服务器，但只要使用虚拟主机的功能。则可以奖项已具有多台服务器\n\n### 通信数据转发程序：代理、网关、隧道\n这些应用程序和服务器可以将请求转发给通信线路上的下一站服务器，并且能接受从那台服务器发送的响应再转给客户端\n#### 代理 \n代理服务器的基本行为就是接收客户端发送的请求后转发给其它服务器。代理不改变URI，会直接发送给出游资源的目标服务器。\n\n在HTTP通信过程中。可级联多台代理服务器。转发时，需要附加Via首部字段以标记出经过的主机信息\n#### 网关\n利用网关，可以有HTTP请求转化为其它协议通信\n#### 隧道\n隧道可按要求建立起一条与其它服务器的通信线路，解释使用SSL等加密手段进行通信。隧道的目的是确保客户端能与服务器进行安全的通信。\n## HTTP首部\n### HTTP首部字段\n> 使用首部字段是为了给浏览器和服务器提供报文主体大小，所使用语言、认证信息等内容。\n\n## 确保web安全的HTTPS\n### HTTP的缺点\n- 通信使用明文（不加密），内容可能被窃听\n- 不验证通信方的身份，有可能遭遇伪装\n- 无法验证报文的完整性，所以有可能已遭篡改\n\n### HTTP + 加密 + 认证 + \b完整性保护 = HTTPS\n#### 公开密钥加密技术\n- 共享密钥加密\n  - 加密和解密通用一个密钥的方式成为共享密钥加密（对称秘钥加密）\n  - 以共享密钥的方式加密时必须将密钥也发给对方，期间也存在监听问题\n\n- 使用两把密钥的公开密钥加密\n  - 公开密钥加密使用一堆非对称的密钥；一个私有密钥，另一个叫公开密钥\n  - 公开密钥加密与共享密钥加密相比，其处理速度要慢些\n\n","source":"_posts/HTTP协议.md","raw":"---\ntitle: HTTP协议\ndate: 2018-09-11 13:47:24\ntags: HTTP\ndescription: 读图解HTTP笔记\ncategories: HTTP\nkeywords: 读图解HTTP笔记\n---\n## web及网络基础\n### 网路基础 `TCP/IP`\n> 通常使用的网络是在 `TCP/IP` 协议族的基础上运作的。而 `HTTP` 属于他内部的一个子集\n\n#### `TCP/IP` 协议族\n> `TCP/IP` 是互联网相关的各类协议族的总称\n\n#### `TCP/IP` 的分层管理\n`TCP/IP` 协议族按层次分以下4层：\n- 应用层\n  - 应用层·应用层决定论向用户提供应用服务时通信的活动。\n  - HTTP协议也处于该层\n- 传输层\n  - 提供处于网络连接中的两台计算机之间的数据传输\n  - 传输层有两个性质不同的协议 `TCP` 和 \b`UDP`（用户数据报协议）\n- 网络层\n  - 用来处理在网络上流动的数据包。（数据包是网络传输的最小数据单位）\n  - 该层规定了通过怎样的路径（所谓的传输路线）到达对方计算机，并把数据包传送给对方\n- 数据链路层\n  - 用来处理网络链接的硬件部分（物理可见部分）\n  - 硬件上的范畴均在链路层的作用范围之内\n\n#### `TCP/IP` 通信传输流\n利用 `TCP/IP` 协议族进行网络通信时，会通过分层顺序与对方进行通信。发送端从应用层往下走，接收端从链路层网上走。\n\n发送端在层与层之间传输数据时，没经过一层时必定会被打上一个该层所属的首部信息\n\n反之，接收端在层与层传输数据时，每经过一层会把对应的首部消去\n\n### `TCP` 、`IP`、`DNS`\n#### 负责传输的 `IP` 协议\n\n- IP网络协议位于网络层。作用是把各种数据包传递给对方(IP 与 IP地址 不是一回事)\n- 若要保证确实传递给地方需要\b满足各类条件，其中两个重要的条件是 `IP地址` 和 `MAC地址`\n  - IP地址 指明了节点被分配到的地址；IP地址 可变换；IP间的通信依赖MAC地址\n  - MAC地址 是指网卡所属的固定地址；MAC地址 基本不会变换\n  - ARP协议（address resolution protocol）是一种用以解析地址的协议，根据通信方的IP地址 就可以反查出对应 MAC地址；ARP协议凭借MAC地址进行通信\n\n#### 确保可靠性的 `TCP协议`\n\n- 按层次分，TCP位于传输层，提供可靠的字节流服务\n  - 字节流服务：为了方便传输，将大块数据分割成以报文段为单位的数据包进行管理\n  - 可靠的传输服务：能够把数据准确可靠的传给对方\n- 为了准确无误将数据送至目标，\bTCP协议 采用了`三次握手策略`\n- 握手过程使用了 TCP的标志 SYN（synchronize同步） 和 ACK（acknowledgement确认）\n  - 发送端先发送一个带有 SYN 标志的数据包给接收端\n  - 接收端收到后，回传一个带有 SYN/ACK 标志灯数据包以示传达确认信息\n  - 发送端再回传一个带有 ACK 标志的数据包代表握手结束\n\n### 负责域名解析的 DNS 服务\n- DNS（domain name system）服务和HTTP协议一样位于应用层的协议；他提供域名到IP地址之间的解析服务\n\n### 各种协议已HTTP协议的关系\n![http](/teresa/images/HTTP.jpg)\n\n### URI 和 URL\n- URI 统一资源标识符；用字符串标识某一互联网资源\n- URL 表示资源的地点；是URI的子集\n\n## 简单的HTTP协议\n### 请求和响应\n- 请求报文（报文首部+报文主体）\n  - 请求方法\n  - 请求URI\n  - 协议版本\n  - 可选的请求首部字段（请求首部字段、通用首部字段、实体首部字段）\n  - 内容实体\n\n- 响应报文\n  - 协议版本\n  - 状态码\n  - 解释状态码的短语\n  - 可选的响应首部字段\n  - 实体主体\n\n### HTTP是不保存状态的协议\n\n> HTTP协议是一种不保存状态，即无状态协议。HTTP协议自身不对请求和响应之间的通信状态进行保存。也就是说，在HTTP这个级别，协议对已发送过的请求或响应都不做持久化处理。\n>\n> 也是说，无法根据之前的状态进行本次的请求处理\n\n### 告知服务器意图的 HTTP 方法\n- GET 获取资源\n- POST 传输实体主体\n- PUT 传输文件\n- HEAD 获得报文首部\n- DELETE 删除文件（和 PUT 一样不带验证机制，所以一般的web网站不使用 delete 方法）\n- OPTIONS 徐文支持的方法（查询URI指定资源支持的方法）\n- CONNECT 要求用隧道协议链接代理\n- TRACE 追踪路径\n\n### 持久链接节省通信量\n> HTTP 协议的初始版本汇总，每进行一次HTTP通信就要断开一次 TCP 链接。对于早时候的小容量文本传输这没有多大问题，但现在比如包含大量图片的网站，每次请求都会造成无谓的TCP链接建立和断开，增加通信量的开销。\n\n为解决上述问题，HTTP/1.1 和 部分 HTTP/1.0 提出持久链接的 方法。\n\n持久连接的特点是，只要任意一端没有明确提出断开连接，则保持 TCP 链接状态。旨在建立 1 次TCP链接后进行多次请求和响应的交互；\n\n在 HTTP/1.1 中，所有的链接默认都是持久链接\n> 管线化：持久连接使得多数请求以管线化方式发送成为可能。管线化技术出现，不用等待响应亦可直接发送下一个请求，实现并行发送多个请求\n\n### 使用cookie的状态管理\n## HTTP报文内的HTTP信息\n### HTTP报文\n> 用于HTTP协议交互的信息为 HTTP 报文；HTTP报文是有多行数据构成的字符串文本\n\n## 返回结果的 HTTP 状态码\n### 状态码类别\n- 1xx （信息型状态码） 接受的请求正在处理\n- 2xx （成功状态码）请求正常处理完毕\n- 3xx （重定向状态码）需要进行附加操作以完成请求\n- 4xx （客户端状态码）服务器无法处理请求\n- 5xx （服务器错误状态码）服务器处理请求出错\n\n### 2xx 成功\n- 200 OK 请求成功\n- 204 No Content 请求成功没有资源可返回\n- 206 Partial Content\n\n### 3xx 重定向\n- 301 Moved Permanently 永久性重定向\n- 302 Found 临时性重定向\n- 303 See Other 表示请求的对应资源存在着另一个URL，应使用get方法定向获取资源\n- 304 Not Modified 表示客户端发送附带条件的请求时，请求成功，但是不存在满足条件的资源时（改状态码和重定向没有关系）\n- 307 Temporary Redirect 临时重定向，与302相同，但该状态严格按照标准不准post请求变成get\n\n### 4xx 客户端错误\n- 400 Bad Request 表示请求报文中存在语法错误\n- 401 Unauthorized 表示发送的请求需要通过HTTP认证\n- 403 Forbidden 表示对请求资源的访问被服务器拒绝了\n- 404 Not Found 表明服务器无法找到请求资源\n\n### 5xx 服务器错误\n- 500 服务器端在执行请求时发送了错误\n- 503 Server Unavailable 服务器处在超负荷或正在进行停机维护，无法处理请求\n\n## 与 HTTP 协作的web服务器\n### 用单台虚拟主机实现多个域名\n即使物理层面只有一台服务器，但只要使用虚拟主机的功能。则可以奖项已具有多台服务器\n\n### 通信数据转发程序：代理、网关、隧道\n这些应用程序和服务器可以将请求转发给通信线路上的下一站服务器，并且能接受从那台服务器发送的响应再转给客户端\n#### 代理 \n代理服务器的基本行为就是接收客户端发送的请求后转发给其它服务器。代理不改变URI，会直接发送给出游资源的目标服务器。\n\n在HTTP通信过程中。可级联多台代理服务器。转发时，需要附加Via首部字段以标记出经过的主机信息\n#### 网关\n利用网关，可以有HTTP请求转化为其它协议通信\n#### 隧道\n隧道可按要求建立起一条与其它服务器的通信线路，解释使用SSL等加密手段进行通信。隧道的目的是确保客户端能与服务器进行安全的通信。\n## HTTP首部\n### HTTP首部字段\n> 使用首部字段是为了给浏览器和服务器提供报文主体大小，所使用语言、认证信息等内容。\n\n## 确保web安全的HTTPS\n### HTTP的缺点\n- 通信使用明文（不加密），内容可能被窃听\n- 不验证通信方的身份，有可能遭遇伪装\n- 无法验证报文的完整性，所以有可能已遭篡改\n\n### HTTP + 加密 + 认证 + \b完整性保护 = HTTPS\n#### 公开密钥加密技术\n- 共享密钥加密\n  - 加密和解密通用一个密钥的方式成为共享密钥加密（对称秘钥加密）\n  - 以共享密钥的方式加密时必须将密钥也发给对方，期间也存在监听问题\n\n- 使用两把密钥的公开密钥加密\n  - 公开密钥加密使用一堆非对称的密钥；一个私有密钥，另一个叫公开密钥\n  - 公开密钥加密与共享密钥加密相比，其处理速度要慢些\n\n","slug":"HTTP协议","published":1,"updated":"2018-11-13T01:58:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7kpl04o0035jcs6ubelmhoy","content":"<h2 id=\"web及网络基础\"><a href=\"#web及网络基础\" class=\"headerlink\" title=\"web及网络基础\"></a>web及网络基础</h2><h3 id=\"网路基础-TCP-IP\"><a href=\"#网路基础-TCP-IP\" class=\"headerlink\" title=\"网路基础 TCP/IP\"></a>网路基础 <code>TCP/IP</code></h3><blockquote>\n<p>通常使用的网络是在 <code>TCP/IP</code> 协议族的基础上运作的。而 <code>HTTP</code> 属于他内部的一个子集</p>\n</blockquote>\n<h4 id=\"TCP-IP-协议族\"><a href=\"#TCP-IP-协议族\" class=\"headerlink\" title=\"TCP/IP 协议族\"></a><code>TCP/IP</code> 协议族</h4><blockquote>\n<p><code>TCP/IP</code> 是互联网相关的各类协议族的总称</p>\n</blockquote>\n<h4 id=\"TCP-IP-的分层管理\"><a href=\"#TCP-IP-的分层管理\" class=\"headerlink\" title=\"TCP/IP 的分层管理\"></a><code>TCP/IP</code> 的分层管理</h4><p><code>TCP/IP</code> 协议族按层次分以下4层：</p>\n<ul>\n<li>应用层<ul>\n<li>应用层·应用层决定论向用户提供应用服务时通信的活动。</li>\n<li>HTTP协议也处于该层</li>\n</ul>\n</li>\n<li>传输层<ul>\n<li>提供处于网络连接中的两台计算机之间的数据传输</li>\n<li>传输层有两个性质不同的协议 <code>TCP</code> 和 \b<code>UDP</code>（用户数据报协议）</li>\n</ul>\n</li>\n<li>网络层<ul>\n<li>用来处理在网络上流动的数据包。（数据包是网络传输的最小数据单位）</li>\n<li>该层规定了通过怎样的路径（所谓的传输路线）到达对方计算机，并把数据包传送给对方</li>\n</ul>\n</li>\n<li>数据链路层<ul>\n<li>用来处理网络链接的硬件部分（物理可见部分）</li>\n<li>硬件上的范畴均在链路层的作用范围之内</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"TCP-IP-通信传输流\"><a href=\"#TCP-IP-通信传输流\" class=\"headerlink\" title=\"TCP/IP 通信传输流\"></a><code>TCP/IP</code> 通信传输流</h4><p>利用 <code>TCP/IP</code> 协议族进行网络通信时，会通过分层顺序与对方进行通信。发送端从应用层往下走，接收端从链路层网上走。</p>\n<p>发送端在层与层之间传输数据时，没经过一层时必定会被打上一个该层所属的首部信息</p>\n<p>反之，接收端在层与层传输数据时，每经过一层会把对应的首部消去</p>\n<h3 id=\"TCP-、IP、DNS\"><a href=\"#TCP-、IP、DNS\" class=\"headerlink\" title=\"TCP 、IP、DNS\"></a><code>TCP</code> 、<code>IP</code>、<code>DNS</code></h3><h4 id=\"负责传输的-IP-协议\"><a href=\"#负责传输的-IP-协议\" class=\"headerlink\" title=\"负责传输的 IP 协议\"></a>负责传输的 <code>IP</code> 协议</h4><ul>\n<li>IP网络协议位于网络层。作用是把各种数据包传递给对方(IP 与 IP地址 不是一回事)</li>\n<li>若要保证确实传递给地方需要\b满足各类条件，其中两个重要的条件是 <code>IP地址</code> 和 <code>MAC地址</code><ul>\n<li>IP地址 指明了节点被分配到的地址；IP地址 可变换；IP间的通信依赖MAC地址</li>\n<li>MAC地址 是指网卡所属的固定地址；MAC地址 基本不会变换</li>\n<li>ARP协议（address resolution protocol）是一种用以解析地址的协议，根据通信方的IP地址 就可以反查出对应 MAC地址；ARP协议凭借MAC地址进行通信</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"确保可靠性的-TCP协议\"><a href=\"#确保可靠性的-TCP协议\" class=\"headerlink\" title=\"确保可靠性的 TCP协议\"></a>确保可靠性的 <code>TCP协议</code></h4><ul>\n<li>按层次分，TCP位于传输层，提供可靠的字节流服务<ul>\n<li>字节流服务：为了方便传输，将大块数据分割成以报文段为单位的数据包进行管理</li>\n<li>可靠的传输服务：能够把数据准确可靠的传给对方</li>\n</ul>\n</li>\n<li>为了准确无误将数据送至目标，\bTCP协议 采用了<code>三次握手策略</code></li>\n<li>握手过程使用了 TCP的标志 SYN（synchronize同步） 和 ACK（acknowledgement确认）<ul>\n<li>发送端先发送一个带有 SYN 标志的数据包给接收端</li>\n<li>接收端收到后，回传一个带有 SYN/ACK 标志灯数据包以示传达确认信息</li>\n<li>发送端再回传一个带有 ACK 标志的数据包代表握手结束</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"负责域名解析的-DNS-服务\"><a href=\"#负责域名解析的-DNS-服务\" class=\"headerlink\" title=\"负责域名解析的 DNS 服务\"></a>负责域名解析的 DNS 服务</h3><ul>\n<li>DNS（domain name system）服务和HTTP协议一样位于应用层的协议；他提供域名到IP地址之间的解析服务</li>\n</ul>\n<h3 id=\"各种协议已HTTP协议的关系\"><a href=\"#各种协议已HTTP协议的关系\" class=\"headerlink\" title=\"各种协议已HTTP协议的关系\"></a>各种协议已HTTP协议的关系</h3><p><img src=\"/teresa/images/HTTP.jpg\" alt=\"http\"></p>\n<h3 id=\"URI-和-URL\"><a href=\"#URI-和-URL\" class=\"headerlink\" title=\"URI 和 URL\"></a>URI 和 URL</h3><ul>\n<li>URI 统一资源标识符；用字符串标识某一互联网资源</li>\n<li>URL 表示资源的地点；是URI的子集</li>\n</ul>\n<h2 id=\"简单的HTTP协议\"><a href=\"#简单的HTTP协议\" class=\"headerlink\" title=\"简单的HTTP协议\"></a>简单的HTTP协议</h2><h3 id=\"请求和响应\"><a href=\"#请求和响应\" class=\"headerlink\" title=\"请求和响应\"></a>请求和响应</h3><ul>\n<li><p>请求报文（报文首部+报文主体）</p>\n<ul>\n<li>请求方法</li>\n<li>请求URI</li>\n<li>协议版本</li>\n<li>可选的请求首部字段（请求首部字段、通用首部字段、实体首部字段）</li>\n<li>内容实体</li>\n</ul>\n</li>\n<li><p>响应报文</p>\n<ul>\n<li>协议版本</li>\n<li>状态码</li>\n<li>解释状态码的短语</li>\n<li>可选的响应首部字段</li>\n<li>实体主体</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"HTTP是不保存状态的协议\"><a href=\"#HTTP是不保存状态的协议\" class=\"headerlink\" title=\"HTTP是不保存状态的协议\"></a>HTTP是不保存状态的协议</h3><blockquote>\n<p>HTTP协议是一种不保存状态，即无状态协议。HTTP协议自身不对请求和响应之间的通信状态进行保存。也就是说，在HTTP这个级别，协议对已发送过的请求或响应都不做持久化处理。</p>\n<p>也是说，无法根据之前的状态进行本次的请求处理</p>\n</blockquote>\n<h3 id=\"告知服务器意图的-HTTP-方法\"><a href=\"#告知服务器意图的-HTTP-方法\" class=\"headerlink\" title=\"告知服务器意图的 HTTP 方法\"></a>告知服务器意图的 HTTP 方法</h3><ul>\n<li>GET 获取资源</li>\n<li>POST 传输实体主体</li>\n<li>PUT 传输文件</li>\n<li>HEAD 获得报文首部</li>\n<li>DELETE 删除文件（和 PUT 一样不带验证机制，所以一般的web网站不使用 delete 方法）</li>\n<li>OPTIONS 徐文支持的方法（查询URI指定资源支持的方法）</li>\n<li>CONNECT 要求用隧道协议链接代理</li>\n<li>TRACE 追踪路径</li>\n</ul>\n<h3 id=\"持久链接节省通信量\"><a href=\"#持久链接节省通信量\" class=\"headerlink\" title=\"持久链接节省通信量\"></a>持久链接节省通信量</h3><blockquote>\n<p>HTTP 协议的初始版本汇总，每进行一次HTTP通信就要断开一次 TCP 链接。对于早时候的小容量文本传输这没有多大问题，但现在比如包含大量图片的网站，每次请求都会造成无谓的TCP链接建立和断开，增加通信量的开销。</p>\n</blockquote>\n<p>为解决上述问题，HTTP/1.1 和 部分 HTTP/1.0 提出持久链接的 方法。</p>\n<p>持久连接的特点是，只要任意一端没有明确提出断开连接，则保持 TCP 链接状态。旨在建立 1 次TCP链接后进行多次请求和响应的交互；</p>\n<p>在 HTTP/1.1 中，所有的链接默认都是持久链接</p>\n<blockquote>\n<p>管线化：持久连接使得多数请求以管线化方式发送成为可能。管线化技术出现，不用等待响应亦可直接发送下一个请求，实现并行发送多个请求</p>\n</blockquote>\n<h3 id=\"使用cookie的状态管理\"><a href=\"#使用cookie的状态管理\" class=\"headerlink\" title=\"使用cookie的状态管理\"></a>使用cookie的状态管理</h3><h2 id=\"HTTP报文内的HTTP信息\"><a href=\"#HTTP报文内的HTTP信息\" class=\"headerlink\" title=\"HTTP报文内的HTTP信息\"></a>HTTP报文内的HTTP信息</h2><h3 id=\"HTTP报文\"><a href=\"#HTTP报文\" class=\"headerlink\" title=\"HTTP报文\"></a>HTTP报文</h3><blockquote>\n<p>用于HTTP协议交互的信息为 HTTP 报文；HTTP报文是有多行数据构成的字符串文本</p>\n</blockquote>\n<h2 id=\"返回结果的-HTTP-状态码\"><a href=\"#返回结果的-HTTP-状态码\" class=\"headerlink\" title=\"返回结果的 HTTP 状态码\"></a>返回结果的 HTTP 状态码</h2><h3 id=\"状态码类别\"><a href=\"#状态码类别\" class=\"headerlink\" title=\"状态码类别\"></a>状态码类别</h3><ul>\n<li>1xx （信息型状态码） 接受的请求正在处理</li>\n<li>2xx （成功状态码）请求正常处理完毕</li>\n<li>3xx （重定向状态码）需要进行附加操作以完成请求</li>\n<li>4xx （客户端状态码）服务器无法处理请求</li>\n<li>5xx （服务器错误状态码）服务器处理请求出错</li>\n</ul>\n<h3 id=\"2xx-成功\"><a href=\"#2xx-成功\" class=\"headerlink\" title=\"2xx 成功\"></a>2xx 成功</h3><ul>\n<li>200 OK 请求成功</li>\n<li>204 No Content 请求成功没有资源可返回</li>\n<li>206 Partial Content</li>\n</ul>\n<h3 id=\"3xx-重定向\"><a href=\"#3xx-重定向\" class=\"headerlink\" title=\"3xx 重定向\"></a>3xx 重定向</h3><ul>\n<li>301 Moved Permanently 永久性重定向</li>\n<li>302 Found 临时性重定向</li>\n<li>303 See Other 表示请求的对应资源存在着另一个URL，应使用get方法定向获取资源</li>\n<li>304 Not Modified 表示客户端发送附带条件的请求时，请求成功，但是不存在满足条件的资源时（改状态码和重定向没有关系）</li>\n<li>307 Temporary Redirect 临时重定向，与302相同，但该状态严格按照标准不准post请求变成get</li>\n</ul>\n<h3 id=\"4xx-客户端错误\"><a href=\"#4xx-客户端错误\" class=\"headerlink\" title=\"4xx 客户端错误\"></a>4xx 客户端错误</h3><ul>\n<li>400 Bad Request 表示请求报文中存在语法错误</li>\n<li>401 Unauthorized 表示发送的请求需要通过HTTP认证</li>\n<li>403 Forbidden 表示对请求资源的访问被服务器拒绝了</li>\n<li>404 Not Found 表明服务器无法找到请求资源</li>\n</ul>\n<h3 id=\"5xx-服务器错误\"><a href=\"#5xx-服务器错误\" class=\"headerlink\" title=\"5xx 服务器错误\"></a>5xx 服务器错误</h3><ul>\n<li>500 服务器端在执行请求时发送了错误</li>\n<li>503 Server Unavailable 服务器处在超负荷或正在进行停机维护，无法处理请求</li>\n</ul>\n<h2 id=\"与-HTTP-协作的web服务器\"><a href=\"#与-HTTP-协作的web服务器\" class=\"headerlink\" title=\"与 HTTP 协作的web服务器\"></a>与 HTTP 协作的web服务器</h2><h3 id=\"用单台虚拟主机实现多个域名\"><a href=\"#用单台虚拟主机实现多个域名\" class=\"headerlink\" title=\"用单台虚拟主机实现多个域名\"></a>用单台虚拟主机实现多个域名</h3><p>即使物理层面只有一台服务器，但只要使用虚拟主机的功能。则可以奖项已具有多台服务器</p>\n<h3 id=\"通信数据转发程序：代理、网关、隧道\"><a href=\"#通信数据转发程序：代理、网关、隧道\" class=\"headerlink\" title=\"通信数据转发程序：代理、网关、隧道\"></a>通信数据转发程序：代理、网关、隧道</h3><p>这些应用程序和服务器可以将请求转发给通信线路上的下一站服务器，并且能接受从那台服务器发送的响应再转给客户端</p>\n<h4 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h4><p>代理服务器的基本行为就是接收客户端发送的请求后转发给其它服务器。代理不改变URI，会直接发送给出游资源的目标服务器。</p>\n<p>在HTTP通信过程中。可级联多台代理服务器。转发时，需要附加Via首部字段以标记出经过的主机信息</p>\n<h4 id=\"网关\"><a href=\"#网关\" class=\"headerlink\" title=\"网关\"></a>网关</h4><p>利用网关，可以有HTTP请求转化为其它协议通信</p>\n<h4 id=\"隧道\"><a href=\"#隧道\" class=\"headerlink\" title=\"隧道\"></a>隧道</h4><p>隧道可按要求建立起一条与其它服务器的通信线路，解释使用SSL等加密手段进行通信。隧道的目的是确保客户端能与服务器进行安全的通信。</p>\n<h2 id=\"HTTP首部\"><a href=\"#HTTP首部\" class=\"headerlink\" title=\"HTTP首部\"></a>HTTP首部</h2><h3 id=\"HTTP首部字段\"><a href=\"#HTTP首部字段\" class=\"headerlink\" title=\"HTTP首部字段\"></a>HTTP首部字段</h3><blockquote>\n<p>使用首部字段是为了给浏览器和服务器提供报文主体大小，所使用语言、认证信息等内容。</p>\n</blockquote>\n<h2 id=\"确保web安全的HTTPS\"><a href=\"#确保web安全的HTTPS\" class=\"headerlink\" title=\"确保web安全的HTTPS\"></a>确保web安全的HTTPS</h2><h3 id=\"HTTP的缺点\"><a href=\"#HTTP的缺点\" class=\"headerlink\" title=\"HTTP的缺点\"></a>HTTP的缺点</h3><ul>\n<li>通信使用明文（不加密），内容可能被窃听</li>\n<li>不验证通信方的身份，有可能遭遇伪装</li>\n<li>无法验证报文的完整性，所以有可能已遭篡改</li>\n</ul>\n<h3 id=\"HTTP-加密-认证-完整性保护-HTTPS\"><a href=\"#HTTP-加密-认证-完整性保护-HTTPS\" class=\"headerlink\" title=\"HTTP + 加密 + 认证 + \b完整性保护 = HTTPS\"></a>HTTP + 加密 + 认证 + \b完整性保护 = HTTPS</h3><h4 id=\"公开密钥加密技术\"><a href=\"#公开密钥加密技术\" class=\"headerlink\" title=\"公开密钥加密技术\"></a>公开密钥加密技术</h4><ul>\n<li><p>共享密钥加密</p>\n<ul>\n<li>加密和解密通用一个密钥的方式成为共享密钥加密（对称秘钥加密）</li>\n<li>以共享密钥的方式加密时必须将密钥也发给对方，期间也存在监听问题</li>\n</ul>\n</li>\n<li><p>使用两把密钥的公开密钥加密</p>\n<ul>\n<li>公开密钥加密使用一堆非对称的密钥；一个私有密钥，另一个叫公开密钥</li>\n<li>公开密钥加密与共享密钥加密相比，其处理速度要慢些</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"web及网络基础\"><a href=\"#web及网络基础\" class=\"headerlink\" title=\"web及网络基础\"></a>web及网络基础</h2><h3 id=\"网路基础-TCP-IP\"><a href=\"#网路基础-TCP-IP\" class=\"headerlink\" title=\"网路基础 TCP/IP\"></a>网路基础 <code>TCP/IP</code></h3><blockquote>\n<p>通常使用的网络是在 <code>TCP/IP</code> 协议族的基础上运作的。而 <code>HTTP</code> 属于他内部的一个子集</p>\n</blockquote>\n<h4 id=\"TCP-IP-协议族\"><a href=\"#TCP-IP-协议族\" class=\"headerlink\" title=\"TCP/IP 协议族\"></a><code>TCP/IP</code> 协议族</h4><blockquote>\n<p><code>TCP/IP</code> 是互联网相关的各类协议族的总称</p>\n</blockquote>\n<h4 id=\"TCP-IP-的分层管理\"><a href=\"#TCP-IP-的分层管理\" class=\"headerlink\" title=\"TCP/IP 的分层管理\"></a><code>TCP/IP</code> 的分层管理</h4><p><code>TCP/IP</code> 协议族按层次分以下4层：</p>\n<ul>\n<li>应用层<ul>\n<li>应用层·应用层决定论向用户提供应用服务时通信的活动。</li>\n<li>HTTP协议也处于该层</li>\n</ul>\n</li>\n<li>传输层<ul>\n<li>提供处于网络连接中的两台计算机之间的数据传输</li>\n<li>传输层有两个性质不同的协议 <code>TCP</code> 和 \b<code>UDP</code>（用户数据报协议）</li>\n</ul>\n</li>\n<li>网络层<ul>\n<li>用来处理在网络上流动的数据包。（数据包是网络传输的最小数据单位）</li>\n<li>该层规定了通过怎样的路径（所谓的传输路线）到达对方计算机，并把数据包传送给对方</li>\n</ul>\n</li>\n<li>数据链路层<ul>\n<li>用来处理网络链接的硬件部分（物理可见部分）</li>\n<li>硬件上的范畴均在链路层的作用范围之内</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"TCP-IP-通信传输流\"><a href=\"#TCP-IP-通信传输流\" class=\"headerlink\" title=\"TCP/IP 通信传输流\"></a><code>TCP/IP</code> 通信传输流</h4><p>利用 <code>TCP/IP</code> 协议族进行网络通信时，会通过分层顺序与对方进行通信。发送端从应用层往下走，接收端从链路层网上走。</p>\n<p>发送端在层与层之间传输数据时，没经过一层时必定会被打上一个该层所属的首部信息</p>\n<p>反之，接收端在层与层传输数据时，每经过一层会把对应的首部消去</p>\n<h3 id=\"TCP-、IP、DNS\"><a href=\"#TCP-、IP、DNS\" class=\"headerlink\" title=\"TCP 、IP、DNS\"></a><code>TCP</code> 、<code>IP</code>、<code>DNS</code></h3><h4 id=\"负责传输的-IP-协议\"><a href=\"#负责传输的-IP-协议\" class=\"headerlink\" title=\"负责传输的 IP 协议\"></a>负责传输的 <code>IP</code> 协议</h4><ul>\n<li>IP网络协议位于网络层。作用是把各种数据包传递给对方(IP 与 IP地址 不是一回事)</li>\n<li>若要保证确实传递给地方需要\b满足各类条件，其中两个重要的条件是 <code>IP地址</code> 和 <code>MAC地址</code><ul>\n<li>IP地址 指明了节点被分配到的地址；IP地址 可变换；IP间的通信依赖MAC地址</li>\n<li>MAC地址 是指网卡所属的固定地址；MAC地址 基本不会变换</li>\n<li>ARP协议（address resolution protocol）是一种用以解析地址的协议，根据通信方的IP地址 就可以反查出对应 MAC地址；ARP协议凭借MAC地址进行通信</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"确保可靠性的-TCP协议\"><a href=\"#确保可靠性的-TCP协议\" class=\"headerlink\" title=\"确保可靠性的 TCP协议\"></a>确保可靠性的 <code>TCP协议</code></h4><ul>\n<li>按层次分，TCP位于传输层，提供可靠的字节流服务<ul>\n<li>字节流服务：为了方便传输，将大块数据分割成以报文段为单位的数据包进行管理</li>\n<li>可靠的传输服务：能够把数据准确可靠的传给对方</li>\n</ul>\n</li>\n<li>为了准确无误将数据送至目标，\bTCP协议 采用了<code>三次握手策略</code></li>\n<li>握手过程使用了 TCP的标志 SYN（synchronize同步） 和 ACK（acknowledgement确认）<ul>\n<li>发送端先发送一个带有 SYN 标志的数据包给接收端</li>\n<li>接收端收到后，回传一个带有 SYN/ACK 标志灯数据包以示传达确认信息</li>\n<li>发送端再回传一个带有 ACK 标志的数据包代表握手结束</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"负责域名解析的-DNS-服务\"><a href=\"#负责域名解析的-DNS-服务\" class=\"headerlink\" title=\"负责域名解析的 DNS 服务\"></a>负责域名解析的 DNS 服务</h3><ul>\n<li>DNS（domain name system）服务和HTTP协议一样位于应用层的协议；他提供域名到IP地址之间的解析服务</li>\n</ul>\n<h3 id=\"各种协议已HTTP协议的关系\"><a href=\"#各种协议已HTTP协议的关系\" class=\"headerlink\" title=\"各种协议已HTTP协议的关系\"></a>各种协议已HTTP协议的关系</h3><p><img src=\"/teresa/images/HTTP.jpg\" alt=\"http\"></p>\n<h3 id=\"URI-和-URL\"><a href=\"#URI-和-URL\" class=\"headerlink\" title=\"URI 和 URL\"></a>URI 和 URL</h3><ul>\n<li>URI 统一资源标识符；用字符串标识某一互联网资源</li>\n<li>URL 表示资源的地点；是URI的子集</li>\n</ul>\n<h2 id=\"简单的HTTP协议\"><a href=\"#简单的HTTP协议\" class=\"headerlink\" title=\"简单的HTTP协议\"></a>简单的HTTP协议</h2><h3 id=\"请求和响应\"><a href=\"#请求和响应\" class=\"headerlink\" title=\"请求和响应\"></a>请求和响应</h3><ul>\n<li><p>请求报文（报文首部+报文主体）</p>\n<ul>\n<li>请求方法</li>\n<li>请求URI</li>\n<li>协议版本</li>\n<li>可选的请求首部字段（请求首部字段、通用首部字段、实体首部字段）</li>\n<li>内容实体</li>\n</ul>\n</li>\n<li><p>响应报文</p>\n<ul>\n<li>协议版本</li>\n<li>状态码</li>\n<li>解释状态码的短语</li>\n<li>可选的响应首部字段</li>\n<li>实体主体</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"HTTP是不保存状态的协议\"><a href=\"#HTTP是不保存状态的协议\" class=\"headerlink\" title=\"HTTP是不保存状态的协议\"></a>HTTP是不保存状态的协议</h3><blockquote>\n<p>HTTP协议是一种不保存状态，即无状态协议。HTTP协议自身不对请求和响应之间的通信状态进行保存。也就是说，在HTTP这个级别，协议对已发送过的请求或响应都不做持久化处理。</p>\n<p>也是说，无法根据之前的状态进行本次的请求处理</p>\n</blockquote>\n<h3 id=\"告知服务器意图的-HTTP-方法\"><a href=\"#告知服务器意图的-HTTP-方法\" class=\"headerlink\" title=\"告知服务器意图的 HTTP 方法\"></a>告知服务器意图的 HTTP 方法</h3><ul>\n<li>GET 获取资源</li>\n<li>POST 传输实体主体</li>\n<li>PUT 传输文件</li>\n<li>HEAD 获得报文首部</li>\n<li>DELETE 删除文件（和 PUT 一样不带验证机制，所以一般的web网站不使用 delete 方法）</li>\n<li>OPTIONS 徐文支持的方法（查询URI指定资源支持的方法）</li>\n<li>CONNECT 要求用隧道协议链接代理</li>\n<li>TRACE 追踪路径</li>\n</ul>\n<h3 id=\"持久链接节省通信量\"><a href=\"#持久链接节省通信量\" class=\"headerlink\" title=\"持久链接节省通信量\"></a>持久链接节省通信量</h3><blockquote>\n<p>HTTP 协议的初始版本汇总，每进行一次HTTP通信就要断开一次 TCP 链接。对于早时候的小容量文本传输这没有多大问题，但现在比如包含大量图片的网站，每次请求都会造成无谓的TCP链接建立和断开，增加通信量的开销。</p>\n</blockquote>\n<p>为解决上述问题，HTTP/1.1 和 部分 HTTP/1.0 提出持久链接的 方法。</p>\n<p>持久连接的特点是，只要任意一端没有明确提出断开连接，则保持 TCP 链接状态。旨在建立 1 次TCP链接后进行多次请求和响应的交互；</p>\n<p>在 HTTP/1.1 中，所有的链接默认都是持久链接</p>\n<blockquote>\n<p>管线化：持久连接使得多数请求以管线化方式发送成为可能。管线化技术出现，不用等待响应亦可直接发送下一个请求，实现并行发送多个请求</p>\n</blockquote>\n<h3 id=\"使用cookie的状态管理\"><a href=\"#使用cookie的状态管理\" class=\"headerlink\" title=\"使用cookie的状态管理\"></a>使用cookie的状态管理</h3><h2 id=\"HTTP报文内的HTTP信息\"><a href=\"#HTTP报文内的HTTP信息\" class=\"headerlink\" title=\"HTTP报文内的HTTP信息\"></a>HTTP报文内的HTTP信息</h2><h3 id=\"HTTP报文\"><a href=\"#HTTP报文\" class=\"headerlink\" title=\"HTTP报文\"></a>HTTP报文</h3><blockquote>\n<p>用于HTTP协议交互的信息为 HTTP 报文；HTTP报文是有多行数据构成的字符串文本</p>\n</blockquote>\n<h2 id=\"返回结果的-HTTP-状态码\"><a href=\"#返回结果的-HTTP-状态码\" class=\"headerlink\" title=\"返回结果的 HTTP 状态码\"></a>返回结果的 HTTP 状态码</h2><h3 id=\"状态码类别\"><a href=\"#状态码类别\" class=\"headerlink\" title=\"状态码类别\"></a>状态码类别</h3><ul>\n<li>1xx （信息型状态码） 接受的请求正在处理</li>\n<li>2xx （成功状态码）请求正常处理完毕</li>\n<li>3xx （重定向状态码）需要进行附加操作以完成请求</li>\n<li>4xx （客户端状态码）服务器无法处理请求</li>\n<li>5xx （服务器错误状态码）服务器处理请求出错</li>\n</ul>\n<h3 id=\"2xx-成功\"><a href=\"#2xx-成功\" class=\"headerlink\" title=\"2xx 成功\"></a>2xx 成功</h3><ul>\n<li>200 OK 请求成功</li>\n<li>204 No Content 请求成功没有资源可返回</li>\n<li>206 Partial Content</li>\n</ul>\n<h3 id=\"3xx-重定向\"><a href=\"#3xx-重定向\" class=\"headerlink\" title=\"3xx 重定向\"></a>3xx 重定向</h3><ul>\n<li>301 Moved Permanently 永久性重定向</li>\n<li>302 Found 临时性重定向</li>\n<li>303 See Other 表示请求的对应资源存在着另一个URL，应使用get方法定向获取资源</li>\n<li>304 Not Modified 表示客户端发送附带条件的请求时，请求成功，但是不存在满足条件的资源时（改状态码和重定向没有关系）</li>\n<li>307 Temporary Redirect 临时重定向，与302相同，但该状态严格按照标准不准post请求变成get</li>\n</ul>\n<h3 id=\"4xx-客户端错误\"><a href=\"#4xx-客户端错误\" class=\"headerlink\" title=\"4xx 客户端错误\"></a>4xx 客户端错误</h3><ul>\n<li>400 Bad Request 表示请求报文中存在语法错误</li>\n<li>401 Unauthorized 表示发送的请求需要通过HTTP认证</li>\n<li>403 Forbidden 表示对请求资源的访问被服务器拒绝了</li>\n<li>404 Not Found 表明服务器无法找到请求资源</li>\n</ul>\n<h3 id=\"5xx-服务器错误\"><a href=\"#5xx-服务器错误\" class=\"headerlink\" title=\"5xx 服务器错误\"></a>5xx 服务器错误</h3><ul>\n<li>500 服务器端在执行请求时发送了错误</li>\n<li>503 Server Unavailable 服务器处在超负荷或正在进行停机维护，无法处理请求</li>\n</ul>\n<h2 id=\"与-HTTP-协作的web服务器\"><a href=\"#与-HTTP-协作的web服务器\" class=\"headerlink\" title=\"与 HTTP 协作的web服务器\"></a>与 HTTP 协作的web服务器</h2><h3 id=\"用单台虚拟主机实现多个域名\"><a href=\"#用单台虚拟主机实现多个域名\" class=\"headerlink\" title=\"用单台虚拟主机实现多个域名\"></a>用单台虚拟主机实现多个域名</h3><p>即使物理层面只有一台服务器，但只要使用虚拟主机的功能。则可以奖项已具有多台服务器</p>\n<h3 id=\"通信数据转发程序：代理、网关、隧道\"><a href=\"#通信数据转发程序：代理、网关、隧道\" class=\"headerlink\" title=\"通信数据转发程序：代理、网关、隧道\"></a>通信数据转发程序：代理、网关、隧道</h3><p>这些应用程序和服务器可以将请求转发给通信线路上的下一站服务器，并且能接受从那台服务器发送的响应再转给客户端</p>\n<h4 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h4><p>代理服务器的基本行为就是接收客户端发送的请求后转发给其它服务器。代理不改变URI，会直接发送给出游资源的目标服务器。</p>\n<p>在HTTP通信过程中。可级联多台代理服务器。转发时，需要附加Via首部字段以标记出经过的主机信息</p>\n<h4 id=\"网关\"><a href=\"#网关\" class=\"headerlink\" title=\"网关\"></a>网关</h4><p>利用网关，可以有HTTP请求转化为其它协议通信</p>\n<h4 id=\"隧道\"><a href=\"#隧道\" class=\"headerlink\" title=\"隧道\"></a>隧道</h4><p>隧道可按要求建立起一条与其它服务器的通信线路，解释使用SSL等加密手段进行通信。隧道的目的是确保客户端能与服务器进行安全的通信。</p>\n<h2 id=\"HTTP首部\"><a href=\"#HTTP首部\" class=\"headerlink\" title=\"HTTP首部\"></a>HTTP首部</h2><h3 id=\"HTTP首部字段\"><a href=\"#HTTP首部字段\" class=\"headerlink\" title=\"HTTP首部字段\"></a>HTTP首部字段</h3><blockquote>\n<p>使用首部字段是为了给浏览器和服务器提供报文主体大小，所使用语言、认证信息等内容。</p>\n</blockquote>\n<h2 id=\"确保web安全的HTTPS\"><a href=\"#确保web安全的HTTPS\" class=\"headerlink\" title=\"确保web安全的HTTPS\"></a>确保web安全的HTTPS</h2><h3 id=\"HTTP的缺点\"><a href=\"#HTTP的缺点\" class=\"headerlink\" title=\"HTTP的缺点\"></a>HTTP的缺点</h3><ul>\n<li>通信使用明文（不加密），内容可能被窃听</li>\n<li>不验证通信方的身份，有可能遭遇伪装</li>\n<li>无法验证报文的完整性，所以有可能已遭篡改</li>\n</ul>\n<h3 id=\"HTTP-加密-认证-完整性保护-HTTPS\"><a href=\"#HTTP-加密-认证-完整性保护-HTTPS\" class=\"headerlink\" title=\"HTTP + 加密 + 认证 + \b完整性保护 = HTTPS\"></a>HTTP + 加密 + 认证 + \b完整性保护 = HTTPS</h3><h4 id=\"公开密钥加密技术\"><a href=\"#公开密钥加密技术\" class=\"headerlink\" title=\"公开密钥加密技术\"></a>公开密钥加密技术</h4><ul>\n<li><p>共享密钥加密</p>\n<ul>\n<li>加密和解密通用一个密钥的方式成为共享密钥加密（对称秘钥加密）</li>\n<li>以共享密钥的方式加密时必须将密钥也发给对方，期间也存在监听问题</li>\n</ul>\n</li>\n<li><p>使用两把密钥的公开密钥加密</p>\n<ul>\n<li>公开密钥加密使用一堆非对称的密钥；一个私有密钥，另一个叫公开密钥</li>\n<li>公开密钥加密与共享密钥加密相比，其处理速度要慢些</li>\n</ul>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck7kpl01m0000jcs6gcjpjwie","category_id":"ck7kpl01w0004jcs6zkgq8t8g","_id":"ck7kpl029000fjcs6w7gh483h"},{"post_id":"ck7kpl01t0002jcs6lpeu2lcu","category_id":"ck7kpl01w0004jcs6zkgq8t8g","_id":"ck7kpl02d000kjcs60dlzw4id"},{"post_id":"ck7kpl01y0006jcs6qbhwjhxa","category_id":"ck7kpl029000ejcs6dhskl9gu","_id":"ck7kpl02g000qjcs6qjprldat"},{"post_id":"ck7kpl02e000njcs6r7thz3si","category_id":"ck7kpl02e000ljcs6tm3p9wxs","_id":"ck7kpl02j000xjcs66wfltzwo"},{"post_id":"ck7kpl0200007jcs66a67ncma","category_id":"ck7kpl02e000ljcs6tm3p9wxs","_id":"ck7kpl02k0012jcs6y4bwkg1m"},{"post_id":"ck7kpl02f000pjcs6memqeg8b","category_id":"ck7kpl01w0004jcs6zkgq8t8g","_id":"ck7kpl02n0015jcs68otvshfc"},{"post_id":"ck7kpl02h000ujcs6gb8t5f9u","category_id":"ck7kpl01w0004jcs6zkgq8t8g","_id":"ck7kpl02p001ajcs6oqwsurim"},{"post_id":"ck7kpl0210008jcs6qgtvyqxh","category_id":"ck7kpl02g000rjcs6rf851v33","_id":"ck7kpl02r001djcs6mzdibbo6"},{"post_id":"ck7kpl02i000wjcs6580js205","category_id":"ck7kpl01w0004jcs6zkgq8t8g","_id":"ck7kpl02t001ijcs6zbedi0p5"},{"post_id":"ck7kpl02k0011jcs6cbszcesg","category_id":"ck7kpl029000ejcs6dhskl9gu","_id":"ck7kpl02u001ljcs6gq6jqlvn"},{"post_id":"ck7kpl024000cjcs6wql9ouzr","category_id":"ck7kpl029000ejcs6dhskl9gu","_id":"ck7kpl02v001ojcs6vi1sa449"},{"post_id":"ck7kpl02m0014jcs65vei2t6t","category_id":"ck7kpl029000ejcs6dhskl9gu","_id":"ck7kpl02x001tjcs62d401onx"},{"post_id":"ck7kpl027000djcs64ipix0fa","category_id":"ck7kpl029000ejcs6dhskl9gu","_id":"ck7kpl02z001wjcs6bgsmjxj3"},{"post_id":"ck7kpl02a000ijcs6v404sbkm","category_id":"ck7kpl02r001fjcs6545h157t","_id":"ck7kpl0300020jcs6xie86y6f"},{"post_id":"ck7kpl02c000jjcs653yz1vx7","category_id":"ck7kpl02v001pjcs68ua5m509","_id":"ck7kpl0320024jcs6pb7j1nx3"},{"post_id":"ck7kpl030001zjcs65hnohlpl","category_id":"ck7kpl029000ejcs6dhskl9gu","_id":"ck7kpl0340029jcs6pbgz5ke6"},{"post_id":"ck7kpl02o0019jcs6fbwbteya","category_id":"ck7kpl02r001fjcs6545h157t","_id":"ck7kpl035002djcs6fxu2pig8"},{"post_id":"ck7kpl0330027jcs68hcnaqnu","category_id":"ck7kpl029000ejcs6dhskl9gu","_id":"ck7kpl036002fjcs6tzbyybzf"},{"post_id":"ck7kpl02q001cjcs63845bver","category_id":"ck7kpl02r001fjcs6545h157t","_id":"ck7kpl037002ijcs6x57g3jih"},{"post_id":"ck7kpl02t001kjcs6wx7218y8","category_id":"ck7kpl035002ajcs6egp52206","_id":"ck7kpl037002jjcs6xxn9vn43"},{"post_id":"ck7kpl02u001njcs6dbspq1m9","category_id":"ck7kpl036002gjcs6wqmrua62","_id":"ck7kpl038002njcs6hgyehibx"},{"post_id":"ck7kpl02w001sjcs6jvic6hp2","category_id":"ck7kpl035002ajcs6egp52206","_id":"ck7kpl039002qjcs62q6cx1wq"},{"post_id":"ck7kpl02x001vjcs60e6w6tr5","category_id":"ck7kpl038002mjcs6oxg5ww5m","_id":"ck7kpl03a002wjcs6zg7g0ff0"},{"post_id":"ck7kpl0310022jcs6vcp44aw1","category_id":"ck7kpl035002ajcs6egp52206","_id":"ck7kpl03b002zjcs67bpfgtdd"},{"post_id":"ck7kpl04o0035jcs6ubelmhoy","category_id":"ck7kpl04p0037jcs63rfygxqu","_id":"ck7kpl04r003ajcs6z3mvx940"}],"PostTag":[{"post_id":"ck7kpl01m0000jcs6gcjpjwie","tag_id":"ck7kpl01y0005jcs6ci6if6p7","_id":"ck7kpl024000bjcs6u38jt53z"},{"post_id":"ck7kpl01t0002jcs6lpeu2lcu","tag_id":"ck7kpl01y0005jcs6ci6if6p7","_id":"ck7kpl029000hjcs6kglvbgxx"},{"post_id":"ck7kpl01y0006jcs6qbhwjhxa","tag_id":"ck7kpl029000gjcs6d0olkpvz","_id":"ck7kpl02f000ojcs6h90xu5qw"},{"post_id":"ck7kpl02e000njcs6r7thz3si","tag_id":"ck7kpl02e000mjcs6jmq88bmi","_id":"ck7kpl02h000tjcs6jkn7gprq"},{"post_id":"ck7kpl0200007jcs66a67ncma","tag_id":"ck7kpl02e000mjcs6jmq88bmi","_id":"ck7kpl02i000vjcs64s60utsx"},{"post_id":"ck7kpl02f000pjcs6memqeg8b","tag_id":"ck7kpl01y0005jcs6ci6if6p7","_id":"ck7kpl02j000yjcs6gtv4zhy0"},{"post_id":"ck7kpl02h000ujcs6gb8t5f9u","tag_id":"ck7kpl01y0005jcs6ci6if6p7","_id":"ck7kpl02m0013jcs63qiwh6po"},{"post_id":"ck7kpl0210008jcs6qgtvyqxh","tag_id":"ck7kpl02h000sjcs66ti2xord","_id":"ck7kpl02n0016jcs6fb7b9d6l"},{"post_id":"ck7kpl02i000wjcs6580js205","tag_id":"ck7kpl01y0005jcs6ci6if6p7","_id":"ck7kpl02q001bjcs60u0mprox"},{"post_id":"ck7kpl02k0011jcs6cbszcesg","tag_id":"ck7kpl029000gjcs6d0olkpvz","_id":"ck7kpl02r001ejcs6ocovs6po"},{"post_id":"ck7kpl024000cjcs6wql9ouzr","tag_id":"ck7kpl029000gjcs6d0olkpvz","_id":"ck7kpl02t001jjcs67z4hgvff"},{"post_id":"ck7kpl02m0014jcs65vei2t6t","tag_id":"ck7kpl029000gjcs6d0olkpvz","_id":"ck7kpl02u001mjcs695g22orp"},{"post_id":"ck7kpl027000djcs64ipix0fa","tag_id":"ck7kpl029000gjcs6d0olkpvz","_id":"ck7kpl02w001rjcs61od0qm9g"},{"post_id":"ck7kpl027000djcs64ipix0fa","tag_id":"ck7kpl02r001gjcs6jie7q7r5","_id":"ck7kpl02x001ujcs6x6uyspzz"},{"post_id":"ck7kpl02a000ijcs6v404sbkm","tag_id":"ck7kpl02v001qjcs6skqljz7r","_id":"ck7kpl0310021jcs6ynu5qceu"},{"post_id":"ck7kpl030001zjcs65hnohlpl","tag_id":"ck7kpl029000gjcs6d0olkpvz","_id":"ck7kpl0330026jcs6fyfcpw6g"},{"post_id":"ck7kpl02c000jjcs653yz1vx7","tag_id":"ck7kpl02z001yjcs6tvdu8369","_id":"ck7kpl0340028jcs6qfluw44j"},{"post_id":"ck7kpl0330027jcs68hcnaqnu","tag_id":"ck7kpl029000gjcs6d0olkpvz","_id":"ck7kpl035002cjcs6tpglgcu4"},{"post_id":"ck7kpl02o0019jcs6fbwbteya","tag_id":"ck7kpl02v001qjcs6skqljz7r","_id":"ck7kpl036002ejcs655ljeqg9"},{"post_id":"ck7kpl02q001cjcs63845bver","tag_id":"ck7kpl02v001qjcs6skqljz7r","_id":"ck7kpl039002pjcs6nqsit8nb"},{"post_id":"ck7kpl02q001cjcs63845bver","tag_id":"ck7kpl036002hjcs6zs0gud12","_id":"ck7kpl039002rjcs6cthqmiy7"},{"post_id":"ck7kpl02q001cjcs63845bver","tag_id":"ck7kpl037002ljcs6r81i6cam","_id":"ck7kpl03a002ujcs6d2duqvc7"},{"post_id":"ck7kpl02t001kjcs6wx7218y8","tag_id":"ck7kpl038002ojcs6v837e2qa","_id":"ck7kpl03a002vjcs633jmct0d"},{"post_id":"ck7kpl02u001njcs6dbspq1m9","tag_id":"ck7kpl03a002tjcs6bour7y67","_id":"ck7kpl03b002yjcs6exoc2m9g"},{"post_id":"ck7kpl02w001sjcs6jvic6hp2","tag_id":"ck7kpl03a002tjcs6bour7y67","_id":"ck7kpl03c0031jcs6mbox199f"},{"post_id":"ck7kpl02x001vjcs60e6w6tr5","tag_id":"ck7kpl03c0030jcs6nstfkpjr","_id":"ck7kpl03c0033jcs63evv58gt"},{"post_id":"ck7kpl0310022jcs6vcp44aw1","tag_id":"ck7kpl03c0032jcs6cdq9vn0j","_id":"ck7kpl03d0034jcs6rpcj9fw2"},{"post_id":"ck7kpl04o0035jcs6ubelmhoy","tag_id":"ck7kpl04q0038jcs6qkldw34b","_id":"ck7kpl04q0039jcs6lywjz9t8"}],"Tag":[{"name":"CSS","_id":"ck7kpl01y0005jcs6ci6if6p7"},{"name":"JavaScript","_id":"ck7kpl029000gjcs6d0olkpvz"},{"name":"HTML","_id":"ck7kpl02e000mjcs6jmq88bmi"},{"name":"BUG","_id":"ck7kpl02h000sjcs66ti2xord"},{"name":"AJAX","_id":"ck7kpl02r001gjcs6jie7q7r5"},{"name":"Vue","_id":"ck7kpl02v001qjcs6skqljz7r"},{"name":"创建博客","_id":"ck7kpl02z001yjcs6tvdu8369"},{"name":"vue-cli","_id":"ck7kpl036002hjcs6zs0gud12"},{"name":"spa","_id":"ck7kpl037002ljcs6r81i6cam"},{"name":"前端","_id":"ck7kpl038002ojcs6v837e2qa"},{"name":"浏览器","_id":"ck7kpl03a002tjcs6bour7y67"},{"name":"JSON","_id":"ck7kpl03c0030jcs6nstfkpjr"},{"name":"性能优化","_id":"ck7kpl03c0032jcs6cdq9vn0j"},{"name":"HTTP","_id":"ck7kpl04q0038jcs6qkldw34b"}]}}